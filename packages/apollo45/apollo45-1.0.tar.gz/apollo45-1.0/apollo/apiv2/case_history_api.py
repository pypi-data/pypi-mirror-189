"""
    UniCourt API v2 - Beta APIs

    <button><a href=\"/apiv2/download/UniCourt-APIv2-Spec.yaml\" >Download Legal Analytics API Specification</a></button>   # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from apollo.api_client import ApiClient, Endpoint as _Endpoint
from apollo.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from apollo.model.case_documents_histories import CaseDocumentsHistories
from apollo.model.case_documents_history import CaseDocumentsHistory
from apollo.model.docket_entries_histories import DocketEntriesHistories
from apollo.model.docket_entries_history import DocketEntriesHistory
from apollo.model.exception import Exception
from apollo.model.hearings_histories import HearingsHistories
from apollo.model.hearings_history import HearingsHistory
from apollo.model.judges_histories import JudgesHistories
from apollo.model.judges_history import JudgesHistory
from apollo.model.party_attorney_associations_histories import PartyAttorneyAssociationsHistories
from apollo.model.party_attorney_associations_history import PartyAttorneyAssociationsHistory
from apollo.model.related_cases_histories import RelatedCasesHistories
from apollo.model.related_cases_history import RelatedCasesHistory


class CaseHistoryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_case_documents_history_for_case_endpoint = _Endpoint(
            settings={
                'response_type': (CaseDocumentsHistories,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/caseDocumentsHistory',
                'operation_id': 'get_case_documents_history_for_case',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ],
                'required': [
                    'case_id',
                ],
                'nullable': [
                    'from_date',
                    'to_date',
                ],
                'enum': [
                ],
                'validation': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('from_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('to_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('page_number',): {

                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'from_date':
                        (str, none_type,),
                    'to_date':
                        (str, none_type,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'from_date': 'fromDate',
                    'to_date': 'toDate',
                    'page_number': 'pageNumber',
                },
                'location_map': {
                    'case_id': 'path',
                    'from_date': 'query',
                    'to_date': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_case_documents_history_for_case_bylast_fetch_date_with_updates_endpoint = _Endpoint(
            settings={
                'response_type': (CaseDocumentsHistory,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/caseDocumentsHistory/{lastFetchDateWithUpdates}',
                'operation_id': 'get_case_documents_history_for_case_bylast_fetch_date_with_updates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ],
                'required': [
                    'case_id',
                    'last_fetch_date_with_updates',
                ],
                'nullable': [
                ],
                'enum': [
                    'history_class',
                ],
                'validation': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('last_fetch_date_with_updates',): {
                        'max_length': 25,
                        'min_length': 25,
                    },
                    ('page_number',): {

                    },
                    ('history_class',): {
                        'max_length': 7,
                        'min_length': 3,
                    },
                },
                'allowed_values': {
                    ('history_class',): {

                        "ALL": "all",
                        "ADDED": "added",
                        "CHANGED": "changed"
                    },
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'last_fetch_date_with_updates':
                        (str,),
                    'page_number':
                        (int,),
                    'history_class':
                        (str,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'last_fetch_date_with_updates': 'lastFetchDateWithUpdates',
                    'page_number': 'pageNumber',
                    'history_class': 'historyClass',
                },
                'location_map': {
                    'case_id': 'path',
                    'last_fetch_date_with_updates': 'path',
                    'page_number': 'query',
                    'history_class': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_docket_entries_history_for_case_endpoint = _Endpoint(
            settings={
                'response_type': (DocketEntriesHistories,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/docketEntriesHistory',
                'operation_id': 'get_docket_entries_history_for_case',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ],
                'required': [
                    'case_id',
                ],
                'nullable': [
                    'from_date',
                    'to_date',
                ],
                'enum': [
                ],
                'validation': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('from_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('to_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('page_number',): {

                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'from_date':
                        (str, none_type,),
                    'to_date':
                        (str, none_type,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'from_date': 'fromDate',
                    'to_date': 'toDate',
                    'page_number': 'pageNumber',
                },
                'location_map': {
                    'case_id': 'path',
                    'from_date': 'query',
                    'to_date': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_docket_entries_history_for_case_bylast_fetch_date_with_updates_endpoint = _Endpoint(
            settings={
                'response_type': (DocketEntriesHistory,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/docketEntriesHistory/{lastFetchDateWithUpdates}',
                'operation_id': 'get_docket_entries_history_for_case_bylast_fetch_date_with_updates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ],
                'required': [
                    'case_id',
                    'last_fetch_date_with_updates',
                ],
                'nullable': [
                ],
                'enum': [
                    'history_class',
                ],
                'validation': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('last_fetch_date_with_updates',): {
                        'max_length': 25,
                        'min_length': 25,
                    },
                    ('page_number',): {

                    },
                    ('history_class',): {
                        'max_length': 7,
                        'min_length': 3,
                    },
                },
                'allowed_values': {
                    ('history_class',): {

                        "ALL": "all",
                        "ADDED": "added",
                        "CHANGED": "changed"
                    },
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'last_fetch_date_with_updates':
                        (str,),
                    'page_number':
                        (int,),
                    'history_class':
                        (str,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'last_fetch_date_with_updates': 'lastFetchDateWithUpdates',
                    'page_number': 'pageNumber',
                    'history_class': 'historyClass',
                },
                'location_map': {
                    'case_id': 'path',
                    'last_fetch_date_with_updates': 'path',
                    'page_number': 'query',
                    'history_class': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_hearing_history_for_case_endpoint = _Endpoint(
            settings={
                'response_type': (HearingsHistories,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/hearingsHistory',
                'operation_id': 'get_hearing_history_for_case',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ],
                'required': [
                    'case_id',
                ],
                'nullable': [
                    'from_date',
                    'to_date',
                ],
                'enum': [
                ],
                'validation': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('from_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('to_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('page_number',): {

                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'from_date':
                        (str, none_type,),
                    'to_date':
                        (str, none_type,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'from_date': 'fromDate',
                    'to_date': 'toDate',
                    'page_number': 'pageNumber',
                },
                'location_map': {
                    'case_id': 'path',
                    'from_date': 'query',
                    'to_date': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_hearing_history_for_case_bylast_fetch_date_with_updates_endpoint = _Endpoint(
            settings={
                'response_type': (HearingsHistory,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/hearingsHistory/{lastFetchDateWithUpdates}',
                'operation_id': 'get_hearing_history_for_case_bylast_fetch_date_with_updates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ],
                'required': [
                    'case_id',
                    'last_fetch_date_with_updates',
                ],
                'nullable': [
                ],
                'enum': [
                    'history_class',
                ],
                'validation': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('last_fetch_date_with_updates',): {
                        'max_length': 25,
                        'min_length': 25,
                    },
                    ('page_number',): {

                    },
                    ('history_class',): {
                        'max_length': 7,
                        'min_length': 3,
                    },
                },
                'allowed_values': {
                    ('history_class',): {

                        "ALL": "all",
                        "ADDED": "added",
                        "CHANGED": "changed"
                    },
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'last_fetch_date_with_updates':
                        (str,),
                    'page_number':
                        (int,),
                    'history_class':
                        (str,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'last_fetch_date_with_updates': 'lastFetchDateWithUpdates',
                    'page_number': 'pageNumber',
                    'history_class': 'historyClass',
                },
                'location_map': {
                    'case_id': 'path',
                    'last_fetch_date_with_updates': 'path',
                    'page_number': 'query',
                    'history_class': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_judges_history_for_case_endpoint = _Endpoint(
            settings={
                'response_type': (JudgesHistories,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/judgesHistory',
                'operation_id': 'get_judges_history_for_case',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ],
                'required': [
                    'case_id',
                ],
                'nullable': [
                    'from_date',
                    'to_date',
                ],
                'enum': [
                ],
                'validation': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('from_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('to_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('page_number',): {

                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'from_date':
                        (str, none_type,),
                    'to_date':
                        (str, none_type,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'from_date': 'fromDate',
                    'to_date': 'toDate',
                    'page_number': 'pageNumber',
                },
                'location_map': {
                    'case_id': 'path',
                    'from_date': 'query',
                    'to_date': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_judges_history_for_case_bylast_fetch_date_with_updates_endpoint = _Endpoint(
            settings={
                'response_type': (JudgesHistory,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/judgesHistory/{lastFetchDateWithUpdates}',
                'operation_id': 'get_judges_history_for_case_bylast_fetch_date_with_updates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ],
                'required': [
                    'case_id',
                    'last_fetch_date_with_updates',
                ],
                'nullable': [
                ],
                'enum': [
                    'history_class',
                ],
                'validation': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('last_fetch_date_with_updates',): {
                        'max_length': 25,
                        'min_length': 25,
                    },
                    ('page_number',): {

                    },
                    ('history_class',): {
                        'max_length': 7,
                        'min_length': 3,
                    },
                },
                'allowed_values': {
                    ('history_class',): {

                        "ALL": "all",
                        "ADDED": "added",
                        "CHANGED": "changed"
                    },
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'last_fetch_date_with_updates':
                        (str,),
                    'page_number':
                        (int,),
                    'history_class':
                        (str,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'last_fetch_date_with_updates': 'lastFetchDateWithUpdates',
                    'page_number': 'pageNumber',
                    'history_class': 'historyClass',
                },
                'location_map': {
                    'case_id': 'path',
                    'last_fetch_date_with_updates': 'path',
                    'page_number': 'query',
                    'history_class': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_party_attorney_associations_history_for_case_endpoint = _Endpoint(
            settings={
                'response_type': (PartyAttorneyAssociationsHistories,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/partyAttorneyAssociationsHistory',
                'operation_id': 'get_party_attorney_associations_history_for_case',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ],
                'required': [
                    'case_id',
                ],
                'nullable': [
                    'from_date',
                    'to_date',
                ],
                'enum': [
                ],
                'validation': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('from_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('to_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('page_number',): {

                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'from_date':
                        (str, none_type,),
                    'to_date':
                        (str, none_type,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'from_date': 'fromDate',
                    'to_date': 'toDate',
                    'page_number': 'pageNumber',
                },
                'location_map': {
                    'case_id': 'path',
                    'from_date': 'query',
                    'to_date': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_party_attorney_associations_history_for_case_bylast_fetch_date_with_updates_endpoint = _Endpoint(
            settings={
                'response_type': (PartyAttorneyAssociationsHistory,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/partyAttorneyAssociationsHistory/{lastFetchDateWithUpdates}',
                'operation_id': 'get_party_attorney_associations_history_for_case_bylast_fetch_date_with_updates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ],
                'required': [
                    'case_id',
                    'last_fetch_date_with_updates',
                ],
                'nullable': [
                ],
                'enum': [
                    'history_class',
                ],
                'validation': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('last_fetch_date_with_updates',): {
                        'max_length': 25,
                        'min_length': 25,
                    },
                    ('page_number',): {

                    },
                    ('history_class',): {
                        'max_length': 7,
                        'min_length': 3,
                    },
                },
                'allowed_values': {
                    ('history_class',): {

                        "ALL": "all",
                        "ADDED": "added",
                        "CHANGED": "changed"
                    },
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'last_fetch_date_with_updates':
                        (str,),
                    'page_number':
                        (int,),
                    'history_class':
                        (str,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'last_fetch_date_with_updates': 'lastFetchDateWithUpdates',
                    'page_number': 'pageNumber',
                    'history_class': 'historyClass',
                },
                'location_map': {
                    'case_id': 'path',
                    'last_fetch_date_with_updates': 'path',
                    'page_number': 'query',
                    'history_class': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_related_case_history_for_case_endpoint = _Endpoint(
            settings={
                'response_type': (RelatedCasesHistories,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/relatedCasesHistory',
                'operation_id': 'get_related_case_history_for_case',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ],
                'required': [
                    'case_id',
                ],
                'nullable': [
                    'from_date',
                    'to_date',
                ],
                'enum': [
                ],
                'validation': [
                    'case_id',
                    'from_date',
                    'to_date',
                    'page_number',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('from_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('to_date',): {
                        'max_length': 10,
                        'min_length': 10,
                    },
                    ('page_number',): {

                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'from_date':
                        (str, none_type,),
                    'to_date':
                        (str, none_type,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'from_date': 'fromDate',
                    'to_date': 'toDate',
                    'page_number': 'pageNumber',
                },
                'location_map': {
                    'case_id': 'path',
                    'from_date': 'query',
                    'to_date': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_related_case_history_for_case_bylast_fetch_date_with_updates_endpoint = _Endpoint(
            settings={
                'response_type': (RelatedCasesHistory,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/caseHistory/{caseId}/relatedCasesHistory/{lastFetchDateWithUpdates}',
                'operation_id': 'get_related_case_history_for_case_bylast_fetch_date_with_updates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ],
                'required': [
                    'case_id',
                    'last_fetch_date_with_updates',
                ],
                'nullable': [
                ],
                'enum': [
                    'history_class',
                ],
                'validation': [
                    'case_id',
                    'last_fetch_date_with_updates',
                    'page_number',
                    'history_class',
                ]
            },
            root_map={
                'validations': {
                    ('case_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('last_fetch_date_with_updates',): {
                        'max_length': 25,
                        'min_length': 25,
                    },
                    ('page_number',): {

                    },
                    ('history_class',): {
                        'max_length': 7,
                        'min_length': 3,
                    },
                },
                'allowed_values': {
                    ('history_class',): {

                        "ALL": "all",
                        "ADDED": "added",
                        "CHANGED": "changed"
                    },
                },
                'openapi_types': {
                    'case_id':
                        (str,),
                    'last_fetch_date_with_updates':
                        (str,),
                    'page_number':
                        (int,),
                    'history_class':
                        (str,),
                },
                'attribute_map': {
                    'case_id': 'caseId',
                    'last_fetch_date_with_updates': 'lastFetchDateWithUpdates',
                    'page_number': 'pageNumber',
                    'history_class': 'historyClass',
                },
                'location_map': {
                    'case_id': 'path',
                    'last_fetch_date_with_updates': 'path',
                    'page_number': 'query',
                    'history_class': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_case_documents_history_for_case(
        self,
        case_id,
        **kwargs
    ):
        """(NOT AVAILABLE) History of CaseDocuments.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_case_documents_history_for_case(case_id, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 

        Keyword Args:
            from_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects from this date.. [optional]
            to_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects upto this date.. [optional]
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CaseDocumentsHistories
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        return self.get_case_documents_history_for_case_endpoint.call_with_http_info(**kwargs)

    def get_case_documents_history_for_case_bylast_fetch_date_with_updates(
        self,
        case_id,
        last_fetch_date_with_updates,
        **kwargs
    ):
        """(NOT AVAILABLE) History of CaseDocuments By Date.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_case_documents_history_for_case_bylast_fetch_date_with_updates(case_id, last_fetch_date_with_updates, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 
            last_fetch_date_with_updates (str): History for which date

        Keyword Args:
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            history_class (str): History of which class. [optional] if omitted the server will use the default value of "all"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CaseDocumentsHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        kwargs['last_fetch_date_with_updates'] = \
            last_fetch_date_with_updates
        return self.get_case_documents_history_for_case_bylast_fetch_date_with_updates_endpoint.call_with_http_info(**kwargs)

    def get_docket_entries_history_for_case(
        self,
        case_id,
        **kwargs
    ):
        """(NOT AVAILABLE) History of DocketEntries.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_docket_entries_history_for_case(case_id, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 

        Keyword Args:
            from_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects from this date.. [optional]
            to_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects upto this date.. [optional]
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DocketEntriesHistories
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        return self.get_docket_entries_history_for_case_endpoint.call_with_http_info(**kwargs)

    def get_docket_entries_history_for_case_bylast_fetch_date_with_updates(
        self,
        case_id,
        last_fetch_date_with_updates,
        **kwargs
    ):
        """(NOT AVAILABLE) History of DocketEntries By Date.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_docket_entries_history_for_case_bylast_fetch_date_with_updates(case_id, last_fetch_date_with_updates, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 
            last_fetch_date_with_updates (str): History for which date

        Keyword Args:
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            history_class (str): History of which class. [optional] if omitted the server will use the default value of "all"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DocketEntriesHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        kwargs['last_fetch_date_with_updates'] = \
            last_fetch_date_with_updates
        return self.get_docket_entries_history_for_case_bylast_fetch_date_with_updates_endpoint.call_with_http_info(**kwargs)

    def get_hearing_history_for_case(
        self,
        case_id,
        **kwargs
    ):
        """(NOT AVAILABLE) History of Hearings.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hearing_history_for_case(case_id, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 

        Keyword Args:
            from_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects from this date.. [optional]
            to_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects upto this date.. [optional]
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HearingsHistories
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        return self.get_hearing_history_for_case_endpoint.call_with_http_info(**kwargs)

    def get_hearing_history_for_case_bylast_fetch_date_with_updates(
        self,
        case_id,
        last_fetch_date_with_updates,
        **kwargs
    ):
        """(NOT AVAILABLE) History of Hearings By Date.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hearing_history_for_case_bylast_fetch_date_with_updates(case_id, last_fetch_date_with_updates, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 
            last_fetch_date_with_updates (str): History for which date

        Keyword Args:
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            history_class (str): History of which class. [optional] if omitted the server will use the default value of "all"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HearingsHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        kwargs['last_fetch_date_with_updates'] = \
            last_fetch_date_with_updates
        return self.get_hearing_history_for_case_bylast_fetch_date_with_updates_endpoint.call_with_http_info(**kwargs)

    def get_judges_history_for_case(
        self,
        case_id,
        **kwargs
    ):
        """(NOT AVAILABLE) History of Judges.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_judges_history_for_case(case_id, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 

        Keyword Args:
            from_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects from this date.. [optional]
            to_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects upto this date.. [optional]
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JudgesHistories
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        return self.get_judges_history_for_case_endpoint.call_with_http_info(**kwargs)

    def get_judges_history_for_case_bylast_fetch_date_with_updates(
        self,
        case_id,
        last_fetch_date_with_updates,
        **kwargs
    ):
        """(NOT AVAILABLE) History of Judges By Date.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_judges_history_for_case_bylast_fetch_date_with_updates(case_id, last_fetch_date_with_updates, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 
            last_fetch_date_with_updates (str): History for which date

        Keyword Args:
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            history_class (str): History of which class. [optional] if omitted the server will use the default value of "all"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JudgesHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        kwargs['last_fetch_date_with_updates'] = \
            last_fetch_date_with_updates
        return self.get_judges_history_for_case_bylast_fetch_date_with_updates_endpoint.call_with_http_info(**kwargs)

    def get_party_attorney_associations_history_for_case(
        self,
        case_id,
        **kwargs
    ):
        """(NOT AVAILABLE) History of PartyAttorneyAssociations.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_party_attorney_associations_history_for_case(case_id, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 

        Keyword Args:
            from_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects from this date.. [optional]
            to_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects upto this date.. [optional]
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PartyAttorneyAssociationsHistories
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        return self.get_party_attorney_associations_history_for_case_endpoint.call_with_http_info(**kwargs)

    def get_party_attorney_associations_history_for_case_bylast_fetch_date_with_updates(
        self,
        case_id,
        last_fetch_date_with_updates,
        **kwargs
    ):
        """(NOT AVAILABLE) History of PartyAttorneyAssociations By Date.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_party_attorney_associations_history_for_case_bylast_fetch_date_with_updates(case_id, last_fetch_date_with_updates, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 
            last_fetch_date_with_updates (str): History for which date

        Keyword Args:
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            history_class (str): History of which class. [optional] if omitted the server will use the default value of "all"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PartyAttorneyAssociationsHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        kwargs['last_fetch_date_with_updates'] = \
            last_fetch_date_with_updates
        return self.get_party_attorney_associations_history_for_case_bylast_fetch_date_with_updates_endpoint.call_with_http_info(**kwargs)

    def get_related_case_history_for_case(
        self,
        case_id,
        **kwargs
    ):
        """(NOT AVAILABLE) History of RelatedCases.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_related_case_history_for_case(case_id, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 

        Keyword Args:
            from_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects from this date.. [optional]
            to_date (str, none_type): If specified, The caseHistoryByDateArray will contain Case history objects upto this date.. [optional]
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RelatedCasesHistories
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        return self.get_related_case_history_for_case_endpoint.call_with_http_info(**kwargs)

    def get_related_case_history_for_case_bylast_fetch_date_with_updates(
        self,
        case_id,
        last_fetch_date_with_updates,
        **kwargs
    ):
        """(NOT AVAILABLE) History of RelatedCases By Date.  # noqa: E501

        The Case History API allows you to look up History of Case Parameters by caseId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_related_case_history_for_case_bylast_fetch_date_with_updates(case_id, last_fetch_date_with_updates, async_req=True)
        >>> result = thread.get()

        Args:
            case_id (str): Case ID.   - minimum: 18   - maximum: 18 
            last_fetch_date_with_updates (str): History for which date

        Keyword Args:
            page_number (int): Page number. [optional] if omitted the server will use the default value of 1
            history_class (str): History of which type. [optional] if omitted the server will use the default value of "all"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RelatedCasesHistory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['case_id'] = \
            case_id
        kwargs['last_fetch_date_with_updates'] = \
            last_fetch_date_with_updates
        return self.get_related_case_history_for_case_bylast_fetch_date_with_updates_endpoint.call_with_http_info(**kwargs)


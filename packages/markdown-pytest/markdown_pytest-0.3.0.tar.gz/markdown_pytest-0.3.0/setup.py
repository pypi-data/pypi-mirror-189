# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['markdown_pytest']
install_requires = \
['pytest-subtests>=0.9.0,<0.10.0']

entry_points = \
{'pytest11': ['markdown-pytest = markdown_pytest']}

setup_kwargs = {
    'name': 'markdown-pytest',
    'version': '0.3.0',
    'description': 'Pytest plugin for runs tests directly from Markdown files',
    'long_description': 'markdown-pytest\n===============\n\nThe `markdown-pytest` plugin is a `pytest` plugin that allows you to run tests\ndirectly from Markdown files.\n\nWith this plugin, you can write your tests inside Markdown files, making it\neasy to read, understand and maintain your documentation samples.\nThe tests are executed just like any other Pytest tests.\n\nSample of markdown file content:\n\n````markdown\n<!-- name: test_assert_true -->\n```python\nassert True\n```\n````\n\n<details>\n<summary>Will be shown as</summary>\n\n<!-- name: test_assert_true -->\n```python\nassert True\n```\n\n</details>\n\nRestrictions\n------------\n\nSince there is no way to add attributes to a block of code in markdown, this \nmodule only runs those tests that are marked with a special comment.\n\nThe general format of this comment is as follows: parts separated by semicolons\nare a colon separated key-value pairs, the last semicolon is optional,\nand parts not containing a colon bill be ignored.\n\nExample:\n\n```markdown\n<!-- key1: value1; key2: value2 -->\n```\n\nMultiline example:\n\n```markdown\n<!-- \n    key1: value1; \n    key2: value2;\n-->\n```\n\nThis comment should be placed right before the block of code, exactly upper \nthe backticks, for example: \n\n````\n<!-- name: test_name -->\n```python\n```\n````\n\nThe `name` key is required, and blocks that do not contain it will be ignored.\n\nSome Markdown parsers support two or three dashes around comments, this module \nsupports both variants. The `case` parameter is optional and might be used for\nsubtests, see "Code split" section.\n\nCommon parsing rules\n--------------------\n\nThis module uses its own, very simple Markdown parser, which only supports code \nblock parsing. In general, the parsing behavior of a file follows the following \nrules:\n\n* Code without `<!-- name: test_name -->` comment will not be executed.\n* Allowed two or three dashes in the comment symbols\n\n  For example following line will be parsed identically:\n\n  ````markdown\n  <!--  name: test_name -->\n  <!--- name: test_name --->\n  <!--  name: test_name --->\n  <!--- name: test_name -->\n  ````\n\n* Code blocks with same names will be merged in one code and executed once\n* The optional comment parameter `case` will execute the block as a subtest.\n* Indented code blocks will be shifted left.\n  \n  For example:\n\n  ````markdown\n      <!-- name: test_name -->\n      ```python\n      assert True\n      ```\n  ````\n\n  Is the same of:\n\n  ````markdown\n  <!-- name: test_name -->\n  ```python\n  assert True\n  ```\n  ````\n\nCode split\n----------\n\nYou can split a test into multiple blocks with the same test name:\n\nMarkdown:\n\n````markdown\nThis block performs import:\n\n<!-- name: test_example -->\n```python\nfrom itertools import chain\n```\n\n`chain` usage example:\n\n<!-- name: test_example -->\n```python\nassert list(chain(range(2), range(2))) == [0, 1, 0, 1]\n```\n````\n\n<details>\n<summary>Will be shown as</summary>\n\nThis block performs import:\n\n<!-- name: test_example -->\n```python\nfrom itertools import chain\n```\n\n`chain` usage example:\n\n<!-- name: test_example -->\n```python\nassert list(chain(range(2), range(2))) == [0, 1, 0, 1]\n```\n\n</details>\n\nsubtests support\n----------------\n\nOf course, you can break tests into subtests by simply adding `case: case_name` \nto the markdown comment.\n\n````markdown\n<!-- name: test_counter -->\n```python\nfrom collections import Counter\n```\n\n<!-- \n    name: test_counter;\n    case: initialize_counter\n-->\n```python\ncounter = Counter()\n```\n\n<!-- \n    name: test_counter;\n    case: assign_counter_value\n-->\n```python\ncounter["foo"] += 1\n\nassert counter["foo"] == 1\n```\n````\n\n<details>\n<summary>Will be shown as</summary>\n\n<!-- name: test_counter -->\n```python\nfrom collections import Counter\n```\n\n<!-- \n    name: test_counter;\n    case: initialize_counter\n-->\n```python\ncounter = Counter()\n```\n\n<!-- \n    name: test_counter;\n    case: assign_counter_value\n-->\n```python\ncounter["foo"] += 1\n\nassert counter["foo"] == 1\n```\n\n</details>\n\nFictional Code Examples\n-----------------------\n\nCode without `<!-- name: test_name -->` comment will not be executed.\n\n````markdown\n```python\nfrom universe import antigravity, WrongPlanet\n\ntry:\n    antigravity()\nexcept WrongPlanet:\n    print("You are on the wrong planet.")\n    exit(1)\n```\n````\n\n<details>\n<summary>Will be shown as</summary>\n\n```python\nfrom universe import antigravity, WrongPlanet\n\ntry:\n    antigravity()\nexcept WrongPlanet:\n    print("You are on the wrong planet.")\n    exit(1)\n```\n</details>\n\nUsage example\n-------------\n\nThis README.md file might be tested like this:\n\n```bash\n$ pytest -v README.md\n======================= test session starts =======================\nplugins: subtests, markdown-pytest\ncollected 3 items\n\nREADME.md::test_assert_true PASSED                           [ 33%]\nREADME.md::test_example PASSED                               [ 66%]\nREADME.md::test_counter SUBPASS                              [100%]\nREADME.md::test_counter SUBPASS                              [100%]\nREADME.md::test_counter PASSED                               [100%]\n```\n',
    'author': 'Dmitry Orlov',
    'author_email': 'me@mosquito.su',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/mosquito/markdown-pytest',
    'py_modules': modules,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)

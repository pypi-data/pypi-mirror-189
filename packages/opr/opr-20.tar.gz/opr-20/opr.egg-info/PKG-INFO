Metadata-Version: 2.1
Name: opr
Version: 20
Summary: object programming runtime
Home-page: http://github.com/operbot/opr
Author: Bart Thate
Author-email: operbot100@gmail.com
License: Public Domain
Description: README
        ######
        
        
        **NAME**
        
        | ``OPR - object programming runtime``
        |
        
        **SYNOPSIS**
        
        | ``opr [-c|-d|-h]``
        | ``opr <cmd> [key=value] [key==value]``
        |
        
        
        **DESCRIPTION**
        
        
        ``OPR`` is a runtime (program) that is intended to be programmable, with a
        client program to develop modules on and a daemonised version that can run
        in the background. ``OPR`` provides object persistence, an event handler and
        some basic code to load modules that can provide additional functionality.
        
        ``OPR`` uses object programming, the object oriented programming without the
        oriented ;] That is that method are seperated out into functions that use
        the object as the first argument of that funcion. This gives base class
        definitions a clean namespace to inherit from and to load json data into the
        object's __dict__. A clean namespace prevents a json loaded attribute to
        overwrite any methods.
        
        ``OPR`` provides a demo module dir showing how to use it for irc and rss
        functionality. This code is not part as ``OPR`` is intended to be used as a
        library. 
        
        
        **INSTALL**
        
        | ``pip3 install opr``
        |
        
        
        **PROGRAMMING**
        
        
        The ``opr`` package provides an Object class, that mimics a dict while using
        attribute access and provides a save/load to/from json files on disk.
        Objects can be searched with database functions and uses read-only files
        to improve persistence and a type in filename for reconstruction. Methods are
        factored out into functions to have a clean namespace to read JSON data into.
        
        basic usage is this::
        
         >>> from opr import Object
         >>> o = Object()
         >>> o.key = "value"
         >>> o.key
         >>> 'value'
        
        Objects try to mimic a dictionary while trying to be an object with normal
        attribute access as well. hidden methods are provided, the methods are
        factored out into functions like get, items, keys, register, set, update
        and values.
        
        load/save from/to disk::
        
         >>> from opr import Object, load, save
         >>> o = Object()
         >>> o.key = "value"
         >>> p = save(o)
         >>> obj = Object()
         >>> load(obj, p)
         >>> obj.key
         >>> 'value'
        
        great for giving objects peristence by having their state stored in files::
        
         >>> from opr import Object, save
         >>> o = Object()
         >>> save(o)
         opr.obj.Object/89efa5fd7ad9497b96fdcb5f01477320/2022-11-21/17:20:12.221192
        
        
        **AUTHOR**
        
        
        Bart Thate - operbot100@gmail.com
        
        
        **COPYRIGHT**
        
        
        ``opr`` is placed in the Public Domain.
        
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: License :: Public Domain
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Intended Audience :: System Administrators
Classifier: Topic :: Communications :: Chat :: Internet Relay Chat
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Description-Content-Type: text/x-rst

"""
    Copyright (c) 2022 Vishv Patel (https://github.com/itsthevp)

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
    the Software, and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

import csv

from typing import List

from source.cli import CLIUtils
from source.helpers import path_validate


class CSVUtils(CLIUtils):
    def add_arguments(self) -> None:
        super().add_arguments()
        self.parser.add_argument(
            "input",
            type=path_validate,
            metavar="file",
            help="Input CSV file's path",
        )
        self.parser.add_argument(
            "--encoding",
            dest="encoding",
            type=str,
            metavar="",
            default="utf-8",
            help="Specifies the encoding for input CSV file. Defaults to UTF-8.",
        )
        self.parser.add_argument(
            "--delimiter",
            dest="delimiter",
            type=str,
            metavar="",
            default=",",
            help="Column delimiter of input CSV file. Defaults to comma.",
        )
        self.parser.add_argument(
            "--quote-char",
            dest="quote_char",
            type=str,
            metavar="",
            default=None,
            help="Quote character which is used to enclose values in your CSV file.",
        )
        self.parser.add_argument(
            "--escape-char",
            dest="escape_char",
            type=str,
            metavar="",
            default=None,
            help="Escape character used to escape quote character (if exists in between of value).",
        )
        self.parser.add_argument(
            "--quoting",
            dest="quoting",
            type=(
                lambda v: eval(f"csv.QUOTE_{v.upper()}")
                if v
                and str(v).lower() in ("all", "minimal", "nonnumeric", "none")
                else None
            ),
            metavar="",
            default=None,
            help=(
                "Controls when quotes should be generated by the writer and recognized by the reader. "
                "possible values are (all, minimal, nonnumeric, none)"
            ),
        )
        self.parser.add_argument(
            "--double-quote",
            dest="double_quote",
            type=str,
            metavar="",
            default=False,
            help=(
                "Controls how instances of quotechar appearing inside a field should themselves be quoted."
                "When True, the character is doubled. When False, the escapechar is used as a prefix to the quotechar. It defaults to True."
            ),
        )

    def read_from_csv(self, file: str):
        return csv.reader(
            self.open_file(file, mode="r", newline=""),
            delimiter=self.args.delimiter,
            lineterminator="\n",
            skipinitialspace=True,
            quotechar=self.args.quote_char,
            escapechar=self.args.escape_char,
            doublequote=False,
            strict=True,
        )

    def write_to_csv(self, file: str):
        options = {
            "delimiter": self.args.delimiter,
            "lineterminator": "\n",
            "doublequote": False,
        }
        if self.args.quoting:
            options.update(
                {
                    "quotechar": self.args.quote_char,
                    "escapechar": self.args.escape_char,
                    "quoting": self.args.quoting,
                }
            )
        return csv.writer(
            self.open_file(file, mode="w", newline=""), **options
        )

    def get_next_row(self, reader) -> List[str]:
        return next(reader, [])

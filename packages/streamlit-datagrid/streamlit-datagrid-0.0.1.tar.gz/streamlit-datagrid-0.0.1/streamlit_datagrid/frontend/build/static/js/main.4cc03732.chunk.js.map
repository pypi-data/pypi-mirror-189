{"version":3,"sources":["StreamlitDatagrid.tsx","index.tsx"],"names":["getHeaders","headers","ArrowTable","n","rows","res","i","push","getCell","content","toString","getData","dataframe","customHeaders","data","columns","p","j","field","headerName","undefined","Date","params","value","toLocaleString","datum","correctedContent","getTime","console","log","length","StreamlitDatagrid","state","props","args","render","Box","sx","height","width","paddingLeft","DataGrid","rowHeight","loading","rowsPerPageOptions","disableSelectionOnClick","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"sRAmBMA,EAAa,SAACC,GAClB,GAAIA,aAAmBC,IAAY,CAGjC,IAFA,IAAMC,EAAIF,EAAQG,KACZC,EAAgB,GACbC,EAAI,EAAGA,EAAIH,EAAGG,IAErBD,EAAIE,KAAKN,EAAQO,QAAQF,EAAG,GAAGG,QAAQC,YAEzC,OAAOL,EAEP,OAAOJ,GAILU,EAAU,SAACC,EAAuBC,GACtC,IAAMC,EAAa,CAACC,QAAS,GAAIX,KAAM,IACjCD,EAAIS,EAAUR,KACdY,EAAIJ,EAAUG,QACdd,EAAoB,GAC1Ba,EAAKC,QAAQR,KAAK,CAAC,MAAS,KAAM,WAAc,KAAM,KAAQ,EAAG,UAAY,IAC7E,IAAK,IAAIU,EAAI,EAAGA,EAAID,EAAGC,IAAK,CAE1B,IAAMC,EAAQN,EAAUJ,QAAQ,EAAGS,GAAGR,QAAQC,WACxCS,EAAaN,EAAcI,EAAE,QAChBG,IAAfD,IACEP,EAAUJ,QAAQ,EAAES,GAAGR,mBAAmBY,KAC5CP,EAAKC,QAAQR,KAAK,CAChB,MAASW,EACT,WAAcC,EACd,KAAQ,EACR,UAAY,EACZ,eAAkB,SAAAG,GAAM,OAAI,IAAID,KAAW,OAANC,QAAM,IAANA,OAAM,EAANA,EAAQC,OAAOC,oBAGtDV,EAAKC,QAAQR,KAAK,CAAC,MAASW,EAAO,WAAcC,EAAY,KAAQ,EAAG,UAAY,KAGxFlB,EAAQM,KAAKW,GAEf,IAAK,IAAIZ,EAAI,EAAGA,EAAIH,EAAGG,IAAK,CAC1B,IAAMmB,EAAa,GACnBA,EAAU,GAAInB,EACd,IAAK,IAAIW,EAAI,EAAGA,EAAID,EAAGC,IAAK,CAC1B,IAAMR,EAAUG,EAAUJ,QAAQF,EAAGW,GAAGR,QACxC,GAAIA,aAAmBY,KAAM,CAC3B,IAAMK,EAAmB,IAAIL,KAAuB,IAAlBZ,EAAQkB,WAC1CF,EAAMxB,EAAQgB,EAAE,IAAMS,OAEtBD,EAAMxB,EAAQgB,EAAE,IAAMR,EAG1BmB,QAAQC,IAAIJ,EAAMxB,EAAQA,EAAQ6B,OAAS,KACG,IAA1CL,EAAMxB,EAAQA,EAAQ6B,OAAS,IAAI,IACrChB,EAAKV,KAAKG,KAAKkB,GAGnB,OAAOX,GAGHiB,EAAiB,iKAyBpB,OAzBoB,oCACdC,MAAQ,GAAE,EACTpB,UAAY,EAAKqB,MAAMC,KAAmB,aAAC,EAC3CjC,QAAUD,EAAW,EAAKiC,MAAMC,KAAc,SAAE,EAEjDC,OAAS,WACd,IAAMrB,EAAaH,EAAQ,EAAKC,UAAW,EAAKX,SAChD,OACI,kBAACmC,EAAA,EAAG,CACFC,GAAI,CACFC,OAAQ,EAAKL,MAAMC,KAAa,OAChCK,MAAO,OACPC,YAAa,IAGf,kBAACC,EAAA,EAAQ,CACPrC,KAAMU,EAAKV,KACXW,QAASD,EAAKC,QACd2B,UAAW,GACXC,QAA8B,IAArB7B,EAAKV,KAAK0B,OACnBc,mBAAoB,CAAC,KACrBC,yBAAuB,MAIhC,wBAzBoB,CAASC,KA4BjBC,cAAwBhB,GCtGvCiB,IAASb,OACP,kBAAC,IAAMc,WAAU,KACf,kBAAC,EAAW,OAEdC,SAASC,eAAe,W","file":"static/js/main.4cc03732.chunk.js","sourcesContent":["import {\n  ArrowTable,\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport {Box, Typography} from \"@mui/material\";\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\n\n\ninterface State {\n}\n\ninterface Data {\n  rows: object[]\n  columns: GridColDef[]\n}\n\nconst getHeaders = (headers: ArrowTable) => {\n  if (headers instanceof ArrowTable) {\n    const n = headers.rows\n    const res: string[] = []\n    for (let i = 1; i < n; i++) {\n      // @ts-ignore\n      res.push(headers.getCell(i, 1).content.toString())\n    }\n    return res\n  } else {\n    return headers\n  }\n}\n\nconst getData = (dataframe: ArrowTable, customHeaders: Array<string>) => {\n  const data: Data = {columns: [], rows: []}\n  const n = dataframe.rows\n  const p = dataframe.columns\n  const headers: string[] = []\n  data.columns.push({\"field\": \"id\", \"headerName\": \"ID\", \"flex\": 1, \"editable\": false})\n  for (let j = 1; j < p; j++) {\n    // @ts-ignore\n    const field = dataframe.getCell(0, j).content.toString()\n    const headerName = customHeaders[j-1]\n    if (headerName !== undefined) {\n      if (dataframe.getCell(1,j).content instanceof Date) {\n        data.columns.push({\n          \"field\": field,\n          \"headerName\": headerName,\n          \"flex\": 1,\n          \"editable\": false,\n          \"valueFormatter\": params => new Date(params?.value).toLocaleString()\n        })\n      } else {\n        data.columns.push({\"field\": field, \"headerName\": headerName, \"flex\": 1, \"editable\": false})\n      }\n    }\n    headers.push(field)\n  }\n  for (let i = 1; i < n; i++) {\n    const datum: any = {}\n    datum[\"id\"] = i\n    for (let j = 1; j < p; j++) {\n      const content = dataframe.getCell(i, j).content\n      if (content instanceof Date) {\n        const correctedContent = new Date(content.getTime()*1000000)\n        datum[headers[j-1]] = correctedContent\n      } else {\n        datum[headers[j-1]] = content\n      }\n    }\n    console.log(datum[headers[headers.length - 1]])\n    if (datum[headers[headers.length - 1]][0] === 1) {\n      data.rows.push(datum)\n    }\n  }\n  return data\n}\n\nclass StreamlitDatagrid extends StreamlitComponentBase<State> {\n  public state = {}\n  private dataframe = this.props.args[\"processed_df\"]\n  private headers = getHeaders(this.props.args[\"headers\"])\n\n  public render = (): ReactNode => {\n    const data: Data = getData(this.dataframe, this.headers)\n    return (\n        <Box\n          sx={{\n            height: this.props.args[\"height\"],\n            width: \"100%\",\n            paddingLeft: 2\n          }}\n        >\n          <DataGrid\n            rows={data.rows}\n            columns={data.columns}\n            rowHeight={50}\n            loading={data.rows.length === 0}\n            rowsPerPageOptions={[100]}\n            disableSelectionOnClick\n          />\n        </Box>\n    )\n  }\n}\n\nexport default withStreamlitConnection(StreamlitDatagrid)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./StreamlitDatagrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}
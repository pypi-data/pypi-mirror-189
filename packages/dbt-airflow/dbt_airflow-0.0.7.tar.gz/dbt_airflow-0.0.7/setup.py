# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['dbt_airflow', 'dbt_airflow.domain']

package_data = \
{'': ['*']}

install_requires = \
['apache-airflow>=2.0.0,<3', 'dbt-core>=1.2.0', 'pydantic>=1.10.4,<2.0.0']

setup_kwargs = {
    'name': 'dbt-airflow',
    'version': '0.0.7',
    'description': 'A Python package that creates fine-grained Airflow tasks for dbt',
    'long_description': '# dbt-airflow\nA Python package that creates fine-grained dbt tasks on Apache Airflow.\n\n## How does it work\nThe library essentially builds on top of the metadata generated by `dbt-core` and are stored in \nthe `target/manifest.json` file in your dbt project directory.  \n\n## Domain Requirements\n\n- Every dbt project, when compiled, will generate a metadata file under `<dbt-project-dir>/target/manifest.json`\n- The manifest file contains information about the interdependencies of the project\'s data models\n- `dbt-airflow` aims to extract these dependencies such that every dbt entity (snapshot, model, test and seed) has \n  its own task in a Airflow DAG while entity dependencies are persisted\n- Snapshots are never an upstream dependency of any task\n- The creation of snpashots on seeds does not make sense, and thus not handled \n  not even sure if this is even possible on dbt side)\n- Models may have tests\n- Snapshots may have tests\n- Seeds may have tests\n\n---\n\n# Installation\n\nThe package is available on PyPI and can be installed through `pip`:\n```bash\npip install dbt-airflow\n```\n\n`dbt` needs to connect to your target environment (database, warehouse etc.) and in order to do so, it makes use of \ndifferent adapters, each dedicated to a different technology (such as Postgres or BigQuery). Therefore, before running\n`dbt-airflow` you also need to ensure that the required adapter(s) are installed in your environment. \n\nFor the full list of available adapters please refer to the official \n[dbt documentation](https://docs.getdbt.com/docs/available-adapters). \n\n---\n\n# Usage\n`dbt-airflow` can be used either as a normal Python package, or through the \ncommand line interface. \n\nGiven that there are possibly many different ways for deploying Airflow and automating different aspects\nof data workflows that involve Airflow, dbt and potentially other tools as well, we wanted to offer more\nflexibility by providing different approaches for using `dbt-airflow`.\n\n### Building an Airflow DAG using `dbt-airflow`\n\n```python3\nfrom datetime import datetime\nfrom pathlib import Path\n\nfrom airflow import DAG\n\nfrom dbt_airflow.dag_builder import build_dag\n\n\nwith DAG(\n    dag_id=\'test_dag\',\n    start_date=datetime(2021, 1, 1),\n    catchup=False,\n    tags=[\'example\'],\n) as dag:\n\n    build_dag(\n        dbt_manifest_path=Path(\'path/to/dbt/project/target/manifest.json\'),\n        dbt_target=\'dev\',\n        dbt_project_path=Path(\'path/to/dbt/project\'),\n        dbt_profile_path=Path(\'path/to/dbt/profiles\'),\n    )\n```\n\n# Contributing\nIf you would like to contribute to `dbt-airflow` project, you will essentially need to follow the steps outlined below:\n1. Create a fork of the repository\n2. Set up the development environment on your local machine (see the detailed guide below)\n3. Write and test your contribution\n4. Create a Pull Request\n\n##  Setting up your local development environment\n\nTO BE FINALISED\n\n```bash\n# Install poetry\npip install poetry\n\n# Install dependencies in poetry venv\npoetry install \n\n# Run tests\npoetry run tests -rP -vv\n\n# Run specific test(s)\npoetry run tests -k "test_name_or_prefix" -rP -vv\n```\n',
    'author': 'Giorgos Myrianthous',
    'author_email': 'giorgos.myrianthous@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/gmyrianthous/dbt-airflow',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7.2,<4',
}


setup(**setup_kwargs)

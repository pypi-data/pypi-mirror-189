# generated by datamodel-codegen:
#   filename:  pdf_actions_parameters_v1.json

from __future__ import annotations

from typing import List, Optional

from pydantic import AnyUrl, BaseModel, Extra, Field, constr
from typing_extensions import Literal


class Asset(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    asset_uri: AnyUrl = Field(
        ..., description="URI identifying the asset to convert to PDF."
    )
    include: Optional[
        constr(regex=r"^([1-9 ]+[0-9 ]*-?[0-9 ]*)(,[1-9 ]+[0-9 ]*-?[0-9 ]*)*$")
    ] = Field(
        None,
        description="A description of the pages to be included. Page numbers are 1-based, comma seperated, and can include spaces (0x20, ignored) and a dash ('-', 0x2D) -- used to denote a range of pages. Note that individual pages may be included more than once -- but with limits.  Any given page range may not result in more than 5 times the number of pages in the source PDF.  If no range is specified, all pages are included: \"1-\".",
    )
    page_actions: Optional[List] = Field(
        None,
        description='An array of page manipulation operations. Currently only the "rotate" operation is supported.',
    )


class Params(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    compression_level: Optional[Literal["low", "medium", "high", "advanced"]] = Field(
        None,
        description="Specify the level of compression to reduce the file size of the pdf. Low compression level reduces resolution of the coloured and grayscale images above 250 dpi to 200 dpi. Medium compression level reduces resolution of the coloured and grayscale images above 200 dpi to 144 dpi. High compression level reduces resolution of the coloured and grayscale images above 100 dpi to 72 dpi. Advanced compression level uses JP2K with low quality level to compress color and gray images.",
    )


class Optimize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    linearize: Optional[bool] = Field(
        True, description="Specify whether to optimize the result for fast web viewing."
    )
    compress: Optional[bool] = Field(
        False,
        description="Reduce the file size of the pdf. Note that the compress action may not be combined with linearize, page_actions or page includes or other pdf_actions.",
    )
    params: Optional[Params] = Field(None, description="Params for optimizing the pdf.")


class RemovePasswordEncryption(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    password: constr(max_length=150) = Field(
        ...,
        description="Password for removing the security from the PDF document. Document with permission restrictions requires owner password and document with only viewing/opening restriction set requires a user password to remove the security.",
    )


class Ocr(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    lang: Optional[
        Literal[
            "da-DK",
            "lt-LT",
            "sl-SI",
            "el-GR",
            "ru-RU",
            "en-US",
            "zh-HK",
            "hu-HU",
            "et-EE",
            "pt-BR",
            "uk-UA",
            "nb-NO",
            "pl-PL",
            "lv-LV",
            "fi-FI",
            "ja-JP",
            "es-ES",
            "bg-BG",
            "en-GB",
            "cs-CZ",
            "mt-MT",
            "de-DE",
            "hr-HR",
            "sk-SK",
            "sr-SR",
            "ca-CA",
            "mk-MK",
            "ko-KR",
            "de-CH",
            "nl-NL",
            "zh-CN",
            "sv-SE",
            "it-IT",
            "no-NO",
            "tr-TR",
            "fr-FR",
            "ro-RO",
            "iw-IL",
        ]
    ] = Field("en-US", description="The input language to use for OCR")


class TaggedPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    format: Optional[
        Literal["fully_tagged_pdf", "well_tagged_pdf", "instance_data"]
    ] = Field(
        "fully_tagged_pdf",
        description='What format is the output.  \\"well_tagged_pdf \\" contains structure tags. \\"fully_tagged_pdf\\" contains additional information for dynamic viewing. \\"instance_data\\" contains machine learning output to allow clients to construct fully-taggged-pdf.',
    )
    client_version: Optional[str] = Field(
        None,
        description='Version(s) of components on the client in the format of \\"componentA=<version>,componentB=<version>, ...\\"',
    )
    compatibility_version: Optional[Literal["0.3", "latest"]] = Field(
        "latest", description="Deprecated version parameter."
    )
    qualified_at_client: Optional[bool] = Field(
        True,
        description="If the client has not qualified this file for conversion, run the qualifier to ensure the likelihood the pdf will successfully convert",
    )


class PdfAction(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    optimize: Optional[Optimize] = Field(None, description="Optimize this PDF")
    remove_password_encryption: Optional[RemovePasswordEncryption] = Field(
        None,
        description="Use a password to remove all the passwords as well as security and permissions from the PDF document. Note that the remove_password_encryption action may not be combined with page_actions or page includes or other pdf_actions.",
    )
    ocr: Optional[Ocr] = Field(
        None,
        description="Perform OCR on the PDF file.  Note that the ocr action may not be combined with page_actions or page includes or other pdf_actions.",
    )
    tagged_pdf: Optional[TaggedPdf] = Field(
        None,
        description="Convert a PDF to tagged PDF file.  Note that the tagged_pdf action may not be combined with page_actions or page includes or other pdf_actions.",
    )


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    assets: List[Asset] = Field(
        ...,
        description="Asset URIs and operations for the final document.  Note that this array may contain a maximum of 12 unique asset URIs. Specifically, the array may contain more than 12 entries, but may not reference more than 12 assets.",
        min_items=1,
    )
    pdf_actions: Optional[List[PdfAction]] = Field(
        None, description="A set of actions to apply to the output PDF.", min_items=1
    )
    name: constr(min_length=1) = Field(
        ...,
        description="Name of the new asset. Duplicate asset name behavior can be set by on_dup_policy.",
    )
    persistence: Optional[Literal["transient", "permanent"]] = Field(
        "transient",
        description='Asset storage aspect as short-term transient vs. long-term permanent. "transient" creates an asset that will be available for several hours before being garbage collected and deleted.  For operations that convert and download immediately, "transient" is the appropriate choice',
    )
    parent_uri: Optional[AnyUrl] = Field(
        None,
        description="The uri of folder to put the asset in.  This parameter is relevant only for permanent assets.  If not specified, the default depends on the operation.  Conversions will be placed in the same folder as the source asset.",
    )
    on_dup_name: Optional[Literal["error", "auto_rename", "overwrite"]] = Field(
        ["auto_rename"],
        description="How to handle a duplicate name conflict in target collection for output file.",
    )

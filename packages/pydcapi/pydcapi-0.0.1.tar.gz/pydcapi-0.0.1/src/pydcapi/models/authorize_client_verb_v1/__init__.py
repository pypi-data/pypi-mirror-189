# generated by datamodel-codegen:
#   filename:  authorize_client_verb_v1.json

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Extra, Field, constr
from typing_extensions import Literal


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    nonce: str = Field(..., description="128 bit random value")
    domain: Optional[
        constr(
            regex=r"(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]"
        )
    ] = Field(
        None,
        description="Domain of the client. Incase origin header is not present, domain from request body is picked. If domain is not available then error is thrown.",
    )
    intent: Literal["crop-pages"] = Field(
        ...,
        description="The client side verb for which the limits need to be checked and consumed limits if user is entitled to perform the operation.",
    )

# generated by scripts/generate.py

from __future__ import annotations

import re
from typing import TYPE_CHECKING, Union

from pydcapi import utils
from pydcapi.models import (
    asset_v1,
    copy_op_params_v1,
    copy_to_user_parameters_v1,
    move_op_params_v1,
    move_op_result_v1,
    multiple_move_op_result_v1,
    new_asset_job_v1,
)

if TYPE_CHECKING:
    from pydcapi import client as pydcapi_client


class Operations:
    def __init__(self, client: pydcapi_client.Client):
        self._client: pydcapi_client.Client = client

    def move(
        self,
        *,
        _data: move_op_params_v1.Model,
    ) -> Union[multiple_move_op_result_v1.Model, move_op_result_v1.Model]:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/operations/move",
            accept=utils.build_content_type(
                utils.content_type_from_model("move_op_result_v1"),
                utils.content_type_from_model("multiple_move_op_result_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/move_op_result_v1\.json", content_type):
            return move_op_result_v1.Model.parse_obj(resp.json())
        if re.search(r"schemas/multiple_move_op_result_v1\.json", content_type):
            return multiple_move_op_result_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def copy(
        self,
        *,
        _data: copy_op_params_v1.Model,
    ) -> new_asset_job_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/operations/copy",
            accept=utils.build_content_type(
                utils.content_type_from_model("new_asset_job_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def copy_to_user(
        self,
        *,
        _data: copy_to_user_parameters_v1.Model,
    ) -> asset_v1.Model:
        resp = self._client.request(
            method="POST",
            url="https://pdfnow.adobe.io/{expiry}/operations/copy_to_user",
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_v1\.json", content_type):
            return asset_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

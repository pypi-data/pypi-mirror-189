# generated by datamodel-codegen:
#   filename:  user_upsell_v1.json

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Extra, Field
from typing_extensions import Literal


class UpsellItem(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    entitlement_name: Literal[
        "can_send_to_individuals",
        "can_send_av",
        "create_pdf_conversions",
        "combine_pdf_conversions",
        "export_pdf_conversions",
        "export_pdf2ppt_conversions",
        "export_pdf2img_conversions",
        "acrobat_pro",
    ] = Field(..., description="Will match `entitlement` parameter if specified.")
    upsell_type: Literal["purchase", "upgrade"]
    url: str = Field(
        ...,
        description="URL which can be used by the client to invoke the upgrade or purchase workflow. Clients already running in the app may need to process the URL to navigate without reloading the app.",
    )
    subscription_name: Literal[
        "CreatePDF",
        "PDFPack",
        "ExportPDF",
        "Files",
        "DCGlobal",
        "DCEnterprise",
        "AcrobatPlus",
        "AcrobatStd",
        "SendNow",
        "FillAndSign",
        "ESign",
    ] = Field(..., description="Additional subscriptions may be added in the future.")
    upgrade_sku: str = Field(
        ...,
        description="The upgrade sku number for this user for the given entitlement. This field is an empty string when upsell_type is purchase.",
    )
    purchase_sku: str = Field(
        ...,
        description="The purchase sku number using which a user could get to the given entitlement. his field is available for both purchase and upgrade as there were use cases where upgrade was invoked with a purchase sku and clients need to translate from a purchase sku to an upgrade sku..",
    )
    billing_term: Literal["Monthly", "AnnualBilledMonthly", "AnnualBilledAnnually"]
    mandatory: bool = Field(
        ...,
        description="'true' if showing the upsell is mandatory and 'false' otherwise. For purchases, there are locations where showing multiple purchase options are mandatory. This flag will be true for those geos.",
    )
    sitecatalyst_plan_code: str = Field(
        ...,
        description='This is the string that will be sent to sitecatalyst with the purchase/upgrade event.<br/> -> Refer to the "In-app upgrades" section of the SiteCatalyst Instrumentation - Plan Info wiki to get the analytics name for upgrades<br/> -> Refer to the "<New Plan>" row in the "Anyware cart instrumentation" section of SiteCatalyst Instrumentation - Page Name and Custom Variables to get the analytics name for purchases.',
    )


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    upsell: List[UpsellItem]

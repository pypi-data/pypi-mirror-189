# generated by datamodel-codegen:
#   filename:  user_v1.json

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra, Field
from typing_extensions import Literal


class Identity(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    display_name: str = Field(..., description="The user's full name.")
    first_name: str = Field(..., description="A first name associated with this user.")
    last_name: str = Field(
        ..., description="A last name / family name associated with this user."
    )
    email: str = Field(..., description="Email address registered with this user.")
    user_uri: str = Field(..., description="The URI used to access this user.")
    user_id: str = Field(..., description="The id for this user.")
    mrkt_perm_email: bool = Field(
        ...,
        description="If true, the user has chosen to accept marketing material vie e-mail.",
    )
    language: str = Field(
        ..., description="The language chosen for communication with this user."
    )
    country_code: str = Field(..., description="The country associated with this user.")
    first_time: Dict[str, Any] = Field(
        ...,
        description="A map of first-time indicators. e.g. dex_web_app. In the case of dex_web_app, this value will be true if they have never visited cloud.acrobat.com.",
    )
    analytics_plan_code: str = Field(
        ..., description="An account description to include with analytics events."
    )
    category: Literal["adobeid", "enterprise", "federated", "business"] = Field(
        ...,
        description='An enum indicating the type of account. One of: "adobeid" (type 1), "enterprise" (type 2) or "federated" (type 3) or "business" (type 2e).',
    )


class LimitsAcrobat(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    acrobat_pro: bool = Field(
        ...,
        description="Indicates whether the user is entitled to download/install Acrobat Pro.",
    )
    acrobat_std: bool = Field(
        ...,
        description="Indicates whether the user is entitled to download/install Acrobat Standard.",
    )


class CreatePdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class CreatePdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class CombinePdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class CombinePdfDocuments(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class CombinePdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class OrganizePdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class OrganizePdfDocuments(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class OrganizePdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class ExportPdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class ExportPdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class OcrPdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class OcrPdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class PasswordEncryptOps(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class PasswordEncryptMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class OptimizePdfOps(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class OptimizePdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class EditPdfOps(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class EditPdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class SplitPdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class SplitPdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class SplitPdfMaxSplitPoints(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class LimitsConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    create_pdf_conversions: CreatePdfConversions = Field(
        ..., description="Number of documents that can be converted to PDF"
    )
    create_pdf_max_file_size: CreatePdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a file that can be converted by CreatePDF",
    )
    combine_pdf_conversions: CombinePdfConversions = Field(
        ..., description="Number of combine operations that user is allowed to do"
    )
    combine_pdf_documents: CombinePdfDocuments = Field(
        ...,
        description="Maximum number of files that may be combined in one CombinePDF operation",
    )
    combine_pdf_max_file_size: CombinePdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a file that can be accepted by CombinePDF",
    )
    organize_pdf_conversions: OrganizePdfConversions = Field(
        ..., description="Number of organize operations that user is allowed to do"
    )
    organize_pdf_documents: OrganizePdfDocuments = Field(
        ...,
        description="Maximum number of files that may be combined in one organize operation",
    )
    organize_pdf_max_file_size: OrganizePdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a file that can be accepted by organize",
    )
    export_pdf_conversions: ExportPdfConversions = Field(
        ..., description="Number of documents that can be exported from PDF"
    )
    export_pdf_max_file_size: ExportPdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a file that can be exported by ExportPDF",
    )
    ocr_pdf_conversions: OcrPdfConversions = Field(
        ...,
        description="Number of PDF documents that can have an OCR operation applied",
    )
    ocr_pdf_max_file_size: OcrPdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a PDF that can be accepted for OCR",
    )
    password_encrypt_ops: PasswordEncryptOps = Field(
        ..., description="Number of PDF documents that can be password encrypted"
    )
    password_encrypt_max_file_size: PasswordEncryptMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a PDF that can be accepted for password encryption",
    )
    optimize_pdf_ops: OptimizePdfOps = Field(
        ..., description="Number of PDF documents that can be optimized"
    )
    optimize_pdf_max_file_size: OptimizePdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a PDF that can be accepted for optimization",
    )
    edit_pdf_ops: EditPdfOps = Field(
        ..., description="Number of PDF documents that can be edited"
    )
    edit_pdf_max_file_size: EditPdfMaxFileSize = Field(
        ..., description="Maximum size (in kilobytes) of a PDF that can be edited"
    )
    split_pdf_conversions: SplitPdfConversions = Field(
        ..., description="Number of PDF documents that can be splitted"
    )
    split_pdf_max_file_size: SplitPdfMaxFileSize = Field(
        ..., description="Maximum size (in kilobytes) of a PDF that can be splitted"
    )
    split_pdf_max_split_points: SplitPdfMaxSplitPoints = Field(
        ...,
        description="Maximum number of split points in input PDF file that will be allowed in one SplitPDF operation",
    )


class QuotaDetails(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    next_available: Optional[int] = Field(
        None,
        description="tells in seconds when next transactions will become available. Value will be -1 if transactions are still remaining for the the user.",
    )
    frequency: Optional[int] = Field(
        None,
        description="the frequency at which quota refreshes. Value will be -1 when frequency is not applicable, like when user has unlimited transactions.",
    )


class Limits(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Uber(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits] = Field(
        None, description="specifies the applicable transactions details for the user."
    )


class Limits1(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )


class Createpdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits1] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits2(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class WordToPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits2] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits3(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class PptToPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits3] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits4(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class ExcelToPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits4] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits5(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class JpgToPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits5] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits6(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class OcrPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits6] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits7(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class HtmlToPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits7] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits8(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration7(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )
    max_number_files: Optional[int] = Field(
        None,
        description="Maximum number of files supported by the operation, if applicable",
    )


class OrganizePdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits8] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration7] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits9(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class ReorderPages(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits9] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration7] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits10(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class DeletePages(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits10] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration7] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits11(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class RotatePages(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits11] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration7] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits12(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class InsertPages(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits12] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration7] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits13(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class ExtractPages(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits13] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration7] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits14(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration13(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )


class ExportPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits14] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration13] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits15(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class PdfToImage(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits15] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration13] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits16(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class PdfToExcel(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits16] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration13] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits17(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class PdfToPpt(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits17] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration13] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits18(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class PdfToWord(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits18] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration13] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits19(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration18(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )
    max_number_files: Optional[int] = Field(
        None,
        description="Maximum number of files supported by the operation, if applicable",
    )


class CombinePdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits19] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration18] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits20(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration19(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )


class ProtectPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits20] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration19] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits21(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class CompressPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits21] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration19] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits22(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration21(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )
    max_split_points: Optional[int] = Field(
        None,
        description="Maximum number of split points supported by the operation, if applicable",
    )


class SplitPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits22] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration21] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits23(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration22(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )


class EditPdf(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits23] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration22] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits24(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Createpdf1(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits24] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration22] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits25(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class OcrPdf1(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits25] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration22] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits26(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class CompressPdf1(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits26] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration22] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits27(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration26(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )
    max_number_files: Optional[int] = Field(
        None,
        description="Maximum number of files supported by the operation, if applicable",
    )


class OrganizePdf1(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits27] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration26] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits28(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration27(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )


class ExportPdf1(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits28] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration27] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits29(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration28(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )
    max_number_files: Optional[int] = Field(
        None,
        description="Maximum number of files supported by the operation, if applicable",
    )


class CombinePdf1(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits29] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration28] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits30(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class Configuration29(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    max_file_size: Optional[int] = Field(
        None, description="Maximum file size supported by the operation, if applicable"
    )


class ProtectPdf1(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits30] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration29] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Limits31(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: Optional[int] = Field(
        None,
        description="tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.",
    )
    quota_details: Optional[QuotaDetails] = Field(
        None,
        description="Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.",
    )


class EditPdf1(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limits: Optional[Limits31] = Field(
        None, description="specifies the applicable transactions details for the user."
    )
    configuration: Optional[Configuration29] = Field(
        None,
        description="various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.",
    )


class Operations(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    createpdf: Optional[Createpdf1] = Field(
        None,
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    ocr_pdf: Optional[OcrPdf1] = Field(
        None,
        alias="ocr-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    compress_pdf: Optional[CompressPdf1] = Field(
        None,
        alias="compress-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    organize_pdf: Optional[OrganizePdf1] = Field(
        None,
        alias="organize-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    export_pdf: Optional[ExportPdf1] = Field(
        None,
        alias="export-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    combine_pdf: Optional[CombinePdf1] = Field(
        None,
        alias="combine-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    protect_pdf: Optional[ProtectPdf1] = Field(
        None,
        alias="protect-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    edit_pdf: Optional[EditPdf1] = Field(
        None,
        alias="edit-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )


class LimitsVerbs(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    uber: Uber = Field(
        ...,
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    createpdf: Createpdf = Field(
        ...,
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    word_to_pdf: WordToPdf = Field(
        ...,
        alias="word-to-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    ppt_to_pdf: PptToPdf = Field(
        ...,
        alias="ppt-to-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    excel_to_pdf: ExcelToPdf = Field(
        ...,
        alias="excel-to-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    jpg_to_pdf: JpgToPdf = Field(
        ...,
        alias="jpg-to-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    ocr_pdf: OcrPdf = Field(
        ...,
        alias="ocr-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    html_to_pdf: HtmlToPdf = Field(
        ...,
        alias="html-to-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    organize_pdf: OrganizePdf = Field(
        ...,
        alias="organize-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    reorder_pages: ReorderPages = Field(
        ...,
        alias="reorder-pages",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    delete_pages: DeletePages = Field(
        ...,
        alias="delete-pages",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    rotate_pages: RotatePages = Field(
        ...,
        alias="rotate-pages",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    insert_pages: InsertPages = Field(
        ...,
        alias="insert-pages",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    extract_pages: ExtractPages = Field(
        ...,
        alias="extract-pages",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    export_pdf: ExportPdf = Field(
        ...,
        alias="export-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    pdf_to_image: PdfToImage = Field(
        ...,
        alias="pdf-to-image",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    pdf_to_excel: PdfToExcel = Field(
        ...,
        alias="pdf-to-excel",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    pdf_to_ppt: PdfToPpt = Field(
        ...,
        alias="pdf-to-ppt",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    pdf_to_word: PdfToWord = Field(
        ...,
        alias="pdf-to-word",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    combine_pdf: CombinePdf = Field(
        ...,
        alias="combine-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    protect_pdf: ProtectPdf = Field(
        ...,
        alias="protect-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    compress_pdf: CompressPdf = Field(
        ...,
        alias="compress-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    split_pdf: SplitPdf = Field(
        ...,
        alias="split-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    edit_pdf: EditPdf = Field(
        ...,
        alias="edit-pdf",
        description="Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.",
    )
    operations: Operations = Field(
        ..., description="Operation level response for user, if applicable"
    )


class LimitsEsign(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    esign_access: Literal[
        "no_access", "read_only", "pro", "team", "enterprise", "global"
    ] = Field(
        ...,
        description=" * `no_access` - User does not have access to Echosign. This represents a new user to Echosign.\n* `read_only` - User can read his contracts but cannot use any paid functionality like sending contracts. This represents a user who had Echosign at some point but has cancelled his subscription or allowed it to expire.\n* `pro` - User has individual offering with no team management features.\n* `team` - (tentative, pending review) User is part of a team where an admin can do basic customizations like branding.\n* `enterprise` - User has extended team offering that enables creation of groups and allows the admin to configure an extensive list of settings per group.\n* `global` - User has the most advanced team offering and provides access to advanced services like customized workflows.",
    )


class FileFormats(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    mime_type: str
    analytic_type: str


class LimitsFillsign(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    file_formats: List[Dict[str, FileFormats]] = Field(
        ...,
        description="List of supported file types that can be used to create a form",
        min_items=1,
    )
    max_file_size: int = Field(
        ...,
        description="Maximum allowed file size in bytes that can be used to create a form",
    )
    max_num_of_fields: int = Field(
        ..., description="Maximum allowed number of fields per page"
    )
    max_num_of_pages: int = Field(
        ...,
        description="Maximum allowed number of pages in PDF that can be used to create a form",
    )


class LimitsPdfServices(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    access: bool = Field(
        ...,
        description="If false, then the user does not have access to any PDF services. If true, then the user has access to some set of PDF services. Use other limits APIs to confirm which specific services.  e.g. /limits/conversions",
    )


class ReviewCount(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class LimitsReview(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    review_count: ReviewCount = Field(
        ...,
        description="A value of -1 Indicates that the user has unlimited access. A value of 0 Indicates that the user has no access.",
    )


class LimitsSend(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    can_send_to_individuals: bool = Field(
        ...,
        description="Users who have purchased a subscription to the service can have custom e-mails sent to recipients. Free users can generate only a single public url that they can paste into an e-mail or post on discussion boards.<br/>If this limit is `false`, a parcel created that includes recipients other than the constant `PARCEL_PUBLIC_SHARING` will result in an error from the API request.",
    )
    can_send_av: bool = Field(
        ...,
        description="Users who have purchased a subscription to the service can send audio or video files to recipients.<br/>If this limit is false, a parcel created that includes audio or video files will fail with an error from the API request.",
    )
    can_custom_brand: bool = Field(
        ...,
        description="Users who have purchased a subscription to the service can add custom branding to the shared files recipients page.",
    )
    max_send_recipients: float = Field(
        ...,
        description="The maximum number of recipients that can be added to an individual parcel. This is based on the user's subscription and will initially be set to 10 for free users and 250 for paid users.",
    )
    max_daily_send: float = Field(
        ...,
        description="The maximum number of emails the user can send in a day through the Send & Track service. This is based on the user's subscription and will initially be set to 50 for free users and 2500 for paid users. This setting is intended to replace the can_send_to_individuals setting, which will eventually be removed.",
    )


class LimitsStorageDocumentCloud(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    storage_quota: float = Field(..., description="The user storage quota in GB.")
    storage_slop: float = Field(..., description="The user storage slop in GB.")
    storage_used: float = Field(
        ..., description="Storage charged against the user quota in GB."
    )
    storage_remaining: float = Field(
        ...,
        description="Space remaining in the user quota in GB (storage_quota - storage_used).",
    )


class StorageDocumentCloud(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    region: Optional[Literal["US", "EU", "AP"]] = Field(
        None,
        description="an enum indicating region for document cloud data storage. Currently, its value could be one of `US`, `EU`, or `AP`.",
    )
    encryption_key_status: Optional[Literal["enabled", "disabled"]] = Field(
        None,
        description="An enum indicating shared cloud encryption key status. The value could be either `enabled` or `disabled`.",
    )


class Subscription(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    name: Literal[
        "CreatePDF",
        "PDFPack",
        "ExportPDF",
        "Files",
        "DCGlobal",
        "DCEnterprise",
        "AcrobatPlus",
        "AcrobatStd",
        "SendNow",
        "FillAndSign",
        "ESign",
    ] = Field(..., description="The subscription name.")
    level: Literal["Free", "Basic", "Plus", "VIP"] = Field(
        ...,
        description="The service level.  All paid products have only a 'Basic' service level.",
    )
    status: Literal["Active", "Suspended", "Suspended30", "Closed", "Stopped"] = Field(
        ...,
        description="Account status.  Any status other than `Active` indicates that services are not available to this account.",
    )
    sub_ref: Optional[str] = Field(
        None,
        description="A UUID value that allows this product to be correlated to the Adobe store API values. This will be NULL for document cloud offerings sold to team (CCT) and enterprise (CCE) subscriptions as these users are entitled by an admin and do not have subscription record associated with them.",
    )
    biz_source: Optional[str] = Field(
        None, description="The business source associated with this product purchase."
    )
    billing_term: Optional[
        Literal["Monthly", "AnnualBilledMonthly", "AnnualBilledAnnually"]
    ] = Field(
        None,
        description="This value will not be available for document cloud offerings sold to team (CCT) and enterprise (CCE) subscriptions.",
    )
    subscription_params: Optional[Dict[str, Any]] = Field(
        None,
        description="Map of additional params present for this subscription, if any.",
    )


class Subscriptions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    subscriptions: List[Subscription] = Field(..., min_items=1)


class UpsellItem(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    entitlement_name: Literal[
        "can_send_to_individuals",
        "can_send_av",
        "create_pdf_conversions",
        "combine_pdf_conversions",
        "export_pdf_conversions",
        "export_pdf2ppt_conversions",
        "export_pdf2img_conversions",
        "acrobat_pro",
    ] = Field(..., description="Will match `entitlement` parameter if specified.")
    upsell_type: Literal["purchase", "upgrade"]
    url: str = Field(
        ...,
        description="URL which can be used by the client to invoke the upgrade or purchase workflow. Clients already running in the app may need to process the URL to navigate without reloading the app.",
    )
    subscription_name: Literal[
        "CreatePDF",
        "PDFPack",
        "ExportPDF",
        "Files",
        "DCGlobal",
        "DCEnterprise",
        "AcrobatPlus",
        "AcrobatStd",
        "SendNow",
        "FillAndSign",
        "ESign",
    ] = Field(..., description="Additional subscriptions may be added in the future.")
    upgrade_sku: str = Field(
        ...,
        description="The upgrade sku number for this user for the given entitlement. This field is an empty string when upsell_type is purchase.",
    )
    purchase_sku: str = Field(
        ...,
        description="The purchase sku number using which a user could get to the given entitlement. his field is available for both purchase and upgrade as there were use cases where upgrade was invoked with a purchase sku and clients need to translate from a purchase sku to an upgrade sku..",
    )
    billing_term: Literal["Monthly", "AnnualBilledMonthly", "AnnualBilledAnnually"]
    mandatory: bool = Field(
        ...,
        description="'true' if showing the upsell is mandatory and 'false' otherwise. For purchases, there are locations where showing multiple purchase options are mandatory. This flag will be true for those geos.",
    )
    sitecatalyst_plan_code: str = Field(
        ...,
        description='This is the string that will be sent to sitecatalyst with the purchase/upgrade event.<br/> -> Refer to the "In-app upgrades" section of the SiteCatalyst Instrumentation - Plan Info wiki to get the analytics name for upgrades<br/> -> Refer to the "<New Plan>" row in the "Anyware cart instrumentation" section of SiteCatalyst Instrumentation - Page Name and Custom Variables to get the analytics name for purchases.',
    )


class Upsell(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    upsell: List[UpsellItem]


class Fte(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    launch_count: Optional[float] = 0
    welcome_dialog_dismissed: Optional[bool] = False


class PrefsDcweb(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    fte: Optional[Fte] = Field(None, description="First Time Experience Tracking")


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    cohorts: Optional[Dict[str, str]] = Field(
        None,
        description="A json object with key-value pairs corresponding to cohorts and their values assigned to the current user for all the currently active experiments.",
    )
    identity: Optional[Identity] = None
    limits_acrobat: Optional[LimitsAcrobat] = Field(None, alias="limits/acrobat")
    limits_conversions: Optional[LimitsConversions] = Field(
        None, alias="limits/conversions"
    )
    limits_verbs: Optional[LimitsVerbs] = Field(None, alias="limits/verbs")
    limits_esign: Optional[LimitsEsign] = Field(None, alias="limits/esign")
    limits_fillsign: Optional[LimitsFillsign] = Field(None, alias="limits/fillsign")
    limits_pdf_services: Optional[LimitsPdfServices] = Field(
        None, alias="limits/pdf_services"
    )
    limits_review: Optional[LimitsReview] = Field(None, alias="limits/review")
    limits_send: Optional[LimitsSend] = Field(None, alias="limits/send")
    limits_storage_document_cloud: Optional[LimitsStorageDocumentCloud] = Field(
        None, alias="limits/storage_document_cloud"
    )
    storage_document_cloud: Optional[StorageDocumentCloud] = Field(
        None, alias="storage/document_cloud"
    )
    subscriptions: Optional[Subscriptions] = None
    upsell: Optional[Upsell] = None
    prefs_dcweb: Optional[PrefsDcweb] = Field(
        None, alias="prefs/dcweb", description="DC Web common preferences"
    )

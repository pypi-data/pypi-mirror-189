# generated by datamodel-codegen:
#   filename:  asset_tag_sensei_v1.json

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra, Field


class CoordListItem(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    x: Optional[float] = None
    y: Optional[float] = None


class Polygon(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    coordList: Optional[List[CoordListItem]] = None


class Location(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    polygon: Optional[Polygon] = None


class ClassificationEntry(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    field_comment: Optional[str] = Field(None, alias="_comment")
    class_label: Optional[str] = None
    score: Optional[float] = None


class ClassificationItem(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    classification_entries: Optional[List[ClassificationEntry]] = None


class MetaInfo(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    page_number: Optional[float] = None
    type: Optional[str] = None


class ResponseItem(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    field_comment: Optional[str] = Field(None, alias="_comment", description="")
    location: Optional[Location] = None
    classification: Optional[List[ClassificationItem]] = None
    meta_info: Optional[MetaInfo] = None


class Result(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    response_type: Optional[str] = Field(None, description="ANNOTATION")
    response: Optional[List[ResponseItem]] = None


class CasResponse(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    status: Optional[int] = Field(None, description="Status code for the response")
    analyzer_id: Optional[str] = Field(
        None, description="Unique service ID, also known as Analyzer ID"
    )
    result: Optional[Result] = None


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    status: Optional[int] = Field(None, description="HTTP response status code")
    content_id: Optional[str] = Field(
        None,
        description="A string that identifies the request; if the request included the content_id field, the response will have that value as well.  Otherwise, it will be the URL or file name of the input image",
    )
    cas_responses: Optional[List[CasResponse]] = None
    error: Optional[List[Dict[str, Any]]] = None

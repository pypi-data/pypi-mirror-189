# generated by datamodel-codegen:
#   filename:  upload_status_v1.json

from __future__ import annotations

from typing import Optional

from pydantic import AnyUrl, BaseModel, Extra, Field
from typing_extensions import Literal


class AssetResult(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    asset_uri: AnyUrl = Field(..., description="Url to access the asset.")
    asset_id: str = Field(..., description="Id of the asset.")
    etag: str = Field(..., description="ETag of the created/updated asset.")
    content_md5: str = Field(..., description="Content-md5 hash of the file uploaded.")


class MonitorLink(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    uri: str = Field(..., description="Monitor link for getting the upload status.")


class Error(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    status: float = Field(
        ...,
        description='The http status code. List of error codes include 403 for "Unsuccessful virus scan (infected file)" or "QuotaExceeded", 412 for "Precondition failed". or other such error codes. ',
    )
    code: str = Field(
        ...,
        description="An English language string that contains more information about the error. This is not intended as information to be presented to an end user, but will instead be helpful for logging and debugging.",
    )
    message: str = Field(
        ..., description="Message describing the reason for the failure."
    )


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    asset_result: Optional[AssetResult] = Field(
        None,
        description="Asset details. Returned only if status is done. If the status is 'done', this will contain the details of the new asset.",
    )
    monitor_link: Optional[MonitorLink] = Field(
        None,
        description="If the upload status is 'in progress', use this link to poll for status. Note that this method should be called only after the interval specified in retry_interval.",
    )
    retry_interval: Optional[float] = Field(
        None,
        description="If the status is 'in progress' this specifies the number of milliseconds to wait before re-querying the monitor/upload status.",
    )
    status: Literal["done", "in progress", "failed"] = Field(
        ..., description="Current status of the upload."
    )
    error: Optional[Error] = Field(
        None,
        description="If the status is 'FAILED', this will contain the error details.",
    )

# generated by datamodel-codegen:
#   filename:  createpdf_parameters_v1.json

from __future__ import annotations

from typing import Optional

from pydantic import AnyUrl, BaseModel, Extra, Field, constr
from typing_extensions import Literal


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    asset_uri: AnyUrl = Field(
        ..., description="URI identifying the Asset to convert to PDF"
    )
    name: constr(min_length=1) = Field(
        ...,
        description="Name of the new asset. Duplicate asset name behavior can be set by on_dup_policy.",
    )
    do_ocr: Optional[bool] = Field(
        False,
        description="Whether OCR processing is performed on the input file or not. This setting is applicable only when converting image formats to PDF.",
    )
    ocr_lang: Optional[
        Literal[
            "da-DK",
            "lt-LT",
            "sl-SI",
            "el-GR",
            "ru-RU",
            "en-US",
            "zh-HK",
            "hu-HU",
            "et-EE",
            "pt-BR",
            "uk-UA",
            "nb-NO",
            "pl-PL",
            "lv-LV",
            "fi-FI",
            "ja-JP",
            "es-ES",
            "bg-BG",
            "en-GB",
            "cs-CZ",
            "mt-MT",
            "de-DE",
            "hr-HR",
            "sk-SK",
            "sr-SR",
            "ca-CA",
            "mk-MK",
            "ko-KR",
            "de-CH",
            "nl-NL",
            "zh-CN",
            "sv-SE",
            "it-IT",
            "no-NO",
            "tr-TR",
            "fr-FR",
            "ro-RO",
            "iw-IL",
        ]
    ] = Field(
        "en-US",
        description="Locale to use for optical character recognition (when `do_ocr` is true).",
    )
    ocr_type: Optional[
        Literal[
            "searchable_image", "editable_text_and_images", "searchable_image_exact"
        ]
    ] = Field(
        "searchable_image",
        description="OCR option to use for optical character recognition (when do_ocr is true).",
    )
    on_dup_name: Optional[Literal["error", "auto_rename", "overwrite"]] = Field(
        ["auto_rename"],
        description="How to handle a duplicate name conflict in target collection for output file.",
    )
    persistence: Optional[Literal["transient", "permanent"]] = Field(
        "transient",
        description='Asset storage aspect as short-term transient vs. long-term permanent. "transient" creates an asset that will be available for several hours before being garbage collected and deleted.  For operations that convert and download immediately, "transient" is the appropriate choice',
    )
    parent_uri: Optional[AnyUrl] = Field(
        None,
        description="The uri of folder to put the asset in.  This parameter is relevant only for permanent assets.  If not specified, the default depends on the operation.  Conversions will be placed in the same folder as the source asset.",
    )
    tagged_pdf_format: Optional[Literal["fully_tagged_pdf", "well_tagged_pdf"]] = Field(
        "well_tagged_pdf",
        description="If specified, apply the selected type of PDF tagging. This setting applies only when converting Microsoft Word files to PDF.",
    )
    markup: Optional[bool] = Field(
        False,
        description="If specified, include comments and review markup from the source document in the PDF result. This setting only applies when converting Microsoft Word files with inline comments and markup to PDF.",
    )

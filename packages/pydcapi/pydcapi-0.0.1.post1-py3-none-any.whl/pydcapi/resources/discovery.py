# generated by scripts/generate.py

from __future__ import annotations

import re
from typing import TYPE_CHECKING

from pydcapi import utils
from pydcapi.models import (
    createpdf_options_v1,
    discovery_v1,
    exportpdf_options_v1,
    services_v1,
    source_options_v1,
)

if TYPE_CHECKING:
    from pydcapi import client as pydcapi_client


class Discovery:
    def __init__(self, client: pydcapi_client.Client):
        self._client: pydcapi_client.Client = client

    def discover(
        self,
    ) -> discovery_v1.Model:
        resp = self._client.request(
            method="GET",
            url="{+base_url}/discovery",
            accept=utils.build_content_type(
                utils.content_type_from_model("discovery_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/discovery_v1\.json", content_type):
            return discovery_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def createpdf_options(
        self,
    ) -> createpdf_options_v1.Model:
        resp = self._client.request(
            method="GET",
            url="{+base_url}/{expiry}/discovery/resources/assets/createpdf/options",
            accept=utils.build_content_type(
                utils.content_type_from_model("createpdf_options_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/createpdf_options_v1\.json", content_type):
            return createpdf_options_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_services(
        self,
    ) -> services_v1.Model:
        resp = self._client.request(
            method="GET",
            url="{+base_url}/{expiry}/discovery/services",
            accept=utils.build_content_type(
                utils.content_type_from_model("services_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/services_v1\.json", content_type):
            return services_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def exportpdf_options(
        self,
    ) -> exportpdf_options_v1.Model:
        resp = self._client.request(
            method="GET",
            url="{+base_url}/{expiry}/discovery/resources/assets/exportpdf/options",
            accept=utils.build_content_type(
                utils.content_type_from_model("exportpdf_options_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/exportpdf_options_v1\.json", content_type):
            return exportpdf_options_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def source_options(
        self,
    ) -> source_options_v1.Model:
        resp = self._client.request(
            method="GET",
            url="{+base_url}/{expiry}/discovery/resources/assets/source/options",
            accept=utils.build_content_type(
                utils.content_type_from_model("source_options_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/source_options_v1\.json", content_type):
            return source_options_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

# generated by scripts/generate.py

from __future__ import annotations

import re
from typing import TYPE_CHECKING

import uritemplate
from typing_extensions import Literal

from pydcapi import utils
from pydcapi.models import (
    connector_delete_response_v1,
    connector_info_v1,
    connector_link_parameters_v1,
    connector_listing_v1,
)

if TYPE_CHECKING:
    from pydcapi import client as pydcapi_client


class Connector:
    def __init__(self, client: pydcapi_client.Client):
        self._client: pydcapi_client.Client = client

    def list(
        self,
        *,
        cloud_id: Literal["msft", "gdrive", "box", "dropbox"],
    ) -> connector_listing_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+base_url}/{expiry}/{cloud_id}/connector/list",
                {
                    "cloud_id": cloud_id,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("connector_listing_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/connector_listing_v1\.json", content_type):
            return connector_listing_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def link(
        self,
        *,
        _data: connector_link_parameters_v1.Model,
        cloud_id: Literal["msft", "gdrive", "box", "dropbox"],
    ) -> connector_info_v1.Model:
        resp = self._client.request(
            method="POST",
            url=uritemplate.partial(
                "{+base_url}/{expiry}/{cloud_id}/connector/link",
                {
                    "cloud_id": cloud_id,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("connector_info_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/connector_info_v1\.json", content_type):
            return connector_info_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def delete(
        self,
        *,
        cloud_id: Literal["msft", "gdrive", "box", "dropbox"],
        connector_id: str,
    ) -> connector_delete_response_v1.Model:
        resp = self._client.request(
            method="DELETE",
            url=uritemplate.partial(
                "{+base_url}/{expiry}/{cloud_id}/connector/{connector_id}",
                {
                    "cloud_id": cloud_id,
                    "connector_id": connector_id,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("connector_delete_response_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/connector_delete_response_v1\.json", content_type):
            return connector_delete_response_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

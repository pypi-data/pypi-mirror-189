# generated by scripts/generate.py

from __future__ import annotations

import re
from typing import IO, TYPE_CHECKING, Any, Union

import uritemplate
from typing_extensions import Literal

from pydcapi import utils
from pydcapi.models import (
    asset_block_upload_extend_parameters_v1,
    asset_block_upload_extend_v1,
    asset_block_upload_finalize_parameters_v1,
    asset_block_upload_finalize_v1,
    asset_block_upload_initialize_parameters_v1,
    asset_block_upload_initialize_v1,
    asset_document_rendition_status_v1,
    asset_export_v1,
    asset_import_v1,
    asset_metadata_basic_v1,
    asset_metadata_field_patch_v1,
    asset_metadata_field_v1,
    asset_tag_sensei_v1,
    asset_uri_download_v1,
    asset_uri_rendition_v1,
    asset_v1,
    authorize_client_verb_v1,
    createpdf_from_html_parameters_v1,
    createpdf_parameters_v1,
    exportpdf_parameters_v1,
    new_asset_job_v1,
    pdf_actions_parameters_v1,
    splitpdf_parameters_v1,
    upload_status_v1,
    zip_download_params_v1,
    zip_download_uri_v1,
)

if TYPE_CHECKING:
    from pydcapi import client as pydcapi_client


class Assets:
    def __init__(self, client: pydcapi_client.Client):
        self._client: pydcapi_client.Client = client

    def tag(
        self,
        *,
        _pdf: bytes,
        client_version: str,
        async_: bool = True,
        format: Literal["instance_data", "fully_tagged_pdf"] = "instance_data",
        qualify: bool = True,
    ) -> Union[bytes]:
        resp = self._client.request(
            method="POST",
            url=uritemplate.partial(
                "https://taggedpdf.adobe.io/{expiry}/assets?operation=tag{&format,async,qualify,client_version}",
                {
                    "client_version": client_version,
                    "async": async_,
                    "format": format,
                    "qualify": qualify,
                },
            ).uri,
            accept=utils.build_content_type(
                "application/zip",
                "application/pdf",
            ),
            content=_pdf,
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"application/zip", content_type):
            return resp.content
        if re.search(r"application/pdf", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def upload(
        self,
        *,
        _file: Union[IO[bytes], bytes, str],
    ) -> asset_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/assets",
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_v1"),
            ),
            file=_file,
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_v1\.json", content_type):
            return asset_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def update(
        self,
        *,
        _file: Union[IO[bytes], bytes, str],
        asset_uri: str,
    ) -> None:
        self._client.request(
            method="PUT",
            url=uritemplate.partial(
                "{+base_url}/{expiry}/assets{?asset_uri}",
                {
                    "asset_uri": asset_uri,
                },
            ).uri,
            file=_file,
        )

    def import_(
        self,
        *,
        _data: asset_import_v1.Model,
    ) -> new_asset_job_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/assets?operation=import",
            accept=utils.build_content_type(
                utils.content_type_from_model("new_asset_job_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def export(
        self,
        *,
        _data: asset_export_v1.Model,
        export_uri: str,
    ) -> new_asset_job_v1.Model:
        resp = self._client.request(
            method="POST",
            url=uritemplate.partial(
                "{+export_uri}",
                {
                    "export_uri": export_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("new_asset_job_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def exportpdf(
        self,
        *,
        _data: exportpdf_parameters_v1.Model,
    ) -> new_asset_job_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/assets?operation=exportpdf",
            accept=utils.build_content_type(
                utils.content_type_from_model("new_asset_job_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def createpdf(
        self,
        *,
        _data: createpdf_parameters_v1.Model,
    ) -> new_asset_job_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/assets?operation=createpdf",
            accept=utils.build_content_type(
                utils.content_type_from_model("new_asset_job_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def pdf_actions(
        self,
        *,
        _data: pdf_actions_parameters_v1.Model,
    ) -> new_asset_job_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/assets?operation=pdf_actions",
            accept=utils.build_content_type(
                utils.content_type_from_model("new_asset_job_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def createpdf_from_html(
        self,
        *,
        _data: createpdf_from_html_parameters_v1.Model,
    ) -> new_asset_job_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/assets?operation=createpdf_from_html",
            accept=utils.build_content_type(
                utils.content_type_from_model("new_asset_job_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def splitpdf(
        self,
        *,
        _data: splitpdf_parameters_v1.Model,
    ) -> new_asset_job_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/assets?operation=splitpdf",
            accept=utils.build_content_type(
                utils.content_type_from_model("new_asset_job_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def authorize_client_verb(
        self,
        *,
        _data: authorize_client_verb_v1.Model,
    ) -> Any:
        resp = self._client.request(
            method="PUT",
            url="{+base_url}/{expiry}/assets/authorize/client/verb",
            accept=utils.build_content_type(
                "application/json",
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"application/json", content_type):
            return resp.json()
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def delete(
        self,
        *,
        asset_uri: str,
    ) -> None:
        self._client.request(
            method="DELETE",
            url=uritemplate.partial(
                "{+asset_uri}",
                {
                    "asset_uri": asset_uri,
                },
            ).uri,
        )

    def download_uri(
        self,
        *,
        asset_uri: str,
        make_ticket: bool = True,
        make_direct_storage_uri: bool = True,
    ) -> asset_uri_download_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+asset_uri}/uri/download{?make_ticket,make_direct_storage_uri}",
                {
                    "asset_uri": asset_uri,
                    "make_ticket": make_ticket,
                    "make_direct_storage_uri": make_direct_storage_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_uri_download_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_uri_download_v1\.json", content_type):
            return asset_uri_download_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def download(
        self,
        *,
        asset_download_uri: str,
    ) -> bytes:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+asset_download_uri}",
                {
                    "asset_download_uri": asset_download_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                "*/*",
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r".*", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def zip_download_uri(
        self,
        *,
        _data: zip_download_params_v1.Model,
    ) -> zip_download_uri_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/assets/zip/uri/download",
            accept=utils.build_content_type(
                utils.content_type_from_model("zip_download_uri_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/zip_download_uri_v1\.json", content_type):
            return zip_download_uri_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def zip_download(
        self,
        *,
        zip_download_uri: str,
    ) -> bytes:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+zip_download_uri}",
                {
                    "zip_download_uri": zip_download_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                "application/zip",
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"application/zip", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def rendition_uri(
        self,
        *,
        asset_uri: str,
        make_ticket: bool = True,
        type: Literal["paged", "document"] = "paged",
    ) -> asset_uri_rendition_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+asset_uri}/uri/rendition{?make_ticket,type}",
                {
                    "asset_uri": asset_uri,
                    "make_ticket": make_ticket,
                    "type": type,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_uri_rendition_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_uri_rendition_v1\.json", content_type):
            return asset_uri_rendition_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def rendition(
        self,
        *,
        format: Literal["png", "jpg"],
        rendition_class: str,
        size: str,
        asset_rendition_uri: str,
        download: bool = True,
        markup: bool = True,
        page: int = 0,
        processing_hint: Literal[
            "speed_over_quality", "quality_over_speed"
        ] = "speed_over_quality",
        wait: int = 10,
    ) -> Union[bytes]:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+asset_rendition_uri}{&format,size,wait,page,markup,processing_hint,download,rendition_class}",
                {
                    "format": format,
                    "rendition_class": rendition_class,
                    "size": size,
                    "asset_rendition_uri": asset_rendition_uri,
                    "download": download,
                    "markup": markup,
                    "page": page,
                    "processing_hint": processing_hint,
                    "wait": wait,
                },
            ).uri,
            accept=utils.build_content_type(
                "image/png",
                "image/jpeg",
                "image/*",
                "*/*",
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"image/png", content_type):
            return resp.content
        if re.search(r"image/jpeg", content_type):
            return resp.content
        if re.search(r"image/.+", content_type):
            return resp.content
        if re.search(r".*", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def rendition_direct(
        self,
        *,
        asset_id: str,
        format: Literal["png", "jpg"],
        rendition_class: str,
        size: str,
        download: bool = True,
        markup: bool = True,
        page: int = 0,
        processing_hint: Literal[
            "speed_over_quality", "quality_over_speed"
        ] = "speed_over_quality",
        wait: int = 10,
    ) -> Union[bytes]:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "https://dc-api.adobecontent.io/{expiry}/assets/download/{+asset_id}/rendition{?format,size,wait,page,markup,processing_hint,download,rendition_class}",
                {
                    "asset_id": asset_id,
                    "format": format,
                    "rendition_class": rendition_class,
                    "size": size,
                    "download": download,
                    "markup": markup,
                    "page": page,
                    "processing_hint": processing_hint,
                    "wait": wait,
                },
            ).uri,
            accept=utils.build_content_type(
                "image/png",
                "image/jpeg",
                "image/*",
                "*/*",
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"image/png", content_type):
            return resp.content
        if re.search(r"image/jpeg", content_type):
            return resp.content
        if re.search(r"image/.+", content_type):
            return resp.content
        if re.search(r".*", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def document_rendition(
        self,
        *,
        format: Literal["ftpdf", "jcos", "owp"],
        asset_rendition_uri: str,
        fallback: Literal["original", "none"] = "original",
    ) -> Union[Any, bytes, str]:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+asset_rendition_uri}{&format,fallback}",
                {
                    "format": format,
                    "asset_rendition_uri": asset_rendition_uri,
                    "fallback": fallback,
                },
            ).uri,
            accept=utils.build_content_type(
                "application/pdf",
                "application/octet-stream",
                "application/json",
                "application/cbor",
                "text/html",
                "*/*",
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"application/pdf", content_type):
            return resp.content
        if re.search(r"application/octet-stream", content_type):
            return resp.content
        if re.search(r"application/json", content_type):
            return resp.json()
        if re.search(r"application/cbor", content_type):
            return resp.content
        if re.search(r"text/html", content_type):
            return resp.text
        if re.search(r".*", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def document_rendition_status(
        self,
        *,
        asset_uri: str,
    ) -> asset_document_rendition_status_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+asset_uri}/document/rendition/status",
                {
                    "asset_uri": asset_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_document_rendition_status_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_document_rendition_status_v1\.json", content_type):
            return asset_document_rendition_status_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_metadata(
        self,
        *,
        asset_uri: str,
    ) -> asset_metadata_basic_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+asset_uri}/metadata",
                {
                    "asset_uri": asset_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_metadata_basic_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_metadata_basic_v1\.json", content_type):
            return asset_metadata_basic_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_metadata_field(
        self,
        *,
        fields: Literal[
            "uri",
            "name",
            "asset_id",
            "parent_uri",
            "parent_id",
            "size",
            "type",
            "md5_digest",
            "page_count",
            "created",
            "modified",
            "last_access",
            "last_pagenum",
            "source",
            "created_by_client",
            "favorite",
            "starred",
            "tags",
            "custom_tags",
            "sign (only for platform user)",
        ],
        asset_uri: str,
    ) -> asset_metadata_field_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+asset_uri}/metadata{/fields}",
                {
                    "fields": fields,
                    "asset_uri": asset_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_metadata_field_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_metadata_field_v1\.json", content_type):
            return asset_metadata_field_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def put_metadata_field(
        self,
        *,
        _data: asset_metadata_field_v1.Model,
        fields: Literal[
            "last_access",
            "last_pagenum",
            "favorite",
            "starred",
            "sign (only for platform user)",
        ],
        asset_uri: str,
    ) -> None:
        self._client.request(
            method="PUT",
            url=uritemplate.partial(
                "{+asset_uri}/metadata{/fields}",
                {
                    "fields": fields,
                    "asset_uri": asset_uri,
                },
            ).uri,
            json=_data.dict(),
        )

    def patch_metadata_field(
        self,
        *,
        _data: asset_metadata_field_patch_v1.Model,
        fields: Literal["tags", "custom_tags"],
        asset_uri: str,
    ) -> asset_metadata_field_v1.Model:
        resp = self._client.request(
            method="PATCH",
            url=uritemplate.partial(
                "{+asset_uri}/metadata{/fields}",
                {
                    "fields": fields,
                    "asset_uri": asset_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_metadata_field_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_metadata_field_v1\.json", content_type):
            return asset_metadata_field_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def delete_metadata_field(
        self,
        *,
        fields: Literal["last_access"],
        asset_uri: str,
    ) -> None:
        self._client.request(
            method="DELETE",
            url=uritemplate.partial(
                "{+asset_uri}/metadata{/fields}",
                {
                    "fields": fields,
                    "asset_uri": asset_uri,
                },
            ).uri,
        )

    def tag_sensei(
        self,
        *,
        _file: Union[IO[bytes], bytes, str],
    ) -> asset_tag_sensei_v1.Model:
        resp = self._client.request(
            method="POST",
            url="https://sensei.adobe.io/services/v1/predict",
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_tag_sensei_v1"),
            ),
            file=_file,
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_tag_sensei_v1\.json", content_type):
            return asset_tag_sensei_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def block_upload_initialize(
        self,
        *,
        _data: asset_block_upload_initialize_parameters_v1.Model,
    ) -> asset_block_upload_initialize_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/assets/block_upload/initialize",
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_block_upload_initialize_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_block_upload_initialize_v1\.json", content_type):
            return asset_block_upload_initialize_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def block_upload_extend(
        self,
        *,
        _data: asset_block_upload_extend_parameters_v1.Model,
        asset_block_upload_extend_uri: str,
    ) -> asset_block_upload_extend_v1.Model:
        resp = self._client.request(
            method="PUT",
            url=uritemplate.partial(
                "{+asset_block_upload_extend_uri}",
                {
                    "asset_block_upload_extend_uri": asset_block_upload_extend_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_block_upload_extend_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_block_upload_extend_v1\.json", content_type):
            return asset_block_upload_extend_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def block_upload_finalize(
        self,
        *,
        _data: asset_block_upload_finalize_parameters_v1.Model,
        asset_block_upload_finalize_uri: str,
    ) -> asset_block_upload_finalize_v1.Model:
        resp = self._client.request(
            method="PUT",
            url=uritemplate.partial(
                "{+asset_block_upload_finalize_uri}",
                {
                    "asset_block_upload_finalize_uri": asset_block_upload_finalize_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("asset_block_upload_finalize_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_block_upload_finalize_v1\.json", content_type):
            return asset_block_upload_finalize_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def upload_status(
        self,
        *,
        asset_upload_status_monitor_uri: str,
    ) -> upload_status_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+asset_upload_status_monitor_uri}",
                {
                    "asset_upload_status_monitor_uri": asset_upload_status_monitor_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("upload_status_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/upload_status_v1\.json", content_type):
            return upload_status_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

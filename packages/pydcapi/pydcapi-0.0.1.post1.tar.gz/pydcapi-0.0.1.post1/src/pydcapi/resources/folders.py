# generated by scripts/generate.py

from __future__ import annotations

import re
from typing import TYPE_CHECKING

import uritemplate
from typing_extensions import Literal

from pydcapi import utils
from pydcapi.models import (
    folder_breadcrumbs_v1,
    folder_creation_v1,
    folder_listing_v1,
    folder_metadata_basic_v1,
    folder_metadata_field_patch_v1,
    folder_metadata_field_v1,
    folder_v1,
    root_v1,
    system_folders_v1,
)

if TYPE_CHECKING:
    from pydcapi import client as pydcapi_client


class Folders:
    def __init__(self, client: pydcapi_client.Client):
        self._client: pydcapi_client.Client = client

    def get_root(
        self,
    ) -> root_v1.Model:
        resp = self._client.request(
            method="GET",
            url="{+base_url}/{expiry}/folders/root",
            accept=utils.build_content_type(
                utils.content_type_from_model("root_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/root_v1\.json", content_type):
            return root_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_system_folders(
        self,
    ) -> system_folders_v1.Model:
        resp = self._client.request(
            method="GET",
            url="{+base_url}/{expiry}/folders/system_folders",
            accept=utils.build_content_type(
                utils.content_type_from_model("system_folders_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/system_folders_v1\.json", content_type):
            return system_folders_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def create(
        self,
        *,
        _data: folder_creation_v1.Model,
    ) -> folder_v1.Model:
        resp = self._client.request(
            method="POST",
            url="{+base_url}/{expiry}/folders",
            accept=utils.build_content_type(
                utils.content_type_from_model("folder_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_v1\.json", content_type):
            return folder_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def delete(
        self,
        *,
        folder_uri: str,
    ) -> None:
        self._client.request(
            method="DELETE",
            url=uritemplate.partial(
                "{+folder_uri}",
                {
                    "folder_uri": folder_uri,
                },
            ).uri,
        )

    def list(
        self,
        *,
        order_by: Literal[
            "name", "size", "type", "extension", "created", "modified", "last_access"
        ],
        sort_order: Literal["ascending", "descending"],
        folder_uri: str,
        metadata: Literal["min", "basic"] = "basic",
        page_size: int = 5000,
    ) -> folder_listing_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+folder_uri}/contents{?order_by,sort_order,page_size,metadata}",
                {
                    "order_by": order_by,
                    "sort_order": sort_order,
                    "folder_uri": folder_uri,
                    "metadata": metadata,
                    "page_size": page_size,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("folder_listing_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_listing_v1\.json", content_type):
            return folder_listing_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def list_next_page(
        self,
        *,
        next_page_uri: str,
    ) -> folder_listing_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+next_page_uri}",
                {
                    "next_page_uri": next_page_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("folder_listing_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_listing_v1\.json", content_type):
            return folder_listing_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def breadcrumbs(
        self,
        *,
        folder_uri: str,
    ) -> folder_breadcrumbs_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+folder_uri}/breadcrumbs",
                {
                    "folder_uri": folder_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("folder_breadcrumbs_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_breadcrumbs_v1\.json", content_type):
            return folder_breadcrumbs_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_metadata(
        self,
        *,
        folder_uri: str,
    ) -> folder_metadata_basic_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+folder_uri}/metadata",
                {
                    "folder_uri": folder_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("folder_metadata_basic_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_metadata_basic_v1\.json", content_type):
            return folder_metadata_basic_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_metadata_field(
        self,
        *,
        fields: Literal[
            "uri",
            "name",
            "folder_id",
            "parent_uri",
            "parent_id",
            "created",
            "modified",
            "source",
            "favorite",
            "starred",
            "tags",
            "custom_tags",
        ],
        folder_uri: str,
    ) -> folder_metadata_field_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+folder_uri}/metadata{/fields}",
                {
                    "fields": fields,
                    "folder_uri": folder_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("folder_metadata_field_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_metadata_field_v1\.json", content_type):
            return folder_metadata_field_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def put_metadata_field(
        self,
        *,
        _data: folder_metadata_field_v1.Model,
        fields: Literal["favorite", "starred"],
        folder_uri: str,
    ) -> None:
        self._client.request(
            method="PUT",
            url=uritemplate.partial(
                "{+folder_uri}/metadata{/fields}",
                {
                    "fields": fields,
                    "folder_uri": folder_uri,
                },
            ).uri,
            json=_data.dict(),
        )

    def patch_metadata_field(
        self,
        *,
        _data: folder_metadata_field_patch_v1.Model,
        fields: Literal["tags", "custom_tags"],
        folder_uri: str,
    ) -> folder_metadata_field_v1.Model:
        resp = self._client.request(
            method="PATCH",
            url=uritemplate.partial(
                "{+folder_uri}/metadata{/fields}",
                {
                    "fields": fields,
                    "folder_uri": folder_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("folder_metadata_field_v1"),
            ),
            json=_data.dict(),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_metadata_field_v1\.json", content_type):
            return folder_metadata_field_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

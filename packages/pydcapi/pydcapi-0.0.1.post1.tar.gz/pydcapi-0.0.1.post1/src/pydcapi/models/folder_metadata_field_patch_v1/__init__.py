# generated by datamodel-codegen:
#   filename:  folder_metadata_field_patch_v1.json

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Extra, Field
from typing_extensions import Literal


class Tag(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    op: Optional[Literal["insert", "delete"]] = Field(
        None,
        description="Wether to insert or delete the specified value from the tags array.",
    )
    value: Optional[str] = Field(
        None, description="A short user defined tag value to insert or delete."
    )


class CustomTag(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    op: Optional[Literal["insert", "delete"]] = Field(
        None,
        description="Wether to insert or delete the specified value from the tags array.",
    )
    value: Optional[str] = Field(
        None, description="A short user defined tag value to insert or delete."
    )


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    tags: Optional[List[Tag]] = Field(
        None,
        description="An array of patch instructions to modify the tags metadata field.",
        max_items=10,
        min_items=1,
    )
    custom_tags: Optional[List[CustomTag]] = Field(
        None,
        description="An array of patch instructions to modify the tags metadata field.",
        max_items=10,
        min_items=1,
    )

# generated by datamodel-codegen:
#   filename:  discovery_v1.json

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra, Field
from typing_extensions import Literal


class Templates(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    asset_uri: Optional[str] = None
    folder_uri: Optional[str] = None
    search_uri: Optional[str] = None
    search_uri_v2: Optional[str] = None
    commenting_uri: Optional[str] = None
    ans_uri: Optional[str] = None
    review_uri: Optional[str] = None
    search_uri_primary: Optional[str] = None
    search_uri_secondary: Optional[str] = None


class ResourceParameter(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    default: Optional[str] = Field(
        None, description="The default value of the parameter"
    )
    description: Optional[str] = Field(None, description="URI pointing to a resource")
    name: str = Field(..., description="Substitution name in the URI template")
    required: Optional[bool] = False
    type: Literal["string"]


class FormDataParameter(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    description: Optional[str] = Field(None, description="Parameter description")
    name: str = Field(..., description="Parameter name")
    type: Literal["string", "number", "boolean", "integer", "array", "file", "object"]
    content_type: Optional[Dict[str, str]] = Field(
        None, description="Map of different versions of the content type response"
    )


class UriParameter(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    description: Optional[str] = Field(None, description="Parameter description")
    name: str = Field(..., description="Parameter name")
    default: Optional[Any] = Field(
        None, description="The default value of the parameter"
    )
    type: Literal["string", "number", "boolean", "integer", "array", "file", "object"]
    enum: Optional[List[str]] = None


class Resources(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    uri: str = Field(
        ...,
        description="[URI template](https://tools.ietf.org/html/rfc6570) for this call.  Aplications must use a template library to expand any path or query parameters.",
    )
    authentication: List[Literal["auth_header_primary", "ticket", "unauthenticated"]]
    http_method: Literal["GET", "PUT", "POST", "PATCH", "DELETE", "HEAD"] = Field(
        ..., description="The HTTP method used for this call"
    )
    accept: Optional[Dict[str, str]] = Field(
        None, description="Map of different versions of the accept content"
    )
    content_type: Optional[Dict[str, str]] = Field(
        None, description="Map of different versions of the content type response"
    )
    resource_parameter: Optional[ResourceParameter] = Field(
        None,
        description="If this is method is on an individual resources, the resource_parameter identifies the URI template parameter to substitute",
    )
    form_data_parameters: Optional[List[FormDataParameter]] = Field(
        None, description="List of the various allowable form data parameters"
    )
    uri_parameters: Optional[List[UriParameter]] = Field(
        None,
        description="If there are parameters in the URI path or in the query string, this identifies all the required variables.",
    )


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    expiry: int = Field(
        ...,
        description="Unix timestamp (UTC) which indicates the expiration date of the current URLs. Users of DCAPI are expected to refresh their URLs before this expiration. Once expired, URLS will return 404 errors.",
    )
    user_uri: Optional[str] = Field(
        None,
        description="The base URI to use for queries to retrieve user account information for the current authenticated user.",
    )
    templates: Optional[Templates] = Field(
        None, description="URI templates to convert ids to uris in client code."
    )
    resources: Dict[str, Dict[str, Resources]] = Field(
        ..., description="All the resource objects in this API"
    )

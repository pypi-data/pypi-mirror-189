# generated by datamodel-codegen:
#   filename:  asset_export_v1.json

from __future__ import annotations

from typing import Optional

from pydantic import AnyUrl, BaseModel, Extra, Field, constr
from typing_extensions import Literal


class AssetData(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    asset_uri: AnyUrl = Field(
        ...,
        description="Document Cloud asset url. Note that only assets that were imported from an external provider can be exported.",
    )


class ExternalAssetData(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    cloud_type: Literal["DROPBOX", "ONEDRIVE", "GDRIVE", "BOX"] = Field(
        ..., description="External cloud type identifier for 3rd party."
    )
    asset: constr(min_length=1) = Field(..., description="External asset identifier.")
    path_type: Literal["ID", "FILE_PATH", "URI"] = Field(
        ..., description="External asset identifier type."
    )
    access_token: constr(min_length=1) = Field(
        ..., description="External token for 3rd party."
    )
    conflict_behaviour: Optional[constr(min_length=1)] = Field(
        None, description="External asset conflict behavior for 3rd party."
    )
    etag: Optional[constr(min_length=1)] = Field(
        None, description="External asset etag for 3rd party."
    )
    name: Optional[constr(min_length=1)] = Field(
        None,
        description="The name for the external asset. The preferred way of specifying the filename.",
    )


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    asset_data: AssetData = Field(
        ..., description="Set of properties that are applicable for asset data."
    )
    external_asset_data: ExternalAssetData = Field(
        ...,
        description="Set of properties that are applicable for external asset data.",
    )

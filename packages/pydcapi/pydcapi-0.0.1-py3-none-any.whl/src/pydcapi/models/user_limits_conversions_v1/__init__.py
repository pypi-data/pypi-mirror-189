# generated by datamodel-codegen:
#   filename:  user_limits_conversions_v1.json

from __future__ import annotations

from pydantic import BaseModel, Extra, Field


class CreatePdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class CreatePdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class CombinePdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class CombinePdfDocuments(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class CombinePdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class OrganizePdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class OrganizePdfDocuments(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class OrganizePdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class ExportPdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class ExportPdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class OcrPdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class OcrPdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class PasswordEncryptOps(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class PasswordEncryptMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class OptimizePdfOps(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class OptimizePdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class EditPdfOps(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class EditPdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class SplitPdfConversions(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    remaining: int


class SplitPdfMaxFileSize(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class SplitPdfMaxSplitPoints(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    limit: int


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    create_pdf_conversions: CreatePdfConversions = Field(
        ..., description="Number of documents that can be converted to PDF"
    )
    create_pdf_max_file_size: CreatePdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a file that can be converted by CreatePDF",
    )
    combine_pdf_conversions: CombinePdfConversions = Field(
        ..., description="Number of combine operations that user is allowed to do"
    )
    combine_pdf_documents: CombinePdfDocuments = Field(
        ...,
        description="Maximum number of files that may be combined in one CombinePDF operation",
    )
    combine_pdf_max_file_size: CombinePdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a file that can be accepted by CombinePDF",
    )
    organize_pdf_conversions: OrganizePdfConversions = Field(
        ..., description="Number of organize operations that user is allowed to do"
    )
    organize_pdf_documents: OrganizePdfDocuments = Field(
        ...,
        description="Maximum number of files that may be combined in one organize operation",
    )
    organize_pdf_max_file_size: OrganizePdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a file that can be accepted by organize",
    )
    export_pdf_conversions: ExportPdfConversions = Field(
        ..., description="Number of documents that can be exported from PDF"
    )
    export_pdf_max_file_size: ExportPdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a file that can be exported by ExportPDF",
    )
    ocr_pdf_conversions: OcrPdfConversions = Field(
        ...,
        description="Number of PDF documents that can have an OCR operation applied",
    )
    ocr_pdf_max_file_size: OcrPdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a PDF that can be accepted for OCR",
    )
    password_encrypt_ops: PasswordEncryptOps = Field(
        ..., description="Number of PDF documents that can be password encrypted"
    )
    password_encrypt_max_file_size: PasswordEncryptMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a PDF that can be accepted for password encryption",
    )
    optimize_pdf_ops: OptimizePdfOps = Field(
        ..., description="Number of PDF documents that can be optimized"
    )
    optimize_pdf_max_file_size: OptimizePdfMaxFileSize = Field(
        ...,
        description="Maximum size (in kilobytes) of a PDF that can be accepted for optimization",
    )
    edit_pdf_ops: EditPdfOps = Field(
        ..., description="Number of PDF documents that can be edited"
    )
    edit_pdf_max_file_size: EditPdfMaxFileSize = Field(
        ..., description="Maximum size (in kilobytes) of a PDF that can be edited"
    )
    split_pdf_conversions: SplitPdfConversions = Field(
        ..., description="Number of PDF documents that can be splitted"
    )
    split_pdf_max_file_size: SplitPdfMaxFileSize = Field(
        ..., description="Maximum size (in kilobytes) of a PDF that can be splitted"
    )
    split_pdf_max_split_points: SplitPdfMaxSplitPoints = Field(
        ...,
        description="Maximum number of split points in input PDF file that will be allowed in one SplitPDF operation",
    )

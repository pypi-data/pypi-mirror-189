# generated by datamodel-codegen:
#   filename:  connector_listing_v1.json

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Extra, Field, constr
from typing_extensions import Literal


class ListItem(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    connectorId: constr(min_length=1) = Field(
        ...,
        description="GUID for uniquely identifying each external cloud account linked or ready to be linked.",
    )
    connectorData: Optional[str] = Field(
        None,
        description="Stringified JSON data representing connector preferences to be stored in db.",
    )
    connectorType: Literal[
        "OneDrive", "SharePoint", "GDrive", "Box", "DropBox"
    ] = Field(..., description="Identifier for Connector class.")
    accessToken: Optional[str] = Field(
        None, description="External cloud linked account access token."
    )
    status: Literal["ACTIVE", "EXPIRED"] = Field(
        ..., description="Identifier for the Connector Info state."
    )
    expiresIn: Optional[float] = Field(
        None,
        description="It represents remaining validity(in seconds) of the access token in connector Info.",
    )
    connectedAt: Optional[float] = Field(
        None, description="External cloud account connected time."
    )
    createdAt: float = Field(..., description="Connector Info creation time.")


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    list: List[ListItem] = Field(
        ..., description="An array of connector account info.", min_items=1
    )
    oAuthUrl: str = Field(
        ...,
        description="External cloud oAuth Url containing static info such as clientId, scopes.",
    )

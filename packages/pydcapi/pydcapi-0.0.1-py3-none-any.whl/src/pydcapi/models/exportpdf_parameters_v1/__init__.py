# generated by datamodel-codegen:
#   filename:  exportpdf_parameters_v1.json

from __future__ import annotations

from typing import Optional

from pydantic import AnyUrl, BaseModel, Extra, Field, conint, constr
from typing_extensions import Literal


class ImageParams(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    image_format: Optional[Literal["jpeg", "png", "tiff"]] = Field(
        ["jpeg"], description="The format of the image to generate."
    )
    resolution_dpi: Optional[conint(ge=9, le=600)] = Field(
        72, description="Dots per inch. This can range from 9 to 600."
    )
    max_dimension: Optional[conint(ge=32, le=8192)] = Field(
        None,
        description="Max dimension of any image in pixels. This can range from 32 to 8192.",
    )
    quality: Optional[Literal["min", "low", "medium", "high", "max"]] = Field(
        "medium",
        description='Controls the lossy compression setting.  "max" is best quality.  "min" is smallest file size',
    )
    draw_annotations: Optional[bool] = Field(
        True,
        description="Specify whether to include PDF annotations in the output image file(s).",
    )
    use_transparent_background: Optional[bool] = Field(
        False,
        description="If true, render the page backgrounds transparent.  Not applicable if the output is jpeg.",
    )
    pages: Optional[
        constr(regex=r"^([1-9 ]+[0-9 ]*-?[0-9 ]*)(,[1-9 ]+[0-9 ]*-?[0-9 ]*)*$")
    ] = Field(
        "1-",
        description="Page range to be included. Page numbers are 1-based, comma seperated, and can include spaces (0x20, ignored) and a dash ('-', 0x2D) -- used to denote a range of pages.",
    )


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    asset_uri: AnyUrl = Field(..., description="URI identifying the Asset.")
    name: constr(min_length=1) = Field(
        ...,
        description="Name of the new asset. Duplicate asset name behavior can be set by on_dup_policy.",
    )
    format: Optional[
        Literal["doc", "docx", "xls", "xlsx", "pptx", "rtf", "image"]
    ] = Field(
        "docx",
        description="The exportpdf format. For image file formats, the output is a zip file containing images of all the pages.",
    )
    do_ocr: Optional[bool] = Field(
        False,
        description="Whether OCR processing is performed on the PDF file or not. This setting is ignored for exportpdf to image.",
    )
    ocr_lang: Optional[
        Literal[
            "da-DK",
            "lt-LT",
            "sl-SI",
            "el-GR",
            "ru-RU",
            "en-US",
            "zh-HK",
            "hu-HU",
            "et-EE",
            "pt-BR",
            "uk-UA",
            "nb-NO",
            "pl-PL",
            "lv-LV",
            "fi-FI",
            "ja-JP",
            "es-ES",
            "bg-BG",
            "en-GB",
            "cs-CZ",
            "mt-MT",
            "de-DE",
            "hr-HR",
            "sk-SK",
            "sr-SR",
            "ca-CA",
            "mk-MK",
            "ko-KR",
            "de-CH",
            "nl-NL",
            "zh-CN",
            "sv-SE",
            "it-IT",
            "no-NO",
            "tr-TR",
            "fr-FR",
            "ro-RO",
            "iw-IL",
        ]
    ] = Field(
        "en-US",
        description="Locale to use for optical character recognition (when `do_ocr` is true).",
    )
    persistence: Optional[Literal["transient", "permanent"]] = Field(
        "transient",
        description='Asset storage aspect as short-term transient vs. long-term permanent. "transient" creates an asset that will be available for several hours before being garbage collected and deleted.  For operations that convert and download immediately, "transient" is the appropriate choice',
    )
    parent_uri: Optional[AnyUrl] = Field(
        None,
        description="The uri of folder to put the asset in.  This parameter is relevant only for permanent assets.  If not specified, the default depends on the operation.  Conversions will be placed in the same folder as the source asset.",
    )
    on_dup_name: Optional[Literal["error", "auto_rename", "overwrite"]] = Field(
        ["auto_rename"],
        description="How to handle a duplicate name conflict in target collection for output file.",
    )
    image_params: Optional[ImageParams] = Field(
        None,
        description="Set of properties that are applicable when exporting to an image format.",
    )

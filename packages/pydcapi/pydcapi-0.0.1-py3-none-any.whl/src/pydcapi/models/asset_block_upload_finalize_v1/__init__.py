# generated by datamodel-codegen:
#   filename:  asset_block_upload_finalize_v1.json

from __future__ import annotations

from typing import Optional

from pydantic import AnyUrl, BaseModel, Extra, Field


class RenameInfo(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    original_name: str = Field(..., description="The original name.")
    name: str = Field(..., description="The name actually used.")


class MonitorLink(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    uri: str = Field(..., description="Monitor link for getting the upload status.")


class Model(BaseModel):
    class Config:
        extra = Extra.allow
        allow_mutation = False

    asset_uri: Optional[AnyUrl] = Field(
        None, description="Asset URI of the asset created/updated."
    )
    asset_id: Optional[str] = Field(
        None, description="Id the asset created/updated in this API call."
    )
    rename_info: Optional[RenameInfo] = Field(
        None,
        description="If on_dup_name was auto_rename and the name was illegal or a duplicate was encountered, contains details on the rename.",
    )
    size: Optional[float] = Field(
        None, description="Size of the uploaded file.(Reported by cloud provider)"
    )
    etag: Optional[str] = Field(
        None,
        description="ETag of the created/updated asset. Returned only if creation/updation is completed and successful. ",
    )
    content_md5: Optional[str] = Field(
        None,
        description="Cloud provider checksum. Returned only if creation/updation is completed and successful. ",
    )
    monitor_link: Optional[MonitorLink] = Field(
        None,
        description="Monitor link object for getting the upload status. Returned only when asset upload/update is still in progress and http status is 202.",
    )

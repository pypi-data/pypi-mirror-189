# generated by scripts/generate.py

from __future__ import annotations

import re
from typing import TYPE_CHECKING

import uritemplate
from typing_extensions import Literal

from pydcapi import utils
from pydcapi.models import (
    recent_search_v1,
    recent_searches_v1,
    user_cohorts_v1,
    user_identity_v1,
    user_limits_acrobat_v1,
    user_limits_conversions_v1,
    user_limits_esign_v1,
    user_limits_fillsign_v1,
    user_limits_pdf_services_v1,
    user_limits_review_v1,
    user_limits_send_v1,
    user_limits_storage_document_cloud_v1,
    user_limits_verbs_v1,
    user_prefs_v1,
    user_put_identity_v1,
    user_storage_document_cloud_v1,
    user_subscriptions_v1,
    user_upsell_v1,
    user_v1,
)

if TYPE_CHECKING:
    from pydcapi import client as pydcapi_client


class Users:
    def __init__(self, client: pydcapi_client.Client):
        self._client: pydcapi_client.Client = client

    def get_user(
        self,
        *,
        fields: str,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}{?fields}",
                {
                    "fields": fields,
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_v1\.json", content_type):
            return user_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_cohorts(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_cohorts_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/cohorts",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_cohorts_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_cohorts_v1\.json", content_type):
            return user_cohorts_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_identity(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_identity_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/identity",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_identity_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_identity_v1\.json", content_type):
            return user_identity_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def put_identity(
        self,
        *,
        _data: user_put_identity_v1.Model,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> None:
        self._client.request(
            method="PUT",
            url=uritemplate.partial(
                "{+user_uri}/identity",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            json=_data.dict(),
        )

    def get_limits_acrobat(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_limits_acrobat_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/limits/acrobat",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_limits_acrobat_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_limits_acrobat_v1\.json", content_type):
            return user_limits_acrobat_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_limits_conversions(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_limits_conversions_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/limits/conversions",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_limits_conversions_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_limits_conversions_v1\.json", content_type):
            return user_limits_conversions_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_limits_verbs(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_limits_verbs_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/limits/verbs",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_limits_verbs_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_limits_verbs_v1\.json", content_type):
            return user_limits_verbs_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_limits_esign(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_limits_esign_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/limits/esign",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_limits_esign_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_limits_esign_v1\.json", content_type):
            return user_limits_esign_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_limits_fillsign(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_limits_fillsign_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/limits/fillsign",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_limits_fillsign_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_limits_fillsign_v1\.json", content_type):
            return user_limits_fillsign_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_limits_pdf_services(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_limits_pdf_services_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/limits/pdf_services",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_limits_pdf_services_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_limits_pdf_services_v1\.json", content_type):
            return user_limits_pdf_services_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_limits_review(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_limits_review_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/limits/review",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_limits_review_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_limits_review_v1\.json", content_type):
            return user_limits_review_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_limits_send(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_limits_send_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/limits/send",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_limits_send_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_limits_send_v1\.json", content_type):
            return user_limits_send_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_limits_storage_document_cloud(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_limits_storage_document_cloud_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/limits/storage/document_cloud",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_limits_storage_document_cloud_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(
            r"schemas/user_limits_storage_document_cloud_v1\.json", content_type
        ):
            return user_limits_storage_document_cloud_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_prefs(
        self,
        *,
        category: Literal[
            "dcweb",
            "recent_assets",
            "recent_assets_timestamp",
            "common",
            "acrobat",
            "fillsign",
        ],
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_prefs_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/prefs/{category}",
                {
                    "category": category,
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_prefs_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_prefs_v1\.json", content_type):
            return user_prefs_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def put_prefs(
        self,
        *,
        _data: user_prefs_v1.Model,
        category: Literal[
            "dcweb",
            "recent_assets",
            "recent_assets_timestamp",
            "common",
            "acrobat",
            "fillsign",
        ],
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> None:
        self._client.request(
            method="PUT",
            url=uritemplate.partial(
                "{+user_uri}/prefs/{category}",
                {
                    "category": category,
                    "user_uri": user_uri,
                },
            ).uri,
            json=_data.dict(),
        )

    def get_state_recentsearches(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> recent_searches_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/state/recentsearches",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("recent_searches_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/recent_searches_v1\.json", content_type):
            return recent_searches_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def post_state_recentsearches(
        self,
        *,
        _data: recent_search_v1.Model,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> None:
        self._client.request(
            method="POST",
            url=uritemplate.partial(
                "{+user_uri}/state/recentsearches",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            json=_data.dict(),
        )

    def delete_state_recentsearches(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> None:
        self._client.request(
            method="DELETE",
            url=uritemplate.partial(
                "{+user_uri}/state/recentsearches",
                {
                    "user_uri": user_uri,
                },
            ).uri,
        )

    def get_subscriptions(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_subscriptions_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/subscriptions",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_subscriptions_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_subscriptions_v1\.json", content_type):
            return user_subscriptions_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_storage_document_cloud(
        self,
        *,
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_storage_document_cloud_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/storage/document_cloud",
                {
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_storage_document_cloud_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_storage_document_cloud_v1\.json", content_type):
            return user_storage_document_cloud_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_upsell(
        self,
        *,
        entitlement: Literal[
            "can_send_to_individuals",
            "can_send_av",
            "create_pdf_conversions",
            "combine_pdf_conversions",
            "export_pdf_conversions",
            "export_pdf2ppt_conversions",
            "export_pdf2img_conversions",
            "acrobat_pro",
        ],
        user_uri: str = "https://dc-api.adobe.io/1675446042/users/self",
    ) -> user_upsell_v1.Model:
        resp = self._client.request(
            method="GET",
            url=uritemplate.partial(
                "{+user_uri}/upsell{?entitlement}",
                {
                    "entitlement": entitlement,
                    "user_uri": user_uri,
                },
            ).uri,
            accept=utils.build_content_type(
                utils.content_type_from_model("user_upsell_v1"),
            ),
        )

        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/user_upsell_v1\.json", content_type):
            return user_upsell_v1.Model.parse_obj(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

{"version":3,"file":"c6598cbd.js","mappings":";;;AA4FA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-glance-card-editor.ts"],"sourcesContent":["import \"../../../../components/ha-form/ha-form\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  array,\n  assert,\n  boolean,\n  number,\n  object,\n  optional,\n  string,\n  union,\n  assign,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { ConfigEntity, GlanceCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-entity-editor\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    title: optional(union([string(), number()])),\n    theme: optional(string()),\n    columns: optional(number()),\n    show_name: optional(boolean()),\n    show_state: optional(boolean()),\n    show_icon: optional(boolean()),\n    state_color: optional(boolean()),\n    entities: array(entitiesConfigStruct),\n  })\n);\n\nconst SCHEMA = [\n  { name: \"title\", selector: { text: {} } },\n  {\n    name: \"\",\n    type: \"grid\",\n    schema: [\n      { name: \"columns\", selector: { number: { min: 1, mode: \"box\" } } },\n      { name: \"theme\", selector: { theme: {} } },\n    ],\n  },\n  {\n    name: \"\",\n    type: \"grid\",\n    column_min_width: \"100px\",\n    schema: [\n      { name: \"show_name\", selector: { boolean: {} } },\n      { name: \"show_icon\", selector: { boolean: {} } },\n      { name: \"show_state\", selector: { boolean: {} } },\n    ],\n  },\n  { name: \"state_color\", selector: { boolean: {} } },\n] as const;\n\n@customElement(\"hui-glance-card-editor\")\nexport class HuiGlanceCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: GlanceCardConfig;\n\n  @state() private _configEntities?: ConfigEntity[];\n\n  public setConfig(config: GlanceCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const data = {\n      show_name: true,\n      show_icon: true,\n      show_state: true,\n      ...this._config,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${SCHEMA}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n      <hui-entity-editor\n        .hass=${this.hass}\n        .entities=${this._configEntities}\n        @entities-changed=${this._entitiesChanged}\n      ></hui-entity-editor>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const config = ev.detail.value;\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _entitiesChanged(ev: CustomEvent): void {\n    let config = this._config!;\n    config = { ...config, entities: ev.detail.entities! };\n\n    this._configEntities = processEditorEntities(this._config!.entities);\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (schema: SchemaUnion<typeof SCHEMA>) => {\n    switch (schema.name) {\n      case \"theme\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      case \"columns\":\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.glance.${schema.name}`\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-glance-card-editor\": HuiGlanceCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}
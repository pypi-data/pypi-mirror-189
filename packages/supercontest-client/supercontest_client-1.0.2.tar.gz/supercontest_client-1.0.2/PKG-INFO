Metadata-Version: 2.1
Name: supercontest-client
Version: 1.0.2
Summary: Client for fetching supercontest data via graphql
Home-page: https://southbaysupercontest.com/graphql
License: MIT
Keywords: supercontest,football,nfl
Author: Brian Mahlstedt
Author-email: brian.mahlstedt@gmail.com
Requires-Python: >=3,<4
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: bs4 (>=0,<1)
Requires-Dist: requests (>=2,<3)
Project-URL: Repository, https://gitlab.com/brianmahlstedt/supercontest/tree/master/client
Description-Content-Type: text/markdown

# Supercontest Client

I have chosen to enable GraphiQL on [southbaysupercontest](https://southbaysupercontest.com) because it is protected
by auth and CSRF. It's a valuable tool for users. [You may explore the data here](https://southbaysupercontest.com/graphql).

There is a Python client to fetch your data programmatically, similar to gql. Simply
`pip install supercontest-client` and then run a query like the following example:

```python
import supercontest-client as sbsc

query = """
{
  users (filters: {email_confirmed_at_lt: "2019-10-01T00:00:00"}) {
    edges {
      node {
        email
        first_name
      }
    }
  }
}
"""

data = sbsc.query(email='myemail@domain.com',
                          password='mypassword',  # your pw is encrypted over https
                          query=query)
```

Other heavy-handed solutions like Selenium also work. The endpoint simply requires
auth and a CSRF token.


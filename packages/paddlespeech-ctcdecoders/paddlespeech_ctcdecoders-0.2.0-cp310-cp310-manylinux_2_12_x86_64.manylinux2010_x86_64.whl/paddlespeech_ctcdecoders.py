# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _paddlespeech_ctcdecoders
else:
    import _paddlespeech_ctcdecoders

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_SwigPyIterator

    def value(self):
        return _paddlespeech_ctcdecoders.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _paddlespeech_ctcdecoders.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _paddlespeech_ctcdecoders.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _paddlespeech_ctcdecoders.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _paddlespeech_ctcdecoders.SwigPyIterator_equal(self, x)

    def copy(self):
        return _paddlespeech_ctcdecoders.SwigPyIterator_copy(self)

    def next(self):
        return _paddlespeech_ctcdecoders.SwigPyIterator_next(self)

    def __next__(self):
        return _paddlespeech_ctcdecoders.SwigPyIterator___next__(self)

    def previous(self):
        return _paddlespeech_ctcdecoders.SwigPyIterator_previous(self)

    def advance(self, n):
        return _paddlespeech_ctcdecoders.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _paddlespeech_ctcdecoders.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _paddlespeech_ctcdecoders.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _paddlespeech_ctcdecoders.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _paddlespeech_ctcdecoders.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _paddlespeech_ctcdecoders.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _paddlespeech_ctcdecoders.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.DoubleVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.DoubleVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.DoubleVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.DoubleVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.DoubleVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.DoubleVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.DoubleVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.DoubleVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.DoubleVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.DoubleVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.DoubleVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _paddlespeech_ctcdecoders.DoubleVector_swiginit(self, _paddlespeech_ctcdecoders.new_DoubleVector(*args))

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.DoubleVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.DoubleVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.DoubleVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.DoubleVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.DoubleVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_DoubleVector

# Register DoubleVector in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.DoubleVector_swigregister(DoubleVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.IntVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.IntVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.IntVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.IntVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.IntVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.IntVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.IntVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.IntVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.IntVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.IntVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.IntVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.IntVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.IntVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.IntVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.IntVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.IntVector_erase(self, *args)

    def __init__(self, *args):
        _paddlespeech_ctcdecoders.IntVector_swiginit(self, _paddlespeech_ctcdecoders.new_IntVector(*args))

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.IntVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.IntVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.IntVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.IntVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.IntVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.IntVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.IntVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_IntVector

# Register IntVector in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.IntVector_swigregister(IntVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.StringVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.StringVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.StringVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.StringVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.StringVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.StringVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.StringVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.StringVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.StringVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.StringVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.StringVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.StringVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.StringVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.StringVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.StringVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.StringVector_erase(self, *args)

    def __init__(self, *args):
        _paddlespeech_ctcdecoders.StringVector_swiginit(self, _paddlespeech_ctcdecoders.new_StringVector(*args))

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.StringVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.StringVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.StringVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.StringVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.StringVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.StringVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.StringVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_StringVector

# Register StringVector in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.StringVector_swigregister(StringVector)

class VectorOfStructVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_erase(self, *args)

    def __init__(self, *args):
        _paddlespeech_ctcdecoders.VectorOfStructVector_swiginit(self, _paddlespeech_ctcdecoders.new_VectorOfStructVector(*args))

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_VectorOfStructVector

# Register VectorOfStructVector in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.VectorOfStructVector_swigregister(VectorOfStructVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.FloatVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.FloatVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.FloatVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.FloatVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.FloatVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.FloatVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.FloatVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.FloatVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.FloatVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.FloatVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.FloatVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.FloatVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.FloatVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.FloatVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _paddlespeech_ctcdecoders.FloatVector_swiginit(self, _paddlespeech_ctcdecoders.new_FloatVector(*args))

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.FloatVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.FloatVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.FloatVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.FloatVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.FloatVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_FloatVector

# Register FloatVector in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.FloatVector_swigregister(FloatVector)

class Pair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _paddlespeech_ctcdecoders.Pair_swiginit(self, _paddlespeech_ctcdecoders.new_Pair(*args))
    first = property(_paddlespeech_ctcdecoders.Pair_first_get, _paddlespeech_ctcdecoders.Pair_first_set)
    second = property(_paddlespeech_ctcdecoders.Pair_second_get, _paddlespeech_ctcdecoders.Pair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_Pair

# Register Pair in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.Pair_swigregister(Pair)

class PairFloatStringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_erase(self, *args)

    def __init__(self, *args):
        _paddlespeech_ctcdecoders.PairFloatStringVector_swiginit(self, _paddlespeech_ctcdecoders.new_PairFloatStringVector(*args))

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_PairFloatStringVector

# Register PairFloatStringVector in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.PairFloatStringVector_swigregister(PairFloatStringVector)

class PairDoubleStringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_erase(self, *args)

    def __init__(self, *args):
        _paddlespeech_ctcdecoders.PairDoubleStringVector_swiginit(self, _paddlespeech_ctcdecoders.new_PairDoubleStringVector(*args))

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_PairDoubleStringVector

# Register PairDoubleStringVector in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.PairDoubleStringVector_swigregister(PairDoubleStringVector)

class PairDoubleStringVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_erase(self, *args)

    def __init__(self, *args):
        _paddlespeech_ctcdecoders.PairDoubleStringVector2_swiginit(self, _paddlespeech_ctcdecoders.new_PairDoubleStringVector2(*args))

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_PairDoubleStringVector2

# Register PairDoubleStringVector2 in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.PairDoubleStringVector2_swigregister(PairDoubleStringVector2)

class DoubleVector3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.DoubleVector3___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.DoubleVector3___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.DoubleVector3___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.DoubleVector3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.DoubleVector3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.DoubleVector3_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.DoubleVector3_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3_erase(self, *args)

    def __init__(self, *args):
        _paddlespeech_ctcdecoders.DoubleVector3_swiginit(self, _paddlespeech_ctcdecoders.new_DoubleVector3(*args))

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.DoubleVector3_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.DoubleVector3_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.DoubleVector3_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_DoubleVector3

# Register DoubleVector3 in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.DoubleVector3_swigregister(DoubleVector3)


def IntDoublePairCompSecondRev(a, b):
    return _paddlespeech_ctcdecoders.IntDoublePairCompSecondRev(a, b)

def StringDoublePairCompSecondRev(a, b):
    return _paddlespeech_ctcdecoders.StringDoublePairCompSecondRev(a, b)

def DoubleStringPairCompFirstRev(a, b):
    return _paddlespeech_ctcdecoders.DoubleStringPairCompFirstRev(a, b)
class RetriveStrEnumerateVocab(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_swiginit(self, _paddlespeech_ctcdecoders.new_RetriveStrEnumerateVocab())

    def Add(self, index, str):
        return _paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_Add(self, index, str)
    vocabulary = property(_paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_vocabulary_get, _paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_vocabulary_set)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_RetriveStrEnumerateVocab

# Register RetriveStrEnumerateVocab in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_swigregister(RetriveStrEnumerateVocab)
cvar = _paddlespeech_ctcdecoders.cvar
OOV_SCORE = cvar.OOV_SCORE
START_TOKEN = cvar.START_TOKEN
UNK_TOKEN = cvar.UNK_TOKEN
END_TOKEN = cvar.END_TOKEN

class Scorer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, alpha, beta, lm_path, vocabulary):
        _paddlespeech_ctcdecoders.Scorer_swiginit(self, _paddlespeech_ctcdecoders.new_Scorer(alpha, beta, lm_path, vocabulary))
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_Scorer

    def get_log_cond_prob(self, words):
        return _paddlespeech_ctcdecoders.Scorer_get_log_cond_prob(self, words)

    def get_sent_log_prob(self, words):
        return _paddlespeech_ctcdecoders.Scorer_get_sent_log_prob(self, words)

    def get_max_order(self):
        return _paddlespeech_ctcdecoders.Scorer_get_max_order(self)

    def get_dict_size(self):
        return _paddlespeech_ctcdecoders.Scorer_get_dict_size(self)

    def is_character_based(self):
        return _paddlespeech_ctcdecoders.Scorer_is_character_based(self)

    def reset_params(self, alpha, beta):
        return _paddlespeech_ctcdecoders.Scorer_reset_params(self, alpha, beta)

    def make_ngram(self, prefix):
        return _paddlespeech_ctcdecoders.Scorer_make_ngram(self, prefix)

    def split_labels(self, labels):
        return _paddlespeech_ctcdecoders.Scorer_split_labels(self, labels)
    alpha = property(_paddlespeech_ctcdecoders.Scorer_alpha_get, _paddlespeech_ctcdecoders.Scorer_alpha_set)
    beta = property(_paddlespeech_ctcdecoders.Scorer_beta_get, _paddlespeech_ctcdecoders.Scorer_beta_set)
    dictionary = property(_paddlespeech_ctcdecoders.Scorer_dictionary_get, _paddlespeech_ctcdecoders.Scorer_dictionary_set)

# Register Scorer in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.Scorer_swigregister(Scorer)


def ctc_greedy_decoding(probs_seq, vocabulary, blank_id):
    return _paddlespeech_ctcdecoders.ctc_greedy_decoding(probs_seq, vocabulary, blank_id)

def ctc_beam_search_decoding(probs_seq, vocabulary, beam_size, cutoff_prob=1.0, cutoff_top_n=40, ext_scorer=None, blank_id=0):
    return _paddlespeech_ctcdecoders.ctc_beam_search_decoding(probs_seq, vocabulary, beam_size, cutoff_prob, cutoff_top_n, ext_scorer, blank_id)

def ctc_beam_search_decoding_batch(probs_split, vocabulary, beam_size, num_processes, cutoff_prob=1.0, cutoff_top_n=40, ext_scorer=None, blank_id=0):
    return _paddlespeech_ctcdecoders.ctc_beam_search_decoding_batch(probs_split, vocabulary, beam_size, num_processes, cutoff_prob, cutoff_top_n, ext_scorer, blank_id)
class CtcBeamSearchDecoderStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    root = property(_paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_root_get, _paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_root_set)
    prefixes = property(_paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_prefixes_get, _paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_prefixes_set)

    def __init__(self):
        _paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_swiginit(self, _paddlespeech_ctcdecoders.new_CtcBeamSearchDecoderStorage())
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_CtcBeamSearchDecoderStorage

# Register CtcBeamSearchDecoderStorage in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_swigregister(CtcBeamSearchDecoderStorage)

class CtcBeamSearchDecoderBatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vocabulary, batch_size, beam_size, num_processes, cutoff_prob, cutoff_top_n, ext_scorer, blank_id):
        _paddlespeech_ctcdecoders.CtcBeamSearchDecoderBatch_swiginit(self, _paddlespeech_ctcdecoders.new_CtcBeamSearchDecoderBatch(vocabulary, batch_size, beam_size, num_processes, cutoff_prob, cutoff_top_n, ext_scorer, blank_id))
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_CtcBeamSearchDecoderBatch

    def next(self, probs_split, has_value):
        return _paddlespeech_ctcdecoders.CtcBeamSearchDecoderBatch_next(self, probs_split, has_value)

    def decode(self):
        return _paddlespeech_ctcdecoders.CtcBeamSearchDecoderBatch_decode(self)

    def reset_state(self, batch_size, beam_size, num_processes, cutoff_prob, cutoff_top_n):
        return _paddlespeech_ctcdecoders.CtcBeamSearchDecoderBatch_reset_state(self, batch_size, beam_size, num_processes, cutoff_prob, cutoff_top_n)

# Register CtcBeamSearchDecoderBatch in _paddlespeech_ctcdecoders:
_paddlespeech_ctcdecoders.CtcBeamSearchDecoderBatch_swigregister(CtcBeamSearchDecoderBatch)


def ctc_beam_search_decode_chunk(root, prefixes, probs_seq, vocabulary, beam_size, cutoff_prob, cutoff_top_n, ext_scorer, blank_id):
    return _paddlespeech_ctcdecoders.ctc_beam_search_decode_chunk(root, prefixes, probs_seq, vocabulary, beam_size, cutoff_prob, cutoff_top_n, ext_scorer, blank_id)

def get_decode_result(prefixes, vocabulary, beam_size, ext_scorer):
    return _paddlespeech_ctcdecoders.get_decode_result(prefixes, vocabulary, beam_size, ext_scorer)

def free_storage(storage):
    return _paddlespeech_ctcdecoders.free_storage(storage)

def ctc_beam_search_decode_chunk_begin(root, ext_scorer):
    return _paddlespeech_ctcdecoders.ctc_beam_search_decode_chunk_begin(root, ext_scorer)



# coding: utf-8

"""
    Chain App BIND client SDK

    Description for BIND.   # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bind.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chain_app_client_sdk import schemas  # noqa: F401


class Stake(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "amount",
            "is_checking_fee",
            "user_id",
            "locking_period",
        }
        
        class properties:
            amount = schemas.NumberSchema
            user_id = schemas.StrSchema
            locking_period = schemas.NumberSchema
            is_checking_fee = schemas.BoolSchema
            __annotations__ = {
                "amount": amount,
                "user_id": user_id,
                "locking_period": locking_period,
                "is_checking_fee": is_checking_fee,
            }
    
    amount: MetaOapg.properties.amount
    is_checking_fee: MetaOapg.properties.is_checking_fee
    user_id: MetaOapg.properties.user_id
    locking_period: MetaOapg.properties.locking_period
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locking_period"]) -> MetaOapg.properties.locking_period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_checking_fee"]) -> MetaOapg.properties.is_checking_fee: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "user_id", "locking_period", "is_checking_fee", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locking_period"]) -> MetaOapg.properties.locking_period: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_checking_fee"]) -> MetaOapg.properties.is_checking_fee: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "user_id", "locking_period", "is_checking_fee", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        is_checking_fee: typing.Union[MetaOapg.properties.is_checking_fee, bool, ],
        user_id: typing.Union[MetaOapg.properties.user_id, str, ],
        locking_period: typing.Union[MetaOapg.properties.locking_period, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Stake':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            is_checking_fee=is_checking_fee,
            user_id=user_id,
            locking_period=locking_period,
            _configuration=_configuration,
            **kwargs,
        )

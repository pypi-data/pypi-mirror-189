# coding: utf-8

"""
    Chain App BIND client SDK

    Description for BIND.   # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bind.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chain_app_client_sdk import schemas  # noqa: F401


class MainPoolInfoData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "reward_vault_balance",
            "main_pool_pubkey",
            "main_pool_status",
            "staking_vault_balance",
            "total_staked_by_users",
            "updated_at",
            "user_count",
            "created_at",
            "main_pool_id",
            "locking_period_of_behalf_staking",
            "main_pool_owner",
            "total_staked_by_bind",
        }
        
        class properties:
            main_pool_id = schemas.StrSchema
            main_pool_pubkey = schemas.StrSchema
            main_pool_owner = schemas.StrSchema
            user_count = schemas.NumberSchema
            reward_vault_balance = schemas.NumberSchema
            staking_vault_balance = schemas.NumberSchema
            total_staked_by_bind = schemas.NumberSchema
            total_staked_by_users = schemas.NumberSchema
            locking_period_of_behalf_staking = schemas.NumberSchema
            main_pool_status = schemas.NumberSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            __annotations__ = {
                "main_pool_id": main_pool_id,
                "main_pool_pubkey": main_pool_pubkey,
                "main_pool_owner": main_pool_owner,
                "user_count": user_count,
                "reward_vault_balance": reward_vault_balance,
                "staking_vault_balance": staking_vault_balance,
                "total_staked_by_bind": total_staked_by_bind,
                "total_staked_by_users": total_staked_by_users,
                "locking_period_of_behalf_staking": locking_period_of_behalf_staking,
                "main_pool_status": main_pool_status,
                "created_at": created_at,
                "updated_at": updated_at,
            }
    
    reward_vault_balance: MetaOapg.properties.reward_vault_balance
    main_pool_pubkey: MetaOapg.properties.main_pool_pubkey
    main_pool_status: MetaOapg.properties.main_pool_status
    staking_vault_balance: MetaOapg.properties.staking_vault_balance
    total_staked_by_users: MetaOapg.properties.total_staked_by_users
    updated_at: MetaOapg.properties.updated_at
    user_count: MetaOapg.properties.user_count
    created_at: MetaOapg.properties.created_at
    main_pool_id: MetaOapg.properties.main_pool_id
    locking_period_of_behalf_staking: MetaOapg.properties.locking_period_of_behalf_staking
    main_pool_owner: MetaOapg.properties.main_pool_owner
    total_staked_by_bind: MetaOapg.properties.total_staked_by_bind
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["main_pool_id"]) -> MetaOapg.properties.main_pool_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["main_pool_pubkey"]) -> MetaOapg.properties.main_pool_pubkey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["main_pool_owner"]) -> MetaOapg.properties.main_pool_owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_count"]) -> MetaOapg.properties.user_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reward_vault_balance"]) -> MetaOapg.properties.reward_vault_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staking_vault_balance"]) -> MetaOapg.properties.staking_vault_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_staked_by_bind"]) -> MetaOapg.properties.total_staked_by_bind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_staked_by_users"]) -> MetaOapg.properties.total_staked_by_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locking_period_of_behalf_staking"]) -> MetaOapg.properties.locking_period_of_behalf_staking: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["main_pool_status"]) -> MetaOapg.properties.main_pool_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["main_pool_id", "main_pool_pubkey", "main_pool_owner", "user_count", "reward_vault_balance", "staking_vault_balance", "total_staked_by_bind", "total_staked_by_users", "locking_period_of_behalf_staking", "main_pool_status", "created_at", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["main_pool_id"]) -> MetaOapg.properties.main_pool_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["main_pool_pubkey"]) -> MetaOapg.properties.main_pool_pubkey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["main_pool_owner"]) -> MetaOapg.properties.main_pool_owner: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_count"]) -> MetaOapg.properties.user_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reward_vault_balance"]) -> MetaOapg.properties.reward_vault_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staking_vault_balance"]) -> MetaOapg.properties.staking_vault_balance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_staked_by_bind"]) -> MetaOapg.properties.total_staked_by_bind: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_staked_by_users"]) -> MetaOapg.properties.total_staked_by_users: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locking_period_of_behalf_staking"]) -> MetaOapg.properties.locking_period_of_behalf_staking: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["main_pool_status"]) -> MetaOapg.properties.main_pool_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["main_pool_id", "main_pool_pubkey", "main_pool_owner", "user_count", "reward_vault_balance", "staking_vault_balance", "total_staked_by_bind", "total_staked_by_users", "locking_period_of_behalf_staking", "main_pool_status", "created_at", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reward_vault_balance: typing.Union[MetaOapg.properties.reward_vault_balance, decimal.Decimal, int, float, ],
        main_pool_pubkey: typing.Union[MetaOapg.properties.main_pool_pubkey, str, ],
        main_pool_status: typing.Union[MetaOapg.properties.main_pool_status, decimal.Decimal, int, float, ],
        staking_vault_balance: typing.Union[MetaOapg.properties.staking_vault_balance, decimal.Decimal, int, float, ],
        total_staked_by_users: typing.Union[MetaOapg.properties.total_staked_by_users, decimal.Decimal, int, float, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        user_count: typing.Union[MetaOapg.properties.user_count, decimal.Decimal, int, float, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        main_pool_id: typing.Union[MetaOapg.properties.main_pool_id, str, ],
        locking_period_of_behalf_staking: typing.Union[MetaOapg.properties.locking_period_of_behalf_staking, decimal.Decimal, int, float, ],
        main_pool_owner: typing.Union[MetaOapg.properties.main_pool_owner, str, ],
        total_staked_by_bind: typing.Union[MetaOapg.properties.total_staked_by_bind, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MainPoolInfoData':
        return super().__new__(
            cls,
            *args,
            reward_vault_balance=reward_vault_balance,
            main_pool_pubkey=main_pool_pubkey,
            main_pool_status=main_pool_status,
            staking_vault_balance=staking_vault_balance,
            total_staked_by_users=total_staked_by_users,
            updated_at=updated_at,
            user_count=user_count,
            created_at=created_at,
            main_pool_id=main_pool_id,
            locking_period_of_behalf_staking=locking_period_of_behalf_staking,
            main_pool_owner=main_pool_owner,
            total_staked_by_bind=total_staked_by_bind,
            _configuration=_configuration,
            **kwargs,
        )

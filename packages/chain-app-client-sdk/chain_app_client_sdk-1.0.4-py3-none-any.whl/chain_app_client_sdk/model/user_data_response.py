# coding: utf-8

"""
    Chain App BIND client SDK

    Description for BIND.   # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bind.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from chain_app_client_sdk import schemas  # noqa: F401


class UserDataResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "total_staked_amount",
            "user_id",
            "name",
            "wallet_pubkey",
            "self_staked_amount",
        }
        
        class properties:
            user_id = schemas.StrSchema
            name = schemas.StrSchema
            wallet_pubkey = schemas.StrSchema
            total_staked_amount = schemas.NumberSchema
            self_staked_amount = schemas.NumberSchema
            token = schemas.StrSchema
            __annotations__ = {
                "user_id": user_id,
                "name": name,
                "wallet_pubkey": wallet_pubkey,
                "total_staked_amount": total_staked_amount,
                "self_staked_amount": self_staked_amount,
                "token": token,
            }
    
    total_staked_amount: MetaOapg.properties.total_staked_amount
    user_id: MetaOapg.properties.user_id
    name: MetaOapg.properties.name
    wallet_pubkey: MetaOapg.properties.wallet_pubkey
    self_staked_amount: MetaOapg.properties.self_staked_amount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_pubkey"]) -> MetaOapg.properties.wallet_pubkey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_staked_amount"]) -> MetaOapg.properties.total_staked_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["self_staked_amount"]) -> MetaOapg.properties.self_staked_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_id", "name", "wallet_pubkey", "total_staked_amount", "self_staked_amount", "token", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_pubkey"]) -> MetaOapg.properties.wallet_pubkey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_staked_amount"]) -> MetaOapg.properties.total_staked_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["self_staked_amount"]) -> MetaOapg.properties.self_staked_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_id", "name", "wallet_pubkey", "total_staked_amount", "self_staked_amount", "token", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        total_staked_amount: typing.Union[MetaOapg.properties.total_staked_amount, decimal.Decimal, int, float, ],
        user_id: typing.Union[MetaOapg.properties.user_id, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        wallet_pubkey: typing.Union[MetaOapg.properties.wallet_pubkey, str, ],
        self_staked_amount: typing.Union[MetaOapg.properties.self_staked_amount, decimal.Decimal, int, float, ],
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserDataResponse':
        return super().__new__(
            cls,
            *args,
            total_staked_amount=total_staked_amount,
            user_id=user_id,
            name=name,
            wallet_pubkey=wallet_pubkey,
            self_staked_amount=self_staked_amount,
            token=token,
            _configuration=_configuration,
            **kwargs,
        )

Metadata-Version: 2.1
Name: reparo
Version: 0.0.4
Summary: Reparo is a python sci-kit learn inspired package for Missing Value Imputation.
Home-page: https://github.com/SigmoidAI/reparo
Author: SigmoidAI - Stojoc Vladimir
Author-email: vladimir.stojoc@gmail.com
License: MIT
Download-URL: https://github.com/ScienceKot/kydavra/archive/v1.0.tar.gz
Keywords: ml,machine learning,feature engineering,python,data science
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Framework :: Jupyter
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Description-Content-Type: text/x-rst
Requires-Dist: numpy
Requires-Dist: pandas
Requires-Dist: scikit-learn
Requires-Dist: statsmodels


Reparo is a python sci-kit learn inspired package for Missing Value Imputation. It contains a some feature transformers to eliminate Missing Values (NaNs) from your data for Machine Learning Algorithms.

This version of reparo has the next methods of missing value imputation:

1) Cold-Deck Imputation (CDI).

2) Hot-Deck Imputation (HotDeckImputation).

3) Fuzzy-Rough Nearest Neighbor for Imputation (FRNNI).

4) K-Nearest Neighbors Imputation (KNNI).

5) Single Center Imputation from Multiple Chained Equation (SICE).

6) Predictive Mean Matching (PMM).

7) Multivariate Imputation by Chained Equation (MICE).

All these methods work like normal sklearn transformers. They have fit, transform and fit_transform functions implemented.

Additionally every reparo transformer has an apply function which allows to apply an transformation on a pandas Data Frame.

How to use reparo

To use a transformer from reparo you should just import the transformer from reparo in the following framework:

```from reparo import <class name>```

class names are written above in parantheses.

Next create a object of this algorithm (I will use k-Nearest Neighbors Imputation as an example).

```method = KNNI()```

Firstly you should fit the transformer, passing to it a feature matrix (X) and the target array (y). y argument is not really used (as it causes data leackage)

```method.fit(X, y)```

After you fit the model, you can use it for transforming new data, using the transform function. To transform function you should pass only the feature matrix (X).

```X_transformed = method.transform(X)```

Also you can fit and transform the data at the same time using the fit_transform function.

```X_transformed = method.fit_transform(X)```

Also you can apply a transformation directly on a pandas DataFrame, choosing the columns that you want to change.

```new_df = method.apply(df, 'target', ['col1', 'col2'])```

With love from Sigmoid.

We are open for feedback. Please send your impression to papaluta.vasile@isa.utm.md




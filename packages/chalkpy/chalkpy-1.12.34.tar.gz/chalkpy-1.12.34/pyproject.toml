[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name="chalkpy"
description="Python SDK for Chalk"
requires-python = ">3.8,<3.11"
authors = [
    { name = "Chalk AI, Inc." }
]
readme="README.md"
classifiers=[
    # Trove classifiers
    # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["version"]

# When adding a new dependency, add it in here, then run `pdm install` to install it and
# update the pdm.lock file
dependencies = [
    "cattrs>=22.1.0,<23",
    "executing>=1.2.0,<2",
    "pydantic>=1.0.0,<2",
    "pyyaml>=6.0,<7",
    "isodate>=0.6.1,<0.7",
    "python-dateutil>=2.8.0,<3",
    "requests>=2.28.0,<3",
    "pandas>=1.5.1,<1.6",  # required for client.get_training_dataframe
    "pyarrow>=8.0.0,<9.0.0",
    "backports.zoneinfo[tzdata]>=0.2.1,<3;python_version<'3.9'",
    "typing-extensions>=4.4.0,<5",
]
[project.optional-dependencies]
base = []
dev=[
    "pre-commit",
    "mypy>=0.900,<1.0",
    "pytest==7.2.1",
    "pytest-env==0.8.1",
    "pytest-timeout==2.1.0",
    "pytest-xdist==3.1.0",
    "python-dotenv==0.21.1",
    "sqlalchemy2-stubs==0.0.2a32",
    "types-psycopg2==2.9.21.4",
    "types-pymysql==1.0.19.2",
    "types-pyyaml==6.0.12.3",
    "types-requests==2.28.11.8",
    "types-setuptools==65.7.0.3",
]
runtime=[
    # Dependencies needed to execute resolvers
    "duckdb==0.6.0",
    "sqlglot>=10.5.2,<10.6",
    "polars[timezone]==0.15.14",
]


# SQL-specific
sql=["sqlalchemy>=1.4.26,<2", "chalkpy[runtime]"]
bigquery=["sqlalchemy-bigquery>=1.5.0,<1.6", "chalkpy[sql]"]
postgresql=["psycopg2>=2.9.4,<3", "chalkpy[sql]"]
snowflake=["snowflake-connector-python>=2.8.0,<3", "snowflake-sqlalchemy>=1.4.2,<1.5", "chalkpy[sql]"]
sqlite=["chalkpy[sql]"]
redshift=["sqlalchemy-redshift>=0.8.11,<0.9", "redshift_connector>=2.0.909,<2.1", "chalkpy[sql]", "chalkpy[postgresql]"]
mysql=["pymysql>=1.0.2,<2", "chalkpy[sql]"]

# "All" includes everything except for dev dependencies
all=[
    "chalkpy[runtime]",
    "chalkpy[sql]",
    "chalkpy[bigquery]",
    "chalkpy[postgresql]",
    "chalkpy[snowflake]",
    "chalkpy[sqlite]",
    "chalkpy[redshift]",
    "chalkpy[mysql]",
]

# Deprecated groups
polars=["chalkpy[runtime]"]  # deprecated; should use chalkpy[runtime]

[project.urls]
homepage = "https://chalk.ai"

[project.scripts]
chalkpy="chalk.cli:cli"


[tool.setuptools.packages.find]
include = ["chalk*"]
exclude = ["tests*"]
namespaces = false


[tool.setuptools.dynamic]
version = { attr = "chalk._version.__version__" }


[tool.isort]
profile = "black"
py_version=37
line_length=120
skip = ["chalk/feature_n/__init__.py"]

[tool.black]
target-version = ['py37']
line-length = 120

[tool.autoflake]
check = true
remove-duplicate-keys=true
remove-all-unused-imports=true
in-place=true

[tool.pytest.ini_options]
filterwarnings = [
    "error"
]
env = [
    "CHALK_ALLOW_REGISTRY_UPDATES=1",
    "PYTHONASYNCIODEBUG=1",
    "SQLALCHEMY_WARN_20=1",
]
log_cli = true
addopts = "-n auto"

[tool.pyright]
typeCheckingMode = "basic"
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
# strictParameterNoneValue
# enableTypeIgnoreComments
reportMissingModuleSource = "error"
# reportMissingImports
# reportUndefinedVariable
# reportAssertAlwaysTrue
# reportInvalidStringEscapeSequence
reportInvalidTypeVarUse = "error"
# reportMissingTypeStubs
reportSelfClsParameterName = "error"
reportUnsupportedDunderAll = "error"
reportUnusedExpression = "error"
reportWildcardImportFromLibrary = "error"
# reportGeneralTypeIssues
# reportOptionalSubscript
# reportOptionalMemberAccess
# reportOptionalCall
# reportOptionalIterable
# reportOptionalContextManager
# reportOptionalOperand
# reportTypedDictNotRequiredAccess
# reportPrivateImportUsage
# reportUnboundVariable
# reportUnusedCoroutine
reportConstantRedefinition = "error"
reportDeprecated = "warning"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "error"
# reportImportCycles
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "warning"
reportInvalidStubStatement = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
# reportMissingTypeArgument
reportOverlappingOverload = "error"
reportPrivateUsage = "warning"
reportTypeCommentUsage = "error"
reportShadowedImports = "error"
# reportUnknownArgumentType
# reportUnknownLambdaType
# reportUnknownMemberType
# reportUnknownParameterType
# reportUnknownVariableType
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnusedClass = "error"
reportUnusedImport = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
reportCallInDefaultInitializer = "error"
reportImplicitStringConcatenation = "error"
# reportMissingSuperCall = "none"
reportPropertyTypeMismatch = "warning"
# reportUninitializedInstanceVariable = "none"
reportUnnecessaryTypeIgnoreComment = "error"
# reportUnusedCallResult
include=["**/chalk/chalk/**", "**/chalk/tests/**"]
exclude=["**/node_modules", "**/__pycache__", "**/.*", "**/chalk/feature_n/**"]

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AutoscaleArgs',
]

@pulumi.input_type
class AutoscaleArgs:
    def __init__(__self__, *,
                 max_slots: Optional[pulumi.Input[str]] = None):
        """
        Auto scaling settings. max_slots and budget are mutually exclusive. If max_slots is set: * The system will create a dedicated `FLEX` capacity commitment to hold the slots for auto-scale. Users won't be able to manage it, to avoid conflicts. * Scale-up will happen if there are always pending tasks for the past 10 minutes. * Scale-down will happen, if the system detects that scale-up won't be triggered again. If budget is set: * The system will try to use more slots immediately. * At a particular moment, the number of slots scaled is determined by the sytsem, based on the remaining budget and system limit. But overall the usage will conform to the budget if there is enough traffic. * The system will round the slot usage every minute. **Note** this is an alpha feature.
        :param pulumi.Input[str] max_slots: Number of slots to be scaled when needed.
        """
        if max_slots is not None:
            pulumi.set(__self__, "max_slots", max_slots)

    @property
    @pulumi.getter(name="maxSlots")
    def max_slots(self) -> Optional[pulumi.Input[str]]:
        """
        Number of slots to be scaled when needed.
        """
        return pulumi.get(self, "max_slots")

    @max_slots.setter
    def max_slots(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_slots", value)



# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GetAuthorizedOrgsDescResult',
    'AwaitableGetAuthorizedOrgsDescResult',
    'get_authorized_orgs_desc',
    'get_authorized_orgs_desc_output',
]

@pulumi.output_type
class GetAuthorizedOrgsDescResult:
    def __init__(__self__, asset_type=None, authorization_direction=None, authorization_type=None, name=None, orgs=None):
        if asset_type and not isinstance(asset_type, str):
            raise TypeError("Expected argument 'asset_type' to be a str")
        pulumi.set(__self__, "asset_type", asset_type)
        if authorization_direction and not isinstance(authorization_direction, str):
            raise TypeError("Expected argument 'authorization_direction' to be a str")
        pulumi.set(__self__, "authorization_direction", authorization_direction)
        if authorization_type and not isinstance(authorization_type, str):
            raise TypeError("Expected argument 'authorization_type' to be a str")
        pulumi.set(__self__, "authorization_type", authorization_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if orgs and not isinstance(orgs, list):
            raise TypeError("Expected argument 'orgs' to be a list")
        pulumi.set(__self__, "orgs", orgs)

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> str:
        """
        The asset type of this authorized orgs desc. e.g. device, credential strength.
        """
        return pulumi.get(self, "asset_type")

    @property
    @pulumi.getter(name="authorizationDirection")
    def authorization_direction(self) -> str:
        """
        Authorization direction of this authorization relationship. i.e. Whether to allow specified orgs to evaluate this org's traffic, or allow specified orgs' traffic to be evaluated by this org. Orgs specified as `AUTHORIZATION_DIRECTION_TO` in this AuthorizedOrgsDesc[com.google.identity.accesscontextmanager.v1.AuthorizedOrgsDesc] must also specify this org as the `AUTHORIZATION_DIRECTION_FROM` in their own AuthorizedOrgsDesc in order for this relationship to take effect. Orgs specified as `AUTHORIZATION_DIRECTION_FROM` in this AuthorizedOrgsDesc[com.google.identity.accesscontextmanager.v1.AuthorizedOrgsDesc] must also specify this org as the `AUTHORIZATION_DIRECTION_TO` in their own AuthorizedOrgsDesc in order for this relationship to take effect.
        """
        return pulumi.get(self, "authorization_direction")

    @property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> str:
        """
        The authorization type of this authorized orgs desc. e.g.authorization, troubleshooting or logging.
        """
        return pulumi.get(self, "authorization_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Assigned by the server during creation. The last segment has an arbitrary length and has only URI unreserved characters (as defined by [RFC 3986 Section 2.3](https://tools.ietf.org/html/rfc3986#section-2.3)). Should not be specified by the client during creation. Example: "accessPolicies/122256/authorizedOrgs/b3-BhcX_Ud5N"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def orgs(self) -> Sequence[str]:
        """
        The list of organization ids in this AuthorizedOrgsDesc.
        """
        return pulumi.get(self, "orgs")


class AwaitableGetAuthorizedOrgsDescResult(GetAuthorizedOrgsDescResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizedOrgsDescResult(
            asset_type=self.asset_type,
            authorization_direction=self.authorization_direction,
            authorization_type=self.authorization_type,
            name=self.name,
            orgs=self.orgs)


def get_authorized_orgs_desc(access_policy_id: Optional[str] = None,
                             authorized_orgs_desc_id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorizedOrgsDescResult:
    """
    Gets a authorized orgs desc based on the resource name.
    """
    __args__ = dict()
    __args__['accessPolicyId'] = access_policy_id
    __args__['authorizedOrgsDescId'] = authorized_orgs_desc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('google-native:accesscontextmanager/v1:getAuthorizedOrgsDesc', __args__, opts=opts, typ=GetAuthorizedOrgsDescResult).value

    return AwaitableGetAuthorizedOrgsDescResult(
        asset_type=__ret__.asset_type,
        authorization_direction=__ret__.authorization_direction,
        authorization_type=__ret__.authorization_type,
        name=__ret__.name,
        orgs=__ret__.orgs)


@_utilities.lift_output_func(get_authorized_orgs_desc)
def get_authorized_orgs_desc_output(access_policy_id: Optional[pulumi.Input[str]] = None,
                                    authorized_orgs_desc_id: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuthorizedOrgsDescResult]:
    """
    Gets a authorized orgs desc based on the resource name.
    """
    ...

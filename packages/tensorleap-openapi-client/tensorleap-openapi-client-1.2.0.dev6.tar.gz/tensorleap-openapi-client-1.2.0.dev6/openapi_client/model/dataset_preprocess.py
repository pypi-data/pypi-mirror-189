# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class DatasetPreprocess(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "validation_length",
            "training_length",
        }
        
        class properties:
            training_length = schemas.Float64Schema
            validation_length = schemas.Float64Schema
            test_length = schemas.Float64Schema
            unlabeled_length = schemas.Float64Schema
            __annotations__ = {
                "training_length": training_length,
                "validation_length": validation_length,
                "test_length": test_length,
                "unlabeled_length": unlabeled_length,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    validation_length: MetaOapg.properties.validation_length
    training_length: MetaOapg.properties.training_length
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validation_length"]) -> MetaOapg.properties.validation_length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["training_length"]) -> MetaOapg.properties.training_length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test_length"]) -> MetaOapg.properties.test_length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unlabeled_length"]) -> MetaOapg.properties.unlabeled_length: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["validation_length"], typing_extensions.Literal["training_length"], typing_extensions.Literal["test_length"], typing_extensions.Literal["unlabeled_length"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validation_length"]) -> MetaOapg.properties.validation_length: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["training_length"]) -> MetaOapg.properties.training_length: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test_length"]) -> typing.Union[MetaOapg.properties.test_length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unlabeled_length"]) -> typing.Union[MetaOapg.properties.unlabeled_length, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["validation_length"], typing_extensions.Literal["training_length"], typing_extensions.Literal["test_length"], typing_extensions.Literal["unlabeled_length"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        validation_length: typing.Union[MetaOapg.properties.validation_length, decimal.Decimal, int, float, ],
        training_length: typing.Union[MetaOapg.properties.training_length, decimal.Decimal, int, float, ],
        test_length: typing.Union[MetaOapg.properties.test_length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        unlabeled_length: typing.Union[MetaOapg.properties.unlabeled_length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DatasetPreprocess':
        return super().__new__(
            cls,
            *args,
            validation_length=validation_length,
            training_length=training_length,
            test_length=test_length,
            unlabeled_length=unlabeled_length,
            _configuration=_configuration,
        )

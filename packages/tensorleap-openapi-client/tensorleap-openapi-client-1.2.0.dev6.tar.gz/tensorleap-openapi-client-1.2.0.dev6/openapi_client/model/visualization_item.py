# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class VisualizationItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "layout",
            "_id",
            "type",
        }
        
        class properties:
            _id = schemas.StrSchema
        
            @staticmethod
            def layout() -> typing.Type['SizedLayout']:
                return SizedLayout
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Visualization": "VISUALIZATION",
                    }
                
                @schemas.classproperty
                def VISUALIZATION(cls):
                    return cls("Visualization")
            __annotations__ = {
                "_id": _id,
                "layout": layout,
                "type": type,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    layout: 'SizedLayout'
    _id: MetaOapg.properties._id
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layout"]) -> 'SizedLayout': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["layout"], typing_extensions.Literal["_id"], typing_extensions.Literal["type"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layout"]) -> 'SizedLayout': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["layout"], typing_extensions.Literal["_id"], typing_extensions.Literal["type"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        layout: 'SizedLayout',
        _id: typing.Union[MetaOapg.properties._id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'VisualizationItem':
        return super().__new__(
            cls,
            *args,
            layout=layout,
            _id=_id,
            type=type,
            _configuration=_configuration,
        )

from openapi_client.model.sized_layout import SizedLayout

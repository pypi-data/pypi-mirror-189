# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class UpdateModelTestRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "_id",
        }
        
        class properties:
            _id = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def testFilter() -> typing.Type['ClientFilterParams']:
                return ClientFilterParams
            
            
            class datasetFilter(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ESFilter']:
                        return ESFilter
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ESFilter'], typing.List['ESFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'datasetFilter':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ESFilter':
                    return super().__getitem__(i)
            __annotations__ = {
                "_id": _id,
                "name": name,
                "testFilter": testFilter,
                "datasetFilter": datasetFilter,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    _id: MetaOapg.properties._id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testFilter"]) -> 'ClientFilterParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetFilter"]) -> MetaOapg.properties.datasetFilter: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_id"], typing_extensions.Literal["name"], typing_extensions.Literal["testFilter"], typing_extensions.Literal["datasetFilter"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testFilter"]) -> typing.Union['ClientFilterParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetFilter"]) -> typing.Union[MetaOapg.properties.datasetFilter, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_id"], typing_extensions.Literal["name"], typing_extensions.Literal["testFilter"], typing_extensions.Literal["datasetFilter"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _id: typing.Union[MetaOapg.properties._id, str, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        testFilter: typing.Union['ClientFilterParams', schemas.Unset] = schemas.unset,
        datasetFilter: typing.Union[MetaOapg.properties.datasetFilter, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'UpdateModelTestRequest':
        return super().__new__(
            cls,
            *args,
            _id=_id,
            name=name,
            testFilter=testFilter,
            datasetFilter=datasetFilter,
            _configuration=_configuration,
        )

from openapi_client.model.client_filter_params import ClientFilterParams
from openapi_client.model.es_filter import ESFilter

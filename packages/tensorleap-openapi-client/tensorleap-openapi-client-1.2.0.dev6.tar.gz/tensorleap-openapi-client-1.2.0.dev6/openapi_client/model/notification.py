# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Notification(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "identifier",
            "organization",
            "isRead",
            "_id",
            "title",
            "user",
            "messageData",
        }
        
        class properties:
            _id = schemas.StrSchema
            organization = schemas.StrSchema
            user = schemas.StrSchema
            title = schemas.StrSchema
        
            @staticmethod
            def messageData() -> typing.Type['CustomMessageData']:
                return CustomMessageData
            identifier = schemas.StrSchema
            createdAt = schemas.DateTimeSchema
            isRead = schemas.BoolSchema
        
            @staticmethod
            def context() -> typing.Type['JobNotificationContext']:
                return JobNotificationContext
            __annotations__ = {
                "_id": _id,
                "organization": organization,
                "user": user,
                "title": title,
                "messageData": messageData,
                "identifier": identifier,
                "createdAt": createdAt,
                "isRead": isRead,
                "context": context,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    createdAt: MetaOapg.properties.createdAt
    identifier: MetaOapg.properties.identifier
    organization: MetaOapg.properties.organization
    isRead: MetaOapg.properties.isRead
    _id: MetaOapg.properties._id
    title: MetaOapg.properties.title
    user: MetaOapg.properties.user
    messageData: 'CustomMessageData'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRead"]) -> MetaOapg.properties.isRead: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messageData"]) -> 'CustomMessageData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context"]) -> 'JobNotificationContext': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["identifier"], typing_extensions.Literal["organization"], typing_extensions.Literal["isRead"], typing_extensions.Literal["_id"], typing_extensions.Literal["title"], typing_extensions.Literal["user"], typing_extensions.Literal["messageData"], typing_extensions.Literal["context"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRead"]) -> MetaOapg.properties.isRead: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messageData"]) -> 'CustomMessageData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> typing.Union['JobNotificationContext', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["identifier"], typing_extensions.Literal["organization"], typing_extensions.Literal["isRead"], typing_extensions.Literal["_id"], typing_extensions.Literal["title"], typing_extensions.Literal["user"], typing_extensions.Literal["messageData"], typing_extensions.Literal["context"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        identifier: typing.Union[MetaOapg.properties.identifier, str, ],
        organization: typing.Union[MetaOapg.properties.organization, str, ],
        isRead: typing.Union[MetaOapg.properties.isRead, bool, ],
        _id: typing.Union[MetaOapg.properties._id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        user: typing.Union[MetaOapg.properties.user, str, ],
        messageData: 'CustomMessageData',
        context: typing.Union['JobNotificationContext', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Notification':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            identifier=identifier,
            organization=organization,
            isRead=isRead,
            _id=_id,
            title=title,
            user=user,
            messageData=messageData,
            context=context,
            _configuration=_configuration,
        )

from openapi_client.model.custom_message_data import CustomMessageData
from openapi_client.model.job_notification_context import JobNotificationContext

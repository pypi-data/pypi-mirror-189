# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GetMachineTypesResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "defaultCpuType",
            "defaultGpuType",
            "options",
        }
        
        class properties:
            
            
            class options(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MachineTypeOption']:
                        return MachineTypeOption
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MachineTypeOption'], typing.List['MachineTypeOption']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'options':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MachineTypeOption':
                    return super().__getitem__(i)
            defaultCpuType = schemas.StrSchema
            defaultGpuType = schemas.StrSchema
            __annotations__ = {
                "options": options,
                "defaultCpuType": defaultCpuType,
                "defaultGpuType": defaultGpuType,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    defaultCpuType: MetaOapg.properties.defaultCpuType
    defaultGpuType: MetaOapg.properties.defaultGpuType
    options: MetaOapg.properties.options
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultCpuType"]) -> MetaOapg.properties.defaultCpuType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultGpuType"]) -> MetaOapg.properties.defaultGpuType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["defaultCpuType"], typing_extensions.Literal["defaultGpuType"], typing_extensions.Literal["options"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultCpuType"]) -> MetaOapg.properties.defaultCpuType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultGpuType"]) -> MetaOapg.properties.defaultGpuType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["defaultCpuType"], typing_extensions.Literal["defaultGpuType"], typing_extensions.Literal["options"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        defaultCpuType: typing.Union[MetaOapg.properties.defaultCpuType, str, ],
        defaultGpuType: typing.Union[MetaOapg.properties.defaultGpuType, str, ],
        options: typing.Union[MetaOapg.properties.options, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'GetMachineTypesResponse':
        return super().__new__(
            cls,
            *args,
            defaultCpuType=defaultCpuType,
            defaultGpuType=defaultGpuType,
            options=options,
            _configuration=_configuration,
        )

from openapi_client.model.machine_type_option import MachineTypeOption

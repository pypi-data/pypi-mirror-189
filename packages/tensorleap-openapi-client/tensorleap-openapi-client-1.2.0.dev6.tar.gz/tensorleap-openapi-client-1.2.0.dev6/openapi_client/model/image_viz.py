# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ImageViz(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "blob",
            "sub_title",
            "src",
            "guid",
            "title",
            "type",
        }
        
        class properties:
            type = schemas.StrSchema
            title = schemas.StrSchema
            sub_title = schemas.StrSchema
            guid = schemas.StrSchema
            src = schemas.StrSchema
            blob = schemas.StrSchema
            
            
            class labels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "sub_title": sub_title,
                "guid": guid,
                "src": src,
                "blob": blob,
                "labels": labels,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    blob: MetaOapg.properties.blob
    sub_title: MetaOapg.properties.sub_title
    src: MetaOapg.properties.src
    guid: MetaOapg.properties.guid
    title: MetaOapg.properties.title
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blob"]) -> MetaOapg.properties.blob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sub_title"]) -> MetaOapg.properties.sub_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["src"]) -> MetaOapg.properties.src: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["blob"], typing_extensions.Literal["sub_title"], typing_extensions.Literal["src"], typing_extensions.Literal["guid"], typing_extensions.Literal["title"], typing_extensions.Literal["type"], typing_extensions.Literal["labels"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blob"]) -> MetaOapg.properties.blob: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sub_title"]) -> MetaOapg.properties.sub_title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["src"]) -> MetaOapg.properties.src: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> typing.Union[MetaOapg.properties.labels, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["blob"], typing_extensions.Literal["sub_title"], typing_extensions.Literal["src"], typing_extensions.Literal["guid"], typing_extensions.Literal["title"], typing_extensions.Literal["type"], typing_extensions.Literal["labels"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        blob: typing.Union[MetaOapg.properties.blob, str, ],
        sub_title: typing.Union[MetaOapg.properties.sub_title, str, ],
        src: typing.Union[MetaOapg.properties.src, str, ],
        guid: typing.Union[MetaOapg.properties.guid, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        labels: typing.Union[MetaOapg.properties.labels, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ImageViz':
        return super().__new__(
            cls,
            *args,
            blob=blob,
            sub_title=sub_title,
            src=src,
            guid=guid,
            title=title,
            type=type,
            labels=labels,
            _configuration=_configuration,
        )

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ModelTestResultError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "queryStatus",
            "modelId",
        }
        
        class properties:
            modelId = schemas.StrSchema
            
            
            class queryStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "error": "ERROR",
                    }
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("error")
            __annotations__ = {
                "modelId": modelId,
                "queryStatus": queryStatus,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    queryStatus: MetaOapg.properties.queryStatus
    modelId: MetaOapg.properties.modelId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queryStatus"]) -> MetaOapg.properties.queryStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["queryStatus"], typing_extensions.Literal["modelId"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queryStatus"]) -> MetaOapg.properties.queryStatus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["queryStatus"], typing_extensions.Literal["modelId"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        queryStatus: typing.Union[MetaOapg.properties.queryStatus, str, ],
        modelId: typing.Union[MetaOapg.properties.modelId, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ModelTestResultError':
        return super().__new__(
            cls,
            *args,
            queryStatus=queryStatus,
            modelId=modelId,
            _configuration=_configuration,
        )

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class DatasetParseRequestParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "datasetId",
            "script",
        }
        
        class properties:
            datasetId = schemas.StrSchema
            script = schemas.StrSchema
            secretManagerId = schemas.StrSchema
            __annotations__ = {
                "datasetId": datasetId,
                "script": script,
                "secretManagerId": secretManagerId,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    datasetId: MetaOapg.properties.datasetId
    script: MetaOapg.properties.script
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["script"]) -> MetaOapg.properties.script: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secretManagerId"]) -> MetaOapg.properties.secretManagerId: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["datasetId"], typing_extensions.Literal["script"], typing_extensions.Literal["secretManagerId"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["script"]) -> MetaOapg.properties.script: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secretManagerId"]) -> typing.Union[MetaOapg.properties.secretManagerId, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["datasetId"], typing_extensions.Literal["script"], typing_extensions.Literal["secretManagerId"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        datasetId: typing.Union[MetaOapg.properties.datasetId, str, ],
        script: typing.Union[MetaOapg.properties.script, str, ],
        secretManagerId: typing.Union[MetaOapg.properties.secretManagerId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DatasetParseRequestParams':
        return super().__new__(
            cls,
            *args,
            datasetId=datasetId,
            script=script,
            secretManagerId=secretManagerId,
            _configuration=_configuration,
        )

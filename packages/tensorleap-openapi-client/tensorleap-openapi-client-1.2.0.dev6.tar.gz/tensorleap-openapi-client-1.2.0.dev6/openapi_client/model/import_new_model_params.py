# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ImportNewModelParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "modelName",
            "fileName",
            "model_type",
            "versionName",
            "projectId",
        }
        
        class properties:
            projectId = schemas.StrSchema
            fileName = schemas.StrSchema
            modelName = schemas.StrSchema
            versionName = schemas.StrSchema
        
            @staticmethod
            def model_type() -> typing.Type['ImportModelType']:
                return ImportModelType
            datasetId = schemas.StrSchema
            branchName = schemas.StrSchema
            transform_inputs = schemas.BoolSchema
            __annotations__ = {
                "projectId": projectId,
                "fileName": fileName,
                "modelName": modelName,
                "versionName": versionName,
                "model_type": model_type,
                "datasetId": datasetId,
                "branchName": branchName,
                "transform_inputs": transform_inputs,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    modelName: MetaOapg.properties.modelName
    fileName: MetaOapg.properties.fileName
    model_type: 'ImportModelType'
    versionName: MetaOapg.properties.versionName
    projectId: MetaOapg.properties.projectId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelName"]) -> MetaOapg.properties.modelName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileName"]) -> MetaOapg.properties.fileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_type"]) -> 'ImportModelType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionName"]) -> MetaOapg.properties.versionName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branchName"]) -> MetaOapg.properties.branchName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transform_inputs"]) -> MetaOapg.properties.transform_inputs: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["modelName"], typing_extensions.Literal["fileName"], typing_extensions.Literal["model_type"], typing_extensions.Literal["versionName"], typing_extensions.Literal["projectId"], typing_extensions.Literal["datasetId"], typing_extensions.Literal["branchName"], typing_extensions.Literal["transform_inputs"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelName"]) -> MetaOapg.properties.modelName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileName"]) -> MetaOapg.properties.fileName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_type"]) -> 'ImportModelType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionName"]) -> MetaOapg.properties.versionName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetId"]) -> typing.Union[MetaOapg.properties.datasetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branchName"]) -> typing.Union[MetaOapg.properties.branchName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transform_inputs"]) -> typing.Union[MetaOapg.properties.transform_inputs, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["modelName"], typing_extensions.Literal["fileName"], typing_extensions.Literal["model_type"], typing_extensions.Literal["versionName"], typing_extensions.Literal["projectId"], typing_extensions.Literal["datasetId"], typing_extensions.Literal["branchName"], typing_extensions.Literal["transform_inputs"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        modelName: typing.Union[MetaOapg.properties.modelName, str, ],
        fileName: typing.Union[MetaOapg.properties.fileName, str, ],
        model_type: 'ImportModelType',
        versionName: typing.Union[MetaOapg.properties.versionName, str, ],
        projectId: typing.Union[MetaOapg.properties.projectId, str, ],
        datasetId: typing.Union[MetaOapg.properties.datasetId, str, schemas.Unset] = schemas.unset,
        branchName: typing.Union[MetaOapg.properties.branchName, str, schemas.Unset] = schemas.unset,
        transform_inputs: typing.Union[MetaOapg.properties.transform_inputs, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ImportNewModelParams':
        return super().__new__(
            cls,
            *args,
            modelName=modelName,
            fileName=fileName,
            model_type=model_type,
            versionName=versionName,
            projectId=projectId,
            datasetId=datasetId,
            branchName=branchName,
            transform_inputs=transform_inputs,
            _configuration=_configuration,
        )

from openapi_client.model.import_model_type import ImportModelType

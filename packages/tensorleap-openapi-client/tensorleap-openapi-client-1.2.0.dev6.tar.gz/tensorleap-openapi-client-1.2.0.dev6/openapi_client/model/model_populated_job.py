# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ModelPopulatedJob(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "modelName",
            "organization",
            "hasNext",
            "_id",
            "parentModels",
            "type",
            "targetJob",
        }
        
        class properties:
            _id = schemas.StrSchema
            modelName = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['ModelType']:
                return ModelType
            createdAt = schemas.DateTimeSchema
        
            @staticmethod
            def targetJob() -> typing.Type['Job']:
                return Job
            
            
            class parentModels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parentModels':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            organization = schemas.StrSchema
            
            
            class hasNext(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hasNext':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            extId = schemas.StrSchema
            createdBy = schemas.StrSchema
            
            
            class hash(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hash':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def trainingParams() -> typing.Type['TrainingParams']:
                return TrainingParams
            
            
            class savedData(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelSaveData']:
                        return ModelSaveData
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelSaveData'], typing.List['ModelSaveData']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'savedData':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelSaveData':
                    return super().__getitem__(i)
            __annotations__ = {
                "_id": _id,
                "modelName": modelName,
                "type": type,
                "createdAt": createdAt,
                "targetJob": targetJob,
                "parentModels": parentModels,
                "organization": organization,
                "hasNext": hasNext,
                "extId": extId,
                "createdBy": createdBy,
                "hash": hash,
                "trainingParams": trainingParams,
                "savedData": savedData,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    createdAt: MetaOapg.properties.createdAt
    modelName: MetaOapg.properties.modelName
    organization: MetaOapg.properties.organization
    hasNext: MetaOapg.properties.hasNext
    _id: MetaOapg.properties._id
    parentModels: MetaOapg.properties.parentModels
    type: 'ModelType'
    targetJob: 'Job'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelName"]) -> MetaOapg.properties.modelName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasNext"]) -> MetaOapg.properties.hasNext: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentModels"]) -> MetaOapg.properties.parentModels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'ModelType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetJob"]) -> 'Job': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extId"]) -> MetaOapg.properties.extId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hash"]) -> MetaOapg.properties.hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trainingParams"]) -> 'TrainingParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["savedData"]) -> MetaOapg.properties.savedData: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["modelName"], typing_extensions.Literal["organization"], typing_extensions.Literal["hasNext"], typing_extensions.Literal["_id"], typing_extensions.Literal["parentModels"], typing_extensions.Literal["type"], typing_extensions.Literal["targetJob"], typing_extensions.Literal["extId"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["hash"], typing_extensions.Literal["trainingParams"], typing_extensions.Literal["savedData"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelName"]) -> MetaOapg.properties.modelName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasNext"]) -> MetaOapg.properties.hasNext: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentModels"]) -> MetaOapg.properties.parentModels: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'ModelType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetJob"]) -> 'Job': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extId"]) -> typing.Union[MetaOapg.properties.extId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hash"]) -> typing.Union[MetaOapg.properties.hash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trainingParams"]) -> typing.Union['TrainingParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["savedData"]) -> typing.Union[MetaOapg.properties.savedData, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["modelName"], typing_extensions.Literal["organization"], typing_extensions.Literal["hasNext"], typing_extensions.Literal["_id"], typing_extensions.Literal["parentModels"], typing_extensions.Literal["type"], typing_extensions.Literal["targetJob"], typing_extensions.Literal["extId"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["hash"], typing_extensions.Literal["trainingParams"], typing_extensions.Literal["savedData"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        modelName: typing.Union[MetaOapg.properties.modelName, str, ],
        organization: typing.Union[MetaOapg.properties.organization, str, ],
        hasNext: typing.Union[MetaOapg.properties.hasNext, None, str, ],
        _id: typing.Union[MetaOapg.properties._id, str, ],
        parentModels: typing.Union[MetaOapg.properties.parentModels, list, tuple, ],
        type: 'ModelType',
        targetJob: 'Job',
        extId: typing.Union[MetaOapg.properties.extId, str, schemas.Unset] = schemas.unset,
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, schemas.Unset] = schemas.unset,
        hash: typing.Union[MetaOapg.properties.hash, None, str, schemas.Unset] = schemas.unset,
        trainingParams: typing.Union['TrainingParams', schemas.Unset] = schemas.unset,
        savedData: typing.Union[MetaOapg.properties.savedData, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ModelPopulatedJob':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            modelName=modelName,
            organization=organization,
            hasNext=hasNext,
            _id=_id,
            parentModels=parentModels,
            type=type,
            targetJob=targetJob,
            extId=extId,
            createdBy=createdBy,
            hash=hash,
            trainingParams=trainingParams,
            savedData=savedData,
            _configuration=_configuration,
        )

from openapi_client.model.job import Job
from openapi_client.model.model_save_data import ModelSaveData
from openapi_client.model.model_type import ModelType
from openapi_client.model.training_params import TrainingParams

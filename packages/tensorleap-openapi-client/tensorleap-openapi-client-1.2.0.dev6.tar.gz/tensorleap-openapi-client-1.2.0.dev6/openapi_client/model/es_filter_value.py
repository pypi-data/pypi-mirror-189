# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ESFilterValue(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            gt = schemas.Float64Schema
            lt = schemas.Float64Schema
        
            @staticmethod
            def eq() -> typing.Type['NumberOrString']:
                return NumberOrString
            
            
            class lst(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NumberOrString']:
                        return NumberOrString
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NumberOrString'], typing.List['NumberOrString']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lst':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NumberOrString':
                    return super().__getitem__(i)
            __annotations__ = {
                "gt": gt,
                "lt": lt,
                "eq": eq,
                "lst": lst,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gt"]) -> MetaOapg.properties.gt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lt"]) -> MetaOapg.properties.lt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eq"]) -> 'NumberOrString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lst"]) -> MetaOapg.properties.lst: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gt"], typing_extensions.Literal["lt"], typing_extensions.Literal["eq"], typing_extensions.Literal["lst"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gt"]) -> typing.Union[MetaOapg.properties.gt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lt"]) -> typing.Union[MetaOapg.properties.lt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eq"]) -> typing.Union['NumberOrString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lst"]) -> typing.Union[MetaOapg.properties.lst, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gt"], typing_extensions.Literal["lt"], typing_extensions.Literal["eq"], typing_extensions.Literal["lst"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        gt: typing.Union[MetaOapg.properties.gt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lt: typing.Union[MetaOapg.properties.lt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        eq: typing.Union['NumberOrString', schemas.Unset] = schemas.unset,
        lst: typing.Union[MetaOapg.properties.lst, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ESFilterValue':
        return super().__new__(
            cls,
            *args,
            gt=gt,
            lt=lt,
            eq=eq,
            lst=lst,
            _configuration=_configuration,
        )

from openapi_client.model.number_or_string import NumberOrString

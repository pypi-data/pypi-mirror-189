# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GenericDataQueryParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "buckets",
            "modelExtIds",
            "aggregations",
        }
        
        class properties:
            
            
            class modelExtIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modelExtIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class aggregations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Aggregations']:
                        return Aggregations
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Aggregations'], typing.List['Aggregations']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'aggregations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Aggregations':
                    return super().__getitem__(i)
            
            
            class buckets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BucketAggregation']:
                        return BucketAggregation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BucketAggregation'], typing.List['BucketAggregation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'buckets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BucketAggregation':
                    return super().__getitem__(i)
            
            
            class filters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ESFilter']:
                        return ESFilter
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ESFilter'], typing.List['ESFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ESFilter':
                    return super().__getitem__(i)
            verticalSplit = schemas.StrSchema
            horizontalSplit = schemas.StrSchema
            lastEpochOnly = schemas.BoolSchema
            __annotations__ = {
                "modelExtIds": modelExtIds,
                "aggregations": aggregations,
                "buckets": buckets,
                "filters": filters,
                "verticalSplit": verticalSplit,
                "horizontalSplit": horizontalSplit,
                "lastEpochOnly": lastEpochOnly,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    buckets: MetaOapg.properties.buckets
    modelExtIds: MetaOapg.properties.modelExtIds
    aggregations: MetaOapg.properties.aggregations
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buckets"]) -> MetaOapg.properties.buckets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelExtIds"]) -> MetaOapg.properties.modelExtIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregations"]) -> MetaOapg.properties.aggregations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filters"]) -> MetaOapg.properties.filters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verticalSplit"]) -> MetaOapg.properties.verticalSplit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["horizontalSplit"]) -> MetaOapg.properties.horizontalSplit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastEpochOnly"]) -> MetaOapg.properties.lastEpochOnly: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["buckets"], typing_extensions.Literal["modelExtIds"], typing_extensions.Literal["aggregations"], typing_extensions.Literal["filters"], typing_extensions.Literal["verticalSplit"], typing_extensions.Literal["horizontalSplit"], typing_extensions.Literal["lastEpochOnly"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buckets"]) -> MetaOapg.properties.buckets: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelExtIds"]) -> MetaOapg.properties.modelExtIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregations"]) -> MetaOapg.properties.aggregations: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> typing.Union[MetaOapg.properties.filters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verticalSplit"]) -> typing.Union[MetaOapg.properties.verticalSplit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["horizontalSplit"]) -> typing.Union[MetaOapg.properties.horizontalSplit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastEpochOnly"]) -> typing.Union[MetaOapg.properties.lastEpochOnly, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["buckets"], typing_extensions.Literal["modelExtIds"], typing_extensions.Literal["aggregations"], typing_extensions.Literal["filters"], typing_extensions.Literal["verticalSplit"], typing_extensions.Literal["horizontalSplit"], typing_extensions.Literal["lastEpochOnly"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        buckets: typing.Union[MetaOapg.properties.buckets, list, tuple, ],
        modelExtIds: typing.Union[MetaOapg.properties.modelExtIds, list, tuple, ],
        aggregations: typing.Union[MetaOapg.properties.aggregations, list, tuple, ],
        filters: typing.Union[MetaOapg.properties.filters, list, tuple, schemas.Unset] = schemas.unset,
        verticalSplit: typing.Union[MetaOapg.properties.verticalSplit, str, schemas.Unset] = schemas.unset,
        horizontalSplit: typing.Union[MetaOapg.properties.horizontalSplit, str, schemas.Unset] = schemas.unset,
        lastEpochOnly: typing.Union[MetaOapg.properties.lastEpochOnly, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'GenericDataQueryParams':
        return super().__new__(
            cls,
            *args,
            buckets=buckets,
            modelExtIds=modelExtIds,
            aggregations=aggregations,
            filters=filters,
            verticalSplit=verticalSplit,
            horizontalSplit=horizontalSplit,
            lastEpochOnly=lastEpochOnly,
            _configuration=_configuration,
        )

from openapi_client.model.aggregations import Aggregations
from openapi_client.model.bucket_aggregation import BucketAggregation
from openapi_client.model.es_filter import ESFilter

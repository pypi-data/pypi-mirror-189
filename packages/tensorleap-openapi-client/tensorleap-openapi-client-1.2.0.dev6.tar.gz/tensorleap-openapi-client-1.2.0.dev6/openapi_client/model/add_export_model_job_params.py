# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AddExportModelJobParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "fromEpoch",
            "pruneModel",
            "exportModelType",
            "targetModelId",
            "title",
        }
        
        class properties:
            targetModelId = schemas.StrSchema
        
            @staticmethod
            def exportModelType() -> typing.Type['ExportModelTypeEnum']:
                return ExportModelTypeEnum
            title = schemas.StrSchema
            pruneModel = schemas.BoolSchema
            fromEpoch = schemas.Float64Schema
            __annotations__ = {
                "targetModelId": targetModelId,
                "exportModelType": exportModelType,
                "title": title,
                "pruneModel": pruneModel,
                "fromEpoch": fromEpoch,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    fromEpoch: MetaOapg.properties.fromEpoch
    pruneModel: MetaOapg.properties.pruneModel
    exportModelType: 'ExportModelTypeEnum'
    targetModelId: MetaOapg.properties.targetModelId
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromEpoch"]) -> MetaOapg.properties.fromEpoch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pruneModel"]) -> MetaOapg.properties.pruneModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportModelType"]) -> 'ExportModelTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetModelId"]) -> MetaOapg.properties.targetModelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fromEpoch"], typing_extensions.Literal["pruneModel"], typing_extensions.Literal["exportModelType"], typing_extensions.Literal["targetModelId"], typing_extensions.Literal["title"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromEpoch"]) -> MetaOapg.properties.fromEpoch: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pruneModel"]) -> MetaOapg.properties.pruneModel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportModelType"]) -> 'ExportModelTypeEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetModelId"]) -> MetaOapg.properties.targetModelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fromEpoch"], typing_extensions.Literal["pruneModel"], typing_extensions.Literal["exportModelType"], typing_extensions.Literal["targetModelId"], typing_extensions.Literal["title"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fromEpoch: typing.Union[MetaOapg.properties.fromEpoch, decimal.Decimal, int, float, ],
        pruneModel: typing.Union[MetaOapg.properties.pruneModel, bool, ],
        exportModelType: 'ExportModelTypeEnum',
        targetModelId: typing.Union[MetaOapg.properties.targetModelId, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AddExportModelJobParams':
        return super().__new__(
            cls,
            *args,
            fromEpoch=fromEpoch,
            pruneModel=pruneModel,
            exportModelType=exportModelType,
            targetModelId=targetModelId,
            title=title,
            _configuration=_configuration,
        )

from openapi_client.model.export_model_type_enum import ExportModelTypeEnum

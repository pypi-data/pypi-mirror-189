# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SlimVersion(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "models",
            "notes",
            "createdBy",
            "branchName",
            "project",
            "_id",
            "isFavourite",
            "tags",
        }
        
        class properties:
            _id = schemas.StrSchema
            createdBy = schemas.StrSchema
            project = schemas.StrSchema
            branchName = schemas.StrSchema
            tags = schemas.StrSchema
            createdAt = schemas.DateTimeSchema
            notes = schemas.StrSchema
            isFavourite = schemas.BoolSchema
            
            
            class models(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Model']:
                        return Model
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Model'], typing.List['Model']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'models':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Model':
                    return super().__getitem__(i)
            
            
            class hash(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hash':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "_id": _id,
                "createdBy": createdBy,
                "project": project,
                "branchName": branchName,
                "tags": tags,
                "createdAt": createdAt,
                "notes": notes,
                "isFavourite": isFavourite,
                "models": models,
                "hash": hash,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    createdAt: MetaOapg.properties.createdAt
    models: MetaOapg.properties.models
    notes: MetaOapg.properties.notes
    createdBy: MetaOapg.properties.createdBy
    branchName: MetaOapg.properties.branchName
    project: MetaOapg.properties.project
    _id: MetaOapg.properties._id
    isFavourite: MetaOapg.properties.isFavourite
    tags: MetaOapg.properties.tags
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["models"]) -> MetaOapg.properties.models: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branchName"]) -> MetaOapg.properties.branchName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isFavourite"]) -> MetaOapg.properties.isFavourite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hash"]) -> MetaOapg.properties.hash: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["models"], typing_extensions.Literal["notes"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["branchName"], typing_extensions.Literal["project"], typing_extensions.Literal["_id"], typing_extensions.Literal["isFavourite"], typing_extensions.Literal["tags"], typing_extensions.Literal["hash"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["models"]) -> MetaOapg.properties.models: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branchName"]) -> MetaOapg.properties.branchName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isFavourite"]) -> MetaOapg.properties.isFavourite: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hash"]) -> typing.Union[MetaOapg.properties.hash, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["models"], typing_extensions.Literal["notes"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["branchName"], typing_extensions.Literal["project"], typing_extensions.Literal["_id"], typing_extensions.Literal["isFavourite"], typing_extensions.Literal["tags"], typing_extensions.Literal["hash"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        models: typing.Union[MetaOapg.properties.models, list, tuple, ],
        notes: typing.Union[MetaOapg.properties.notes, str, ],
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, ],
        branchName: typing.Union[MetaOapg.properties.branchName, str, ],
        project: typing.Union[MetaOapg.properties.project, str, ],
        _id: typing.Union[MetaOapg.properties._id, str, ],
        isFavourite: typing.Union[MetaOapg.properties.isFavourite, bool, ],
        tags: typing.Union[MetaOapg.properties.tags, str, ],
        hash: typing.Union[MetaOapg.properties.hash, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SlimVersion':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            models=models,
            notes=notes,
            createdBy=createdBy,
            branchName=branchName,
            project=project,
            _id=_id,
            isFavourite=isFavourite,
            tags=tags,
            hash=hash,
            _configuration=_configuration,
        )

from openapi_client.model.model import Model

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ImportDemoProjectResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "importedModelId",
            "importedVersionId",
            "importedProjectId",
        }
        
        class properties:
            importedProjectId = schemas.StrSchema
            importedVersionId = schemas.StrSchema
            importedModelId = schemas.StrSchema
            __annotations__ = {
                "importedProjectId": importedProjectId,
                "importedVersionId": importedVersionId,
                "importedModelId": importedModelId,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    importedModelId: MetaOapg.properties.importedModelId
    importedVersionId: MetaOapg.properties.importedVersionId
    importedProjectId: MetaOapg.properties.importedProjectId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importedModelId"]) -> MetaOapg.properties.importedModelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importedVersionId"]) -> MetaOapg.properties.importedVersionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["importedProjectId"]) -> MetaOapg.properties.importedProjectId: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["importedModelId"], typing_extensions.Literal["importedVersionId"], typing_extensions.Literal["importedProjectId"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importedModelId"]) -> MetaOapg.properties.importedModelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importedVersionId"]) -> MetaOapg.properties.importedVersionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["importedProjectId"]) -> MetaOapg.properties.importedProjectId: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["importedModelId"], typing_extensions.Literal["importedVersionId"], typing_extensions.Literal["importedProjectId"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        importedModelId: typing.Union[MetaOapg.properties.importedModelId, str, ],
        importedVersionId: typing.Union[MetaOapg.properties.importedVersionId, str, ],
        importedProjectId: typing.Union[MetaOapg.properties.importedProjectId, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ImportDemoProjectResponse':
        return super().__new__(
            cls,
            *args,
            importedModelId=importedModelId,
            importedVersionId=importedVersionId,
            importedProjectId=importedProjectId,
            _configuration=_configuration,
        )

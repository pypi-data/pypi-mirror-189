# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ClusterInsight(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "filter",
            "avg_loss",
            "n_samples",
            "type",
        }
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['ScatterInsightType']:
                return ScatterInsightType
        
            @staticmethod
            def filter() -> typing.Type['ScatterFilter']:
                return ScatterFilter
            n_samples = schemas.Float64Schema
            avg_loss = schemas.Float64Schema
            __annotations__ = {
                "type": type,
                "filter": filter,
                "n_samples": n_samples,
                "avg_loss": avg_loss,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    filter: 'ScatterFilter'
    avg_loss: MetaOapg.properties.avg_loss
    n_samples: MetaOapg.properties.n_samples
    type: 'ScatterInsightType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> 'ScatterFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avg_loss"]) -> MetaOapg.properties.avg_loss: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["n_samples"]) -> MetaOapg.properties.n_samples: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'ScatterInsightType': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["filter"], typing_extensions.Literal["avg_loss"], typing_extensions.Literal["n_samples"], typing_extensions.Literal["type"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> 'ScatterFilter': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avg_loss"]) -> MetaOapg.properties.avg_loss: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["n_samples"]) -> MetaOapg.properties.n_samples: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'ScatterInsightType': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["filter"], typing_extensions.Literal["avg_loss"], typing_extensions.Literal["n_samples"], typing_extensions.Literal["type"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        filter: 'ScatterFilter',
        avg_loss: typing.Union[MetaOapg.properties.avg_loss, decimal.Decimal, int, float, ],
        n_samples: typing.Union[MetaOapg.properties.n_samples, decimal.Decimal, int, float, ],
        type: 'ScatterInsightType',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ClusterInsight':
        return super().__new__(
            cls,
            *args,
            filter=filter,
            avg_loss=avg_loss,
            n_samples=n_samples,
            type=type,
            _configuration=_configuration,
        )

from openapi_client.model.scatter_filter import ScatterFilter
from openapi_client.model.scatter_insight_type import ScatterInsightType

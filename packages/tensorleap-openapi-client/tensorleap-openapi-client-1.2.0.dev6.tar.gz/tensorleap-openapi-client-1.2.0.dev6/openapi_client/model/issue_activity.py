# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class IssueActivity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "actionType",
            "createdAt",
            "createdBy",
            "action",
            "updatedAt",
        }
        
        class properties:
            createdAt = schemas.DateTimeSchema
            updatedAt = schemas.DateTimeSchema
            createdBy = schemas.StrSchema
        
            @staticmethod
            def actionType() -> typing.Type['IssueActionType']:
                return IssueActionType
        
            @staticmethod
            def action() -> typing.Type['IssueAction']:
                return IssueAction
            __annotations__ = {
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "createdBy": createdBy,
                "actionType": actionType,
                "action": action,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    actionType: 'IssueActionType'
    createdAt: MetaOapg.properties.createdAt
    createdBy: MetaOapg.properties.createdBy
    action: 'IssueAction'
    updatedAt: MetaOapg.properties.updatedAt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionType"]) -> 'IssueActionType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> 'IssueAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["actionType"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["action"], typing_extensions.Literal["updatedAt"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionType"]) -> 'IssueActionType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> 'IssueAction': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["actionType"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["action"], typing_extensions.Literal["updatedAt"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        actionType: 'IssueActionType',
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, ],
        action: 'IssueAction',
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IssueActivity':
        return super().__new__(
            cls,
            *args,
            actionType=actionType,
            createdAt=createdAt,
            createdBy=createdBy,
            action=action,
            updatedAt=updatedAt,
            _configuration=_configuration,
        )

from openapi_client.model.issue_action import IssueAction
from openapi_client.model.issue_action_type import IssueActionType

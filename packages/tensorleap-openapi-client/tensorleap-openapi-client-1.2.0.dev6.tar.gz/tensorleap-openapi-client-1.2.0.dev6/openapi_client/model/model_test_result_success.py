# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ModelTestResultSuccess(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "queryStatus",
            "modelId",
            "succefullSamples",
            "testSucceeded",
            "allSamples",
            "aggregation",
            "epoch",
        }
        
        class properties:
            testSucceeded = schemas.BoolSchema
            modelId = schemas.StrSchema
            aggregation = schemas.Float64Schema
            succefullSamples = schemas.Float64Schema
            allSamples = schemas.Float64Schema
            epoch = schemas.Float64Schema
            
            
            class queryStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "success": "SUCCESS",
                    }
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("success")
            __annotations__ = {
                "testSucceeded": testSucceeded,
                "modelId": modelId,
                "aggregation": aggregation,
                "succefullSamples": succefullSamples,
                "allSamples": allSamples,
                "epoch": epoch,
                "queryStatus": queryStatus,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    queryStatus: MetaOapg.properties.queryStatus
    modelId: MetaOapg.properties.modelId
    succefullSamples: MetaOapg.properties.succefullSamples
    testSucceeded: MetaOapg.properties.testSucceeded
    allSamples: MetaOapg.properties.allSamples
    aggregation: MetaOapg.properties.aggregation
    epoch: MetaOapg.properties.epoch
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queryStatus"]) -> MetaOapg.properties.queryStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["succefullSamples"]) -> MetaOapg.properties.succefullSamples: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testSucceeded"]) -> MetaOapg.properties.testSucceeded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allSamples"]) -> MetaOapg.properties.allSamples: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregation"]) -> MetaOapg.properties.aggregation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["epoch"]) -> MetaOapg.properties.epoch: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["queryStatus"], typing_extensions.Literal["modelId"], typing_extensions.Literal["succefullSamples"], typing_extensions.Literal["testSucceeded"], typing_extensions.Literal["allSamples"], typing_extensions.Literal["aggregation"], typing_extensions.Literal["epoch"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queryStatus"]) -> MetaOapg.properties.queryStatus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["succefullSamples"]) -> MetaOapg.properties.succefullSamples: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testSucceeded"]) -> MetaOapg.properties.testSucceeded: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allSamples"]) -> MetaOapg.properties.allSamples: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregation"]) -> MetaOapg.properties.aggregation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["epoch"]) -> MetaOapg.properties.epoch: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["queryStatus"], typing_extensions.Literal["modelId"], typing_extensions.Literal["succefullSamples"], typing_extensions.Literal["testSucceeded"], typing_extensions.Literal["allSamples"], typing_extensions.Literal["aggregation"], typing_extensions.Literal["epoch"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        queryStatus: typing.Union[MetaOapg.properties.queryStatus, str, ],
        modelId: typing.Union[MetaOapg.properties.modelId, str, ],
        succefullSamples: typing.Union[MetaOapg.properties.succefullSamples, decimal.Decimal, int, float, ],
        testSucceeded: typing.Union[MetaOapg.properties.testSucceeded, bool, ],
        allSamples: typing.Union[MetaOapg.properties.allSamples, decimal.Decimal, int, float, ],
        aggregation: typing.Union[MetaOapg.properties.aggregation, decimal.Decimal, int, float, ],
        epoch: typing.Union[MetaOapg.properties.epoch, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ModelTestResultSuccess':
        return super().__new__(
            cls,
            *args,
            queryStatus=queryStatus,
            modelId=modelId,
            succefullSamples=succefullSamples,
            testSucceeded=testSucceeded,
            allSamples=allSamples,
            aggregation=aggregation,
            epoch=epoch,
            _configuration=_configuration,
        )

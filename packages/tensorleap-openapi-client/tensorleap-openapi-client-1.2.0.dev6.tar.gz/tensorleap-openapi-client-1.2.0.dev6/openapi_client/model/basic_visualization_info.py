# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class BasicVisualizationInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "job_type",
            "analyze_type",
            "guid",
        }
        
        class properties:
        
            @staticmethod
            def job_type() -> typing.Type['JobTypeEnum']:
                return JobTypeEnum
        
            @staticmethod
            def analyze_type() -> typing.Type['AnalyzeTypeEnum']:
                return AnalyzeTypeEnum
            guid = schemas.StrSchema
            __annotations__ = {
                "job_type": job_type,
                "analyze_type": analyze_type,
                "guid": guid,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    job_type: 'JobTypeEnum'
    analyze_type: 'AnalyzeTypeEnum'
    guid: MetaOapg.properties.guid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_type"]) -> 'JobTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyze_type"]) -> 'AnalyzeTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["job_type"], typing_extensions.Literal["analyze_type"], typing_extensions.Literal["guid"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_type"]) -> 'JobTypeEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyze_type"]) -> 'AnalyzeTypeEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job_type"], typing_extensions.Literal["analyze_type"], typing_extensions.Literal["guid"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        job_type: 'JobTypeEnum',
        analyze_type: 'AnalyzeTypeEnum',
        guid: typing.Union[MetaOapg.properties.guid, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'BasicVisualizationInfo':
        return super().__new__(
            cls,
            *args,
            job_type=job_type,
            analyze_type=analyze_type,
            guid=guid,
            _configuration=_configuration,
        )

from openapi_client.model.analyze_type_enum import AnalyzeTypeEnum
from openapi_client.model.job_type_enum import JobTypeEnum

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class FeatureImportanceItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "fi",
            "label",
        }
        
        class properties:
            label = schemas.StrSchema
        
            @staticmethod
            def fi() -> typing.Type['VisData']:
                return VisData
            ground_truth_name = schemas.StrSchema
            __annotations__ = {
                "label": label,
                "fi": fi,
                "ground_truth_name": ground_truth_name,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    fi: 'VisData'
    label: MetaOapg.properties.label
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fi"]) -> 'VisData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ground_truth_name"]) -> MetaOapg.properties.ground_truth_name: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fi"], typing_extensions.Literal["label"], typing_extensions.Literal["ground_truth_name"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fi"]) -> 'VisData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ground_truth_name"]) -> typing.Union[MetaOapg.properties.ground_truth_name, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fi"], typing_extensions.Literal["label"], typing_extensions.Literal["ground_truth_name"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fi: 'VisData',
        label: typing.Union[MetaOapg.properties.label, str, ],
        ground_truth_name: typing.Union[MetaOapg.properties.ground_truth_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FeatureImportanceItem':
        return super().__new__(
            cls,
            *args,
            fi=fi,
            label=label,
            ground_truth_name=ground_truth_name,
            _configuration=_configuration,
        )

from openapi_client.model.vis_data import VisData

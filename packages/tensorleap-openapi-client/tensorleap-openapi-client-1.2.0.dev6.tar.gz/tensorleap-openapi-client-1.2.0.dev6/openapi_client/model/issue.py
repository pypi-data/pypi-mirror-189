# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Issue(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "organizationId",
            "createdAt",
            "createdBy",
            "activities",
            "index",
            "_id",
            "title",
            "branch",
            "projectId",
            "status",
            "tags",
            "updatedAt",
        }
        
        class properties:
            _id = schemas.StrSchema
            index = schemas.Float64Schema
            createdAt = schemas.DateTimeSchema
            createdBy = schemas.StrSchema
            updatedAt = schemas.DateTimeSchema
            organizationId = schemas.StrSchema
            projectId = schemas.StrSchema
            title = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['IssueStatus']:
                return IssueStatus
            branch = schemas.StrSchema
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class activities(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IssueActivity']:
                        return IssueActivity
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['IssueActivity'], typing.List['IssueActivity']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'activities':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IssueActivity':
                    return super().__getitem__(i)
            assignment = schemas.StrSchema
            __annotations__ = {
                "_id": _id,
                "index": index,
                "createdAt": createdAt,
                "createdBy": createdBy,
                "updatedAt": updatedAt,
                "organizationId": organizationId,
                "projectId": projectId,
                "title": title,
                "status": status,
                "branch": branch,
                "tags": tags,
                "activities": activities,
                "assignment": assignment,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    organizationId: MetaOapg.properties.organizationId
    createdAt: MetaOapg.properties.createdAt
    createdBy: MetaOapg.properties.createdBy
    activities: MetaOapg.properties.activities
    index: MetaOapg.properties.index
    _id: MetaOapg.properties._id
    title: MetaOapg.properties.title
    branch: MetaOapg.properties.branch
    projectId: MetaOapg.properties.projectId
    status: 'IssueStatus'
    tags: MetaOapg.properties.tags
    updatedAt: MetaOapg.properties.updatedAt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationId"]) -> MetaOapg.properties.organizationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activities"]) -> MetaOapg.properties.activities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["index"]) -> MetaOapg.properties.index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch"]) -> MetaOapg.properties.branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'IssueStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignment"]) -> MetaOapg.properties.assignment: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["organizationId"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["activities"], typing_extensions.Literal["index"], typing_extensions.Literal["_id"], typing_extensions.Literal["title"], typing_extensions.Literal["branch"], typing_extensions.Literal["projectId"], typing_extensions.Literal["status"], typing_extensions.Literal["tags"], typing_extensions.Literal["updatedAt"], typing_extensions.Literal["assignment"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationId"]) -> MetaOapg.properties.organizationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activities"]) -> MetaOapg.properties.activities: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["index"]) -> MetaOapg.properties.index: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch"]) -> MetaOapg.properties.branch: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'IssueStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignment"]) -> typing.Union[MetaOapg.properties.assignment, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["organizationId"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["activities"], typing_extensions.Literal["index"], typing_extensions.Literal["_id"], typing_extensions.Literal["title"], typing_extensions.Literal["branch"], typing_extensions.Literal["projectId"], typing_extensions.Literal["status"], typing_extensions.Literal["tags"], typing_extensions.Literal["updatedAt"], typing_extensions.Literal["assignment"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        organizationId: typing.Union[MetaOapg.properties.organizationId, str, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, ],
        activities: typing.Union[MetaOapg.properties.activities, list, tuple, ],
        index: typing.Union[MetaOapg.properties.index, decimal.Decimal, int, float, ],
        _id: typing.Union[MetaOapg.properties._id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        branch: typing.Union[MetaOapg.properties.branch, str, ],
        projectId: typing.Union[MetaOapg.properties.projectId, str, ],
        status: 'IssueStatus',
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, ],
        assignment: typing.Union[MetaOapg.properties.assignment, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Issue':
        return super().__new__(
            cls,
            *args,
            organizationId=organizationId,
            createdAt=createdAt,
            createdBy=createdBy,
            activities=activities,
            index=index,
            _id=_id,
            title=title,
            branch=branch,
            projectId=projectId,
            status=status,
            tags=tags,
            updatedAt=updatedAt,
            assignment=assignment,
            _configuration=_configuration,
        )

from openapi_client.model.issue_activity import IssueActivity
from openapi_client.model.issue_status import IssueStatus

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MaskImageScatterLabel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "mask_blob",
            "blob",
            "data",
            "src",
            "mask_src",
            "type",
            "labels",
        }
        
        class properties:
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.Float64Schema
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            src = schemas.StrSchema
            blob = schemas.StrSchema
            type = schemas.StrSchema
            mask_src = schemas.StrSchema
            mask_blob = schemas.StrSchema
            
            
            class labels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            input_name = schemas.StrSchema
            __annotations__ = {
                "data": data,
                "src": src,
                "blob": blob,
                "type": type,
                "mask_src": mask_src,
                "mask_blob": mask_blob,
                "labels": labels,
                "input_name": input_name,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    mask_blob: MetaOapg.properties.mask_blob
    blob: MetaOapg.properties.blob
    data: MetaOapg.properties.data
    src: MetaOapg.properties.src
    mask_src: MetaOapg.properties.mask_src
    type: MetaOapg.properties.type
    labels: MetaOapg.properties.labels
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mask_blob"]) -> MetaOapg.properties.mask_blob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blob"]) -> MetaOapg.properties.blob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["src"]) -> MetaOapg.properties.src: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mask_src"]) -> MetaOapg.properties.mask_src: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_name"]) -> MetaOapg.properties.input_name: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mask_blob"], typing_extensions.Literal["blob"], typing_extensions.Literal["data"], typing_extensions.Literal["src"], typing_extensions.Literal["mask_src"], typing_extensions.Literal["type"], typing_extensions.Literal["labels"], typing_extensions.Literal["input_name"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mask_blob"]) -> MetaOapg.properties.mask_blob: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blob"]) -> MetaOapg.properties.blob: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["src"]) -> MetaOapg.properties.src: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mask_src"]) -> MetaOapg.properties.mask_src: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_name"]) -> typing.Union[MetaOapg.properties.input_name, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mask_blob"], typing_extensions.Literal["blob"], typing_extensions.Literal["data"], typing_extensions.Literal["src"], typing_extensions.Literal["mask_src"], typing_extensions.Literal["type"], typing_extensions.Literal["labels"], typing_extensions.Literal["input_name"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        mask_blob: typing.Union[MetaOapg.properties.mask_blob, str, ],
        blob: typing.Union[MetaOapg.properties.blob, str, ],
        data: typing.Union[MetaOapg.properties.data, list, tuple, ],
        src: typing.Union[MetaOapg.properties.src, str, ],
        mask_src: typing.Union[MetaOapg.properties.mask_src, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        labels: typing.Union[MetaOapg.properties.labels, list, tuple, ],
        input_name: typing.Union[MetaOapg.properties.input_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MaskImageScatterLabel':
        return super().__new__(
            cls,
            *args,
            mask_blob=mask_blob,
            blob=blob,
            data=data,
            src=src,
            mask_src=mask_src,
            type=type,
            labels=labels,
            input_name=input_name,
            _configuration=_configuration,
        )

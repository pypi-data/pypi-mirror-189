# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ScatterViz(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "sub_title",
            "guid",
            "title",
            "type",
            "scatter_data",
        }
        
        class properties:
            type = schemas.StrSchema
            title = schemas.StrSchema
            sub_title = schemas.StrSchema
            guid = schemas.StrSchema
        
            @staticmethod
            def scatter_data() -> typing.Type['ScatterVizDataState']:
                return ScatterVizDataState
            __annotations__ = {
                "type": type,
                "title": title,
                "sub_title": sub_title,
                "guid": guid,
                "scatter_data": scatter_data,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    sub_title: MetaOapg.properties.sub_title
    guid: MetaOapg.properties.guid
    title: MetaOapg.properties.title
    type: MetaOapg.properties.type
    scatter_data: 'ScatterVizDataState'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sub_title"]) -> MetaOapg.properties.sub_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scatter_data"]) -> 'ScatterVizDataState': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sub_title"], typing_extensions.Literal["guid"], typing_extensions.Literal["title"], typing_extensions.Literal["type"], typing_extensions.Literal["scatter_data"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sub_title"]) -> MetaOapg.properties.sub_title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scatter_data"]) -> 'ScatterVizDataState': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sub_title"], typing_extensions.Literal["guid"], typing_extensions.Literal["title"], typing_extensions.Literal["type"], typing_extensions.Literal["scatter_data"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sub_title: typing.Union[MetaOapg.properties.sub_title, str, ],
        guid: typing.Union[MetaOapg.properties.guid, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        scatter_data: 'ScatterVizDataState',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ScatterViz':
        return super().__new__(
            cls,
            *args,
            sub_title=sub_title,
            guid=guid,
            title=title,
            type=type,
            scatter_data=scatter_data,
            _configuration=_configuration,
        )

from openapi_client.model.scatter_viz_data_state import ScatterVizDataState

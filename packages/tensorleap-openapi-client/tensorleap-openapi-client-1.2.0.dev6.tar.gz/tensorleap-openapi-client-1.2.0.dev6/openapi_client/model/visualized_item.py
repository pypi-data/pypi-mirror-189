# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class VisualizedItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "connection_name",
            "data",
            "encoder_names",
            "visualizer_name",
        }
        
        class properties:
            visualizer_name = schemas.StrSchema
        
            @staticmethod
            def data() -> typing.Type['VisData']:
                return VisData
            
            
            class encoder_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'encoder_names':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            connection_name = schemas.StrSchema
            __annotations__ = {
                "visualizer_name": visualizer_name,
                "data": data,
                "encoder_names": encoder_names,
                "connection_name": connection_name,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    connection_name: MetaOapg.properties.connection_name
    data: 'VisData'
    encoder_names: MetaOapg.properties.encoder_names
    visualizer_name: MetaOapg.properties.visualizer_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_name"]) -> MetaOapg.properties.connection_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'VisData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encoder_names"]) -> MetaOapg.properties.encoder_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visualizer_name"]) -> MetaOapg.properties.visualizer_name: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["connection_name"], typing_extensions.Literal["data"], typing_extensions.Literal["encoder_names"], typing_extensions.Literal["visualizer_name"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_name"]) -> MetaOapg.properties.connection_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> 'VisData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encoder_names"]) -> MetaOapg.properties.encoder_names: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visualizer_name"]) -> MetaOapg.properties.visualizer_name: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connection_name"], typing_extensions.Literal["data"], typing_extensions.Literal["encoder_names"], typing_extensions.Literal["visualizer_name"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        connection_name: typing.Union[MetaOapg.properties.connection_name, str, ],
        data: 'VisData',
        encoder_names: typing.Union[MetaOapg.properties.encoder_names, list, tuple, ],
        visualizer_name: typing.Union[MetaOapg.properties.visualizer_name, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'VisualizedItem':
        return super().__new__(
            cls,
            *args,
            connection_name=connection_name,
            data=data,
            encoder_names=encoder_names,
            visualizer_name=visualizer_name,
            _configuration=_configuration,
        )

from openapi_client.model.vis_data import VisData

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Visualization(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "jobId",
            "data",
            "modelId",
            "visualizationUuid",
            "epoch",
            "_id",
            "type",
        }
        
        class properties:
            _id = schemas.StrSchema
            jobId = schemas.StrSchema
            modelId = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['AnalyzeTypeEnum']:
                return AnalyzeTypeEnum
            createdAt = schemas.DateTimeSchema
            epoch = schemas.Float64Schema
            visualizationUuid = schemas.StrSchema
        
            @staticmethod
            def data() -> typing.Type['VisualizationResponse']:
                return VisualizationResponse
        
            @staticmethod
            def jobParms() -> typing.Type['JobParams']:
                return JobParams
            sampleId = schemas.Float64Schema
        
            @staticmethod
            def layout() -> typing.Type['SizedLayout']:
                return SizedLayout
            __annotations__ = {
                "_id": _id,
                "jobId": jobId,
                "modelId": modelId,
                "type": type,
                "createdAt": createdAt,
                "epoch": epoch,
                "visualizationUuid": visualizationUuid,
                "data": data,
                "jobParms": jobParms,
                "sampleId": sampleId,
                "layout": layout,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    createdAt: MetaOapg.properties.createdAt
    jobId: MetaOapg.properties.jobId
    data: 'VisualizationResponse'
    modelId: MetaOapg.properties.modelId
    visualizationUuid: MetaOapg.properties.visualizationUuid
    epoch: MetaOapg.properties.epoch
    _id: MetaOapg.properties._id
    type: 'AnalyzeTypeEnum'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'VisualizationResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visualizationUuid"]) -> MetaOapg.properties.visualizationUuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["epoch"]) -> MetaOapg.properties.epoch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'AnalyzeTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobParms"]) -> 'JobParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampleId"]) -> MetaOapg.properties.sampleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layout"]) -> 'SizedLayout': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["jobId"], typing_extensions.Literal["data"], typing_extensions.Literal["modelId"], typing_extensions.Literal["visualizationUuid"], typing_extensions.Literal["epoch"], typing_extensions.Literal["_id"], typing_extensions.Literal["type"], typing_extensions.Literal["jobParms"], typing_extensions.Literal["sampleId"], typing_extensions.Literal["layout"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> 'VisualizationResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visualizationUuid"]) -> MetaOapg.properties.visualizationUuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["epoch"]) -> MetaOapg.properties.epoch: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'AnalyzeTypeEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobParms"]) -> typing.Union['JobParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampleId"]) -> typing.Union[MetaOapg.properties.sampleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layout"]) -> typing.Union['SizedLayout', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["jobId"], typing_extensions.Literal["data"], typing_extensions.Literal["modelId"], typing_extensions.Literal["visualizationUuid"], typing_extensions.Literal["epoch"], typing_extensions.Literal["_id"], typing_extensions.Literal["type"], typing_extensions.Literal["jobParms"], typing_extensions.Literal["sampleId"], typing_extensions.Literal["layout"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        jobId: typing.Union[MetaOapg.properties.jobId, str, ],
        data: 'VisualizationResponse',
        modelId: typing.Union[MetaOapg.properties.modelId, str, ],
        visualizationUuid: typing.Union[MetaOapg.properties.visualizationUuid, str, ],
        epoch: typing.Union[MetaOapg.properties.epoch, decimal.Decimal, int, float, ],
        _id: typing.Union[MetaOapg.properties._id, str, ],
        type: 'AnalyzeTypeEnum',
        jobParms: typing.Union['JobParams', schemas.Unset] = schemas.unset,
        sampleId: typing.Union[MetaOapg.properties.sampleId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        layout: typing.Union['SizedLayout', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Visualization':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            jobId=jobId,
            data=data,
            modelId=modelId,
            visualizationUuid=visualizationUuid,
            epoch=epoch,
            _id=_id,
            type=type,
            jobParms=jobParms,
            sampleId=sampleId,
            layout=layout,
            _configuration=_configuration,
        )

from openapi_client.model.analyze_type_enum import AnalyzeTypeEnum
from openapi_client.model.job_params import JobParams
from openapi_client.model.sized_layout import SizedLayout
from openapi_client.model.visualization_response import VisualizationResponse

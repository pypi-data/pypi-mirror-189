# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class XYChartsMeta(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    XYChartMeta contains defining information on all the charts in this dashlet including what their type is, what the elements range is, the axis types, display names, labels and more
    """


    class MetaOapg:
        required = {
            "yAxis",
            "xAxis",
        }
        
        class properties:
        
            @staticmethod
            def xAxis() -> typing.Type['XMetaAxis']:
                return XMetaAxis
        
            @staticmethod
            def yAxis() -> typing.Type['YMetaAxis']:
                return YMetaAxis
            __annotations__ = {
                "xAxis": xAxis,
                "yAxis": yAxis,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    yAxis: 'YMetaAxis'
    xAxis: 'XMetaAxis'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yAxis"]) -> 'YMetaAxis': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xAxis"]) -> 'XMetaAxis': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["yAxis"], typing_extensions.Literal["xAxis"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yAxis"]) -> 'YMetaAxis': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xAxis"]) -> 'XMetaAxis': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["yAxis"], typing_extensions.Literal["xAxis"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        yAxis: 'YMetaAxis',
        xAxis: 'XMetaAxis',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'XYChartsMeta':
        return super().__new__(
            cls,
            *args,
            yAxis=yAxis,
            xAxis=xAxis,
            _configuration=_configuration,
        )

from openapi_client.model.x_meta_axis import XMetaAxis
from openapi_client.model.y_meta_axis import YMetaAxis

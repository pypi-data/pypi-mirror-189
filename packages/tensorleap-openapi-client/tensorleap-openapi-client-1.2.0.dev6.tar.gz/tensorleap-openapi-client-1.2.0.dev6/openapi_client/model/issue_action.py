# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class IssueAction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def assignment() -> typing.Type['ActionAssignmentElement']:
                return ActionAssignmentElement
        
            @staticmethod
            def tagsAdded() -> typing.Type['ActionTagElement']:
                return ActionTagElement
        
            @staticmethod
            def comment() -> typing.Type['ActionCommentElement']:
                return ActionCommentElement
            __annotations__ = {
                "assignment": assignment,
                "tagsAdded": tagsAdded,
                "comment": comment,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignment"]) -> 'ActionAssignmentElement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagsAdded"]) -> 'ActionTagElement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> 'ActionCommentElement': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assignment"], typing_extensions.Literal["tagsAdded"], typing_extensions.Literal["comment"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignment"]) -> typing.Union['ActionAssignmentElement', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagsAdded"]) -> typing.Union['ActionTagElement', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union['ActionCommentElement', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assignment"], typing_extensions.Literal["tagsAdded"], typing_extensions.Literal["comment"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        assignment: typing.Union['ActionAssignmentElement', schemas.Unset] = schemas.unset,
        tagsAdded: typing.Union['ActionTagElement', schemas.Unset] = schemas.unset,
        comment: typing.Union['ActionCommentElement', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IssueAction':
        return super().__new__(
            cls,
            *args,
            assignment=assignment,
            tagsAdded=tagsAdded,
            comment=comment,
            _configuration=_configuration,
        )

from openapi_client.model.action_assignment_element import ActionAssignmentElement
from openapi_client.model.action_comment_element import ActionCommentElement
from openapi_client.model.action_tag_element import ActionTagElement

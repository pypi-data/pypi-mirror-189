# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GetStatisticsResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "models",
            "projects",
            "tests",
            "activeUsers",
            "networks",
            "openIssues",
        }
        
        class properties:
            activeUsers = schemas.Float64Schema
            openIssues = schemas.Float64Schema
            tests = schemas.Float64Schema
            projects = schemas.Float64Schema
            networks = schemas.Float64Schema
            models = schemas.Float64Schema
            __annotations__ = {
                "activeUsers": activeUsers,
                "openIssues": openIssues,
                "tests": tests,
                "projects": projects,
                "networks": networks,
                "models": models,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    models: MetaOapg.properties.models
    projects: MetaOapg.properties.projects
    tests: MetaOapg.properties.tests
    activeUsers: MetaOapg.properties.activeUsers
    networks: MetaOapg.properties.networks
    openIssues: MetaOapg.properties.openIssues
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["models"]) -> MetaOapg.properties.models: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tests"]) -> MetaOapg.properties.tests: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeUsers"]) -> MetaOapg.properties.activeUsers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networks"]) -> MetaOapg.properties.networks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openIssues"]) -> MetaOapg.properties.openIssues: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["models"], typing_extensions.Literal["projects"], typing_extensions.Literal["tests"], typing_extensions.Literal["activeUsers"], typing_extensions.Literal["networks"], typing_extensions.Literal["openIssues"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["models"]) -> MetaOapg.properties.models: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tests"]) -> MetaOapg.properties.tests: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeUsers"]) -> MetaOapg.properties.activeUsers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networks"]) -> MetaOapg.properties.networks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openIssues"]) -> MetaOapg.properties.openIssues: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["models"], typing_extensions.Literal["projects"], typing_extensions.Literal["tests"], typing_extensions.Literal["activeUsers"], typing_extensions.Literal["networks"], typing_extensions.Literal["openIssues"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        models: typing.Union[MetaOapg.properties.models, decimal.Decimal, int, float, ],
        projects: typing.Union[MetaOapg.properties.projects, decimal.Decimal, int, float, ],
        tests: typing.Union[MetaOapg.properties.tests, decimal.Decimal, int, float, ],
        activeUsers: typing.Union[MetaOapg.properties.activeUsers, decimal.Decimal, int, float, ],
        networks: typing.Union[MetaOapg.properties.networks, decimal.Decimal, int, float, ],
        openIssues: typing.Union[MetaOapg.properties.openIssues, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'GetStatisticsResponse':
        return super().__new__(
            cls,
            *args,
            models=models,
            projects=projects,
            tests=tests,
            activeUsers=activeUsers,
            networks=networks,
            openIssues=openIssues,
            _configuration=_configuration,
        )

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class DatasetVersion(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "note",
            "metadata",
            "createdBy",
            "organization",
            "testStatus",
            "digest",
            "datasetId",
            "_id",
        }
        
        class properties:
            _id = schemas.StrSchema
            organization = schemas.StrSchema
            datasetId = schemas.StrSchema
            digest = schemas.StrSchema
            note = schemas.StrSchema
            createdAt = schemas.StrSchema
            createdBy = schemas.StrSchema
        
            @staticmethod
            def testStatus() -> typing.Type['TestStatus']:
                return TestStatus
        
            @staticmethod
            def metadata() -> typing.Type['DatasetMetadata']:
                return DatasetMetadata
            __annotations__ = {
                "_id": _id,
                "organization": organization,
                "datasetId": datasetId,
                "digest": digest,
                "note": note,
                "createdAt": createdAt,
                "createdBy": createdBy,
                "testStatus": testStatus,
                "metadata": metadata,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    createdAt: MetaOapg.properties.createdAt
    note: MetaOapg.properties.note
    metadata: 'DatasetMetadata'
    createdBy: MetaOapg.properties.createdBy
    organization: MetaOapg.properties.organization
    testStatus: 'TestStatus'
    digest: MetaOapg.properties.digest
    datasetId: MetaOapg.properties.datasetId
    _id: MetaOapg.properties._id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'DatasetMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testStatus"]) -> 'TestStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digest"]) -> MetaOapg.properties.digest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["note"], typing_extensions.Literal["metadata"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["organization"], typing_extensions.Literal["testStatus"], typing_extensions.Literal["digest"], typing_extensions.Literal["datasetId"], typing_extensions.Literal["_id"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'DatasetMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testStatus"]) -> 'TestStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digest"]) -> MetaOapg.properties.digest: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["note"], typing_extensions.Literal["metadata"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["organization"], typing_extensions.Literal["testStatus"], typing_extensions.Literal["digest"], typing_extensions.Literal["datasetId"], typing_extensions.Literal["_id"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, ],
        note: typing.Union[MetaOapg.properties.note, str, ],
        metadata: 'DatasetMetadata',
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, ],
        organization: typing.Union[MetaOapg.properties.organization, str, ],
        testStatus: 'TestStatus',
        digest: typing.Union[MetaOapg.properties.digest, str, ],
        datasetId: typing.Union[MetaOapg.properties.datasetId, str, ],
        _id: typing.Union[MetaOapg.properties._id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DatasetVersion':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            note=note,
            metadata=metadata,
            createdBy=createdBy,
            organization=organization,
            testStatus=testStatus,
            digest=digest,
            datasetId=datasetId,
            _id=_id,
            _configuration=_configuration,
        )

from openapi_client.model.dataset_metadata import DatasetMetadata
from openapi_client.model.test_status import TestStatus

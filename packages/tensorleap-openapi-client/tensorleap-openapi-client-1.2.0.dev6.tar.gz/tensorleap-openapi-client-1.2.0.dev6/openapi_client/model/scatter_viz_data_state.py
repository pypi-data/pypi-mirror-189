# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ScatterVizDataState(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "metadata",
            "samples",
            "labels",
            "scatter_data",
        }
        
        class properties:
            
            
            class scatter_data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.Float64Schema
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scatter_data':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class labels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ScatterLabel']:
                        return ScatterLabel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ScatterLabel'], typing.List['ScatterLabel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ScatterLabel':
                    return super().__getitem__(i)
            
            
            class samples(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SampleIdentity']:
                        return SampleIdentity
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SampleIdentity'], typing.List['SampleIdentity']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'samples':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SampleIdentity':
                    return super().__getitem__(i)
            metadata = schemas.DictSchema
        
            @staticmethod
            def data_state() -> typing.Type['DataStateType']:
                return DataStateType
            __annotations__ = {
                "scatter_data": scatter_data,
                "labels": labels,
                "samples": samples,
                "metadata": metadata,
                "data_state": data_state,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    metadata: MetaOapg.properties.metadata
    samples: MetaOapg.properties.samples
    labels: MetaOapg.properties.labels
    scatter_data: MetaOapg.properties.scatter_data
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["samples"]) -> MetaOapg.properties.samples: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scatter_data"]) -> MetaOapg.properties.scatter_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_state"]) -> 'DataStateType': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["metadata"], typing_extensions.Literal["samples"], typing_extensions.Literal["labels"], typing_extensions.Literal["scatter_data"], typing_extensions.Literal["data_state"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["samples"]) -> MetaOapg.properties.samples: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scatter_data"]) -> MetaOapg.properties.scatter_data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_state"]) -> typing.Union['DataStateType', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metadata"], typing_extensions.Literal["samples"], typing_extensions.Literal["labels"], typing_extensions.Literal["scatter_data"], typing_extensions.Literal["data_state"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, ],
        samples: typing.Union[MetaOapg.properties.samples, list, tuple, ],
        labels: typing.Union[MetaOapg.properties.labels, list, tuple, ],
        scatter_data: typing.Union[MetaOapg.properties.scatter_data, list, tuple, ],
        data_state: typing.Union['DataStateType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ScatterVizDataState':
        return super().__new__(
            cls,
            *args,
            metadata=metadata,
            samples=samples,
            labels=labels,
            scatter_data=scatter_data,
            data_state=data_state,
            _configuration=_configuration,
        )

from openapi_client.model.data_state_type import DataStateType
from openapi_client.model.sample_identity import SampleIdentity
from openapi_client.model.scatter_label import ScatterLabel

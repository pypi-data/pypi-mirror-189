# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Domain(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "min",
            "max",
        }
        
        class properties:
        
            @staticmethod
            def max() -> typing.Type['DomainMax']:
                return DomainMax
        
            @staticmethod
            def min() -> typing.Type['DomainMin']:
                return DomainMin
            __annotations__ = {
                "max": max,
                "min": min,
            }
    
    min: 'DomainMin'
    max: 'DomainMax'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max"]) -> 'DomainMax': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min"]) -> 'DomainMin': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["max", "min", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> 'DomainMax': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> 'DomainMin': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["max", "min", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        min: 'DomainMin',
        max: 'DomainMax',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Domain':
        return super().__new__(
            cls,
            *args,
            min=min,
            max=max,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.domain_max import DomainMax
from openapi_client.model.domain_min import DomainMin

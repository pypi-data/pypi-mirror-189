# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class JobNotificationLeepScriptContext(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "jobId",
            "leepScriptName",
            "jobType",
            "leepScriptId",
        }
        
        class properties:
            leepScriptId = schemas.StrSchema
            leepScriptName = schemas.StrSchema
        
            @staticmethod
            def jobType() -> typing.Type['JobTypeEnum']:
                return JobTypeEnum
            jobId = schemas.StrSchema
            leepScriptVersionId = schemas.StrSchema
            leepScriptVersion = schemas.StrSchema
            __annotations__ = {
                "leepScriptId": leepScriptId,
                "leepScriptName": leepScriptName,
                "jobType": jobType,
                "jobId": jobId,
                "leepScriptVersionId": leepScriptVersionId,
                "leepScriptVersion": leepScriptVersion,
            }
    
    jobId: MetaOapg.properties.jobId
    leepScriptName: MetaOapg.properties.leepScriptName
    jobType: 'JobTypeEnum'
    leepScriptId: MetaOapg.properties.leepScriptId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leepScriptId"]) -> MetaOapg.properties.leepScriptId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leepScriptName"]) -> MetaOapg.properties.leepScriptName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobType"]) -> 'JobTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leepScriptVersionId"]) -> MetaOapg.properties.leepScriptVersionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leepScriptVersion"]) -> MetaOapg.properties.leepScriptVersion: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["leepScriptId", "leepScriptName", "jobType", "jobId", "leepScriptVersionId", "leepScriptVersion", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leepScriptId"]) -> MetaOapg.properties.leepScriptId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leepScriptName"]) -> MetaOapg.properties.leepScriptName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobType"]) -> 'JobTypeEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leepScriptVersionId"]) -> typing.Union[MetaOapg.properties.leepScriptVersionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leepScriptVersion"]) -> typing.Union[MetaOapg.properties.leepScriptVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["leepScriptId", "leepScriptName", "jobType", "jobId", "leepScriptVersionId", "leepScriptVersion", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        jobId: typing.Union[MetaOapg.properties.jobId, str, ],
        leepScriptName: typing.Union[MetaOapg.properties.leepScriptName, str, ],
        jobType: 'JobTypeEnum',
        leepScriptId: typing.Union[MetaOapg.properties.leepScriptId, str, ],
        leepScriptVersionId: typing.Union[MetaOapg.properties.leepScriptVersionId, str, schemas.Unset] = schemas.unset,
        leepScriptVersion: typing.Union[MetaOapg.properties.leepScriptVersion, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobNotificationLeepScriptContext':
        return super().__new__(
            cls,
            *args,
            jobId=jobId,
            leepScriptName=leepScriptName,
            jobType=jobType,
            leepScriptId=leepScriptId,
            leepScriptVersionId=leepScriptVersionId,
            leepScriptVersion=leepScriptVersion,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.job_type_enum import JobTypeEnum

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MultiChartsParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "xField",
            "yField",
            "dataDistributionType",
            "xAxisSizeInterval",
            "modelExtIds",
            "aggregationMethod",
        }
        
        class properties:
            xField = schemas.StrSchema
            yField = schemas.StrSchema
        
            @staticmethod
            def aggregationMethod() -> typing.Type['AggregationMethod']:
                return AggregationMethod
            
            
            class modelExtIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modelExtIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def dataDistributionType() -> typing.Type['DataDistributionType']:
                return DataDistributionType
            xAxisSizeInterval = schemas.Float64Schema
            verticalSplit = schemas.StrSchema
            horizontalSplit = schemas.StrSchema
            innerSplit = schemas.StrSchema
            
            
            class filters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ESFilter']:
                        return ESFilter
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ESFilter'], typing.List['ESFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ESFilter':
                    return super().__getitem__(i)
            orderByParam = schemas.StrSchema
        
            @staticmethod
            def orderParams() -> typing.Type['OrderType']:
                return OrderType
            lastEpochOnly = schemas.BoolSchema
            __annotations__ = {
                "xField": xField,
                "yField": yField,
                "aggregationMethod": aggregationMethod,
                "modelExtIds": modelExtIds,
                "dataDistributionType": dataDistributionType,
                "xAxisSizeInterval": xAxisSizeInterval,
                "verticalSplit": verticalSplit,
                "horizontalSplit": horizontalSplit,
                "innerSplit": innerSplit,
                "filters": filters,
                "orderByParam": orderByParam,
                "orderParams": orderParams,
                "lastEpochOnly": lastEpochOnly,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    xField: MetaOapg.properties.xField
    yField: MetaOapg.properties.yField
    dataDistributionType: 'DataDistributionType'
    xAxisSizeInterval: MetaOapg.properties.xAxisSizeInterval
    modelExtIds: MetaOapg.properties.modelExtIds
    aggregationMethod: 'AggregationMethod'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xField"]) -> MetaOapg.properties.xField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yField"]) -> MetaOapg.properties.yField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataDistributionType"]) -> 'DataDistributionType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xAxisSizeInterval"]) -> MetaOapg.properties.xAxisSizeInterval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelExtIds"]) -> MetaOapg.properties.modelExtIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aggregationMethod"]) -> 'AggregationMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verticalSplit"]) -> MetaOapg.properties.verticalSplit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["horizontalSplit"]) -> MetaOapg.properties.horizontalSplit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["innerSplit"]) -> MetaOapg.properties.innerSplit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filters"]) -> MetaOapg.properties.filters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderByParam"]) -> MetaOapg.properties.orderByParam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderParams"]) -> 'OrderType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastEpochOnly"]) -> MetaOapg.properties.lastEpochOnly: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["xField"], typing_extensions.Literal["yField"], typing_extensions.Literal["dataDistributionType"], typing_extensions.Literal["xAxisSizeInterval"], typing_extensions.Literal["modelExtIds"], typing_extensions.Literal["aggregationMethod"], typing_extensions.Literal["verticalSplit"], typing_extensions.Literal["horizontalSplit"], typing_extensions.Literal["innerSplit"], typing_extensions.Literal["filters"], typing_extensions.Literal["orderByParam"], typing_extensions.Literal["orderParams"], typing_extensions.Literal["lastEpochOnly"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xField"]) -> MetaOapg.properties.xField: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yField"]) -> MetaOapg.properties.yField: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataDistributionType"]) -> 'DataDistributionType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xAxisSizeInterval"]) -> MetaOapg.properties.xAxisSizeInterval: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelExtIds"]) -> MetaOapg.properties.modelExtIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aggregationMethod"]) -> 'AggregationMethod': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verticalSplit"]) -> typing.Union[MetaOapg.properties.verticalSplit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["horizontalSplit"]) -> typing.Union[MetaOapg.properties.horizontalSplit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["innerSplit"]) -> typing.Union[MetaOapg.properties.innerSplit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> typing.Union[MetaOapg.properties.filters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderByParam"]) -> typing.Union[MetaOapg.properties.orderByParam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderParams"]) -> typing.Union['OrderType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastEpochOnly"]) -> typing.Union[MetaOapg.properties.lastEpochOnly, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["xField"], typing_extensions.Literal["yField"], typing_extensions.Literal["dataDistributionType"], typing_extensions.Literal["xAxisSizeInterval"], typing_extensions.Literal["modelExtIds"], typing_extensions.Literal["aggregationMethod"], typing_extensions.Literal["verticalSplit"], typing_extensions.Literal["horizontalSplit"], typing_extensions.Literal["innerSplit"], typing_extensions.Literal["filters"], typing_extensions.Literal["orderByParam"], typing_extensions.Literal["orderParams"], typing_extensions.Literal["lastEpochOnly"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        xField: typing.Union[MetaOapg.properties.xField, str, ],
        yField: typing.Union[MetaOapg.properties.yField, str, ],
        dataDistributionType: 'DataDistributionType',
        xAxisSizeInterval: typing.Union[MetaOapg.properties.xAxisSizeInterval, decimal.Decimal, int, float, ],
        modelExtIds: typing.Union[MetaOapg.properties.modelExtIds, list, tuple, ],
        aggregationMethod: 'AggregationMethod',
        verticalSplit: typing.Union[MetaOapg.properties.verticalSplit, str, schemas.Unset] = schemas.unset,
        horizontalSplit: typing.Union[MetaOapg.properties.horizontalSplit, str, schemas.Unset] = schemas.unset,
        innerSplit: typing.Union[MetaOapg.properties.innerSplit, str, schemas.Unset] = schemas.unset,
        filters: typing.Union[MetaOapg.properties.filters, list, tuple, schemas.Unset] = schemas.unset,
        orderByParam: typing.Union[MetaOapg.properties.orderByParam, str, schemas.Unset] = schemas.unset,
        orderParams: typing.Union['OrderType', schemas.Unset] = schemas.unset,
        lastEpochOnly: typing.Union[MetaOapg.properties.lastEpochOnly, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MultiChartsParams':
        return super().__new__(
            cls,
            *args,
            xField=xField,
            yField=yField,
            dataDistributionType=dataDistributionType,
            xAxisSizeInterval=xAxisSizeInterval,
            modelExtIds=modelExtIds,
            aggregationMethod=aggregationMethod,
            verticalSplit=verticalSplit,
            horizontalSplit=horizontalSplit,
            innerSplit=innerSplit,
            filters=filters,
            orderByParam=orderByParam,
            orderParams=orderParams,
            lastEpochOnly=lastEpochOnly,
            _configuration=_configuration,
        )

from openapi_client.model.aggregation_method import AggregationMethod
from openapi_client.model.data_distribution_type import DataDistributionType
from openapi_client.model.es_filter import ESFilter
from openapi_client.model.order_type import OrderType

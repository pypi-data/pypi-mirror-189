# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SampleAnalysisViz(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "sub_title",
            "visualized_items",
            "metadata_map",
            "guid",
            "grads_analysis",
            "title",
            "type",
            "feature_importance",
        }
        
        class properties:
            type = schemas.StrSchema
            title = schemas.StrSchema
            sub_title = schemas.StrSchema
            guid = schemas.StrSchema
            
            
            class visualized_items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VisualizedItem']:
                        return VisualizedItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['VisualizedItem'], typing.List['VisualizedItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'visualized_items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VisualizedItem':
                    return super().__getitem__(i)
        
            @staticmethod
            def grads_analysis() -> typing.Type['GradsAnalysis']:
                return GradsAnalysis
        
            @staticmethod
            def feature_importance() -> typing.Type['FeatureImportance']:
                return FeatureImportance
            metadata_map = schemas.DictSchema
            __annotations__ = {
                "type": type,
                "title": title,
                "sub_title": sub_title,
                "guid": guid,
                "visualized_items": visualized_items,
                "grads_analysis": grads_analysis,
                "feature_importance": feature_importance,
                "metadata_map": metadata_map,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    sub_title: MetaOapg.properties.sub_title
    visualized_items: MetaOapg.properties.visualized_items
    metadata_map: MetaOapg.properties.metadata_map
    guid: MetaOapg.properties.guid
    grads_analysis: 'GradsAnalysis'
    title: MetaOapg.properties.title
    type: MetaOapg.properties.type
    feature_importance: 'FeatureImportance'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sub_title"]) -> MetaOapg.properties.sub_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visualized_items"]) -> MetaOapg.properties.visualized_items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata_map"]) -> MetaOapg.properties.metadata_map: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grads_analysis"]) -> 'GradsAnalysis': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feature_importance"]) -> 'FeatureImportance': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sub_title"], typing_extensions.Literal["visualized_items"], typing_extensions.Literal["metadata_map"], typing_extensions.Literal["guid"], typing_extensions.Literal["grads_analysis"], typing_extensions.Literal["title"], typing_extensions.Literal["type"], typing_extensions.Literal["feature_importance"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sub_title"]) -> MetaOapg.properties.sub_title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visualized_items"]) -> MetaOapg.properties.visualized_items: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata_map"]) -> MetaOapg.properties.metadata_map: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grads_analysis"]) -> 'GradsAnalysis': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feature_importance"]) -> 'FeatureImportance': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sub_title"], typing_extensions.Literal["visualized_items"], typing_extensions.Literal["metadata_map"], typing_extensions.Literal["guid"], typing_extensions.Literal["grads_analysis"], typing_extensions.Literal["title"], typing_extensions.Literal["type"], typing_extensions.Literal["feature_importance"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sub_title: typing.Union[MetaOapg.properties.sub_title, str, ],
        visualized_items: typing.Union[MetaOapg.properties.visualized_items, list, tuple, ],
        metadata_map: typing.Union[MetaOapg.properties.metadata_map, dict, frozendict.frozendict, ],
        guid: typing.Union[MetaOapg.properties.guid, str, ],
        grads_analysis: 'GradsAnalysis',
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        feature_importance: 'FeatureImportance',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SampleAnalysisViz':
        return super().__new__(
            cls,
            *args,
            sub_title=sub_title,
            visualized_items=visualized_items,
            metadata_map=metadata_map,
            guid=guid,
            grads_analysis=grads_analysis,
            title=title,
            type=type,
            feature_importance=feature_importance,
            _configuration=_configuration,
        )

from openapi_client.model.feature_importance import FeatureImportance
from openapi_client.model.grads_analysis import GradsAnalysis
from openapi_client.model.visualized_item import VisualizedItem

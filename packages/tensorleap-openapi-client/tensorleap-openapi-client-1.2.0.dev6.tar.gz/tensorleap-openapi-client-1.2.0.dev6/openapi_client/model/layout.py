# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Layout(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "w",
            "h",
            "x",
            "y",
        }
        
        class properties:
            x = schemas.Float64Schema
            y = schemas.Float64Schema
            w = schemas.Float64Schema
            h = schemas.Float64Schema
            __annotations__ = {
                "x": x,
                "y": y,
                "w": w,
                "h": h,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    w: MetaOapg.properties.w
    h: MetaOapg.properties.h
    x: MetaOapg.properties.x
    y: MetaOapg.properties.y
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["w"]) -> MetaOapg.properties.w: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["h"]) -> MetaOapg.properties.h: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["w"], typing_extensions.Literal["h"], typing_extensions.Literal["x"], typing_extensions.Literal["y"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["w"]) -> MetaOapg.properties.w: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["h"]) -> MetaOapg.properties.h: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["w"], typing_extensions.Literal["h"], typing_extensions.Literal["x"], typing_extensions.Literal["y"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        w: typing.Union[MetaOapg.properties.w, decimal.Decimal, int, float, ],
        h: typing.Union[MetaOapg.properties.h, decimal.Decimal, int, float, ],
        x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, float, ],
        y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Layout':
        return super().__new__(
            cls,
            *args,
            w=w,
            h=h,
            x=x,
            y=y,
            _configuration=_configuration,
        )

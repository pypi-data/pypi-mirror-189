# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SendUserMessageParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "firstName",
            "lastName",
            "content",
            "email",
        }
        
        class properties:
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            email = schemas.StrSchema
            content = schemas.DictSchema
            role = schemas.StrSchema
            company = schemas.StrSchema
            telephone = schemas.StrSchema
            __annotations__ = {
                "firstName": firstName,
                "lastName": lastName,
                "email": email,
                "content": content,
                "role": role,
                "company": company,
                "telephone": telephone,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    firstName: MetaOapg.properties.firstName
    lastName: MetaOapg.properties.lastName
    content: MetaOapg.properties.content
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company"]) -> MetaOapg.properties.company: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["telephone"]) -> MetaOapg.properties.telephone: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstName"], typing_extensions.Literal["lastName"], typing_extensions.Literal["content"], typing_extensions.Literal["email"], typing_extensions.Literal["role"], typing_extensions.Literal["company"], typing_extensions.Literal["telephone"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> typing.Union[MetaOapg.properties.role, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company"]) -> typing.Union[MetaOapg.properties.company, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["telephone"]) -> typing.Union[MetaOapg.properties.telephone, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstName"], typing_extensions.Literal["lastName"], typing_extensions.Literal["content"], typing_extensions.Literal["email"], typing_extensions.Literal["role"], typing_extensions.Literal["company"], typing_extensions.Literal["telephone"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        content: typing.Union[MetaOapg.properties.content, dict, frozendict.frozendict, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        role: typing.Union[MetaOapg.properties.role, str, schemas.Unset] = schemas.unset,
        company: typing.Union[MetaOapg.properties.company, str, schemas.Unset] = schemas.unset,
        telephone: typing.Union[MetaOapg.properties.telephone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SendUserMessageParams':
        return super().__new__(
            cls,
            *args,
            firstName=firstName,
            lastName=lastName,
            content=content,
            email=email,
            role=role,
            company=company,
            telephone=telephone,
            _configuration=_configuration,
        )

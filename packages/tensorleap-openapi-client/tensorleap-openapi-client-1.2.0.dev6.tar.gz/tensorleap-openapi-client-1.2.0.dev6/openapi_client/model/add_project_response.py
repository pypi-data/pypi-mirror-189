# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AddProjectResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "project",
            "version",
        }
        
        class properties:
        
            @staticmethod
            def project() -> typing.Type['Project']:
                return Project
        
            @staticmethod
            def version() -> typing.Type['Version']:
                return Version
            __annotations__ = {
                "project": project,
                "version": version,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    project: 'Project'
    version: 'Version'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'Project': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> 'Version': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["project"], typing_extensions.Literal["version"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> 'Project': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> 'Version': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["project"], typing_extensions.Literal["version"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        project: 'Project',
        version: 'Version',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AddProjectResponse':
        return super().__new__(
            cls,
            *args,
            project=project,
            version=version,
            _configuration=_configuration,
        )

from openapi_client.model.project import Project
from openapi_client.model.version import Version

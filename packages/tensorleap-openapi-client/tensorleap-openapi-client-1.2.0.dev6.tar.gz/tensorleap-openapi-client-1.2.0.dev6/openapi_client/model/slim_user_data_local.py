# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SlimUserDataLocal(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "organization",
            "name",
            "email",
            "activated",
        }
        
        class properties:
            name = schemas.StrSchema
            email = schemas.StrSchema
            organization = schemas.StrSchema
            activated = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "email": email,
                "organization": organization,
                "activated": activated,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    organization: MetaOapg.properties.organization
    name: MetaOapg.properties.name
    email: MetaOapg.properties.email
    activated: MetaOapg.properties.activated
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activated"]) -> MetaOapg.properties.activated: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["organization"], typing_extensions.Literal["name"], typing_extensions.Literal["email"], typing_extensions.Literal["activated"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activated"]) -> MetaOapg.properties.activated: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["organization"], typing_extensions.Literal["name"], typing_extensions.Literal["email"], typing_extensions.Literal["activated"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        organization: typing.Union[MetaOapg.properties.organization, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        activated: typing.Union[MetaOapg.properties.activated, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SlimUserDataLocal':
        return super().__new__(
            cls,
            *args,
            organization=organization,
            name=name,
            email=email,
            activated=activated,
            _configuration=_configuration,
        )

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class YMetaAxis(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    DisplayName is the name shown on the Y column
Domain sets the axis range (domain equal to min:0 and max:100 will have a range of values between 0 and 100). The default domain causes 'datamin' and 'datamax' causes the webui to calculate the domain.
   TODO: look into if the domain can be removed from the interface and calculated by recharts only.
Metrics is a list of the different labels (one for each line)
MetaFields is a list of the metadata that will be added to each point and will apear in the chart tooltip
    """


    class MetaOapg:
        required = {
            "displayName",
            "domain",
            "metaFields",
            "metrics",
        }
        
        class properties:
            
            
            class metaFields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metaFields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class metrics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metrics':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def domain() -> typing.Type['Domain']:
                return Domain
            displayName = schemas.StrSchema
            __annotations__ = {
                "metaFields": metaFields,
                "metrics": metrics,
                "domain": domain,
                "displayName": displayName,
            }
    
    displayName: MetaOapg.properties.displayName
    domain: 'Domain'
    metaFields: MetaOapg.properties.metaFields
    metrics: MetaOapg.properties.metrics
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metaFields"]) -> MetaOapg.properties.metaFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metrics"]) -> MetaOapg.properties.metrics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> 'Domain': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["metaFields", "metrics", "domain", "displayName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metaFields"]) -> MetaOapg.properties.metaFields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metrics"]) -> MetaOapg.properties.metrics: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> 'Domain': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metaFields", "metrics", "domain", "displayName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        displayName: typing.Union[MetaOapg.properties.displayName, str, ],
        domain: 'Domain',
        metaFields: typing.Union[MetaOapg.properties.metaFields, list, tuple, ],
        metrics: typing.Union[MetaOapg.properties.metrics, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'YMetaAxis':
        return super().__new__(
            cls,
            *args,
            displayName=displayName,
            domain=domain,
            metaFields=metaFields,
            metrics=metrics,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.domain import Domain

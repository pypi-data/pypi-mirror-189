# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class UpdateVersionParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "versionId",
            "data",
            "overrideHash",
        }
        
        class properties:
            versionId = schemas.StrSchema
        
            @staticmethod
            def data() -> typing.Type['ModelGraph']:
                return ModelGraph
            overrideHash = schemas.BoolSchema
            __annotations__ = {
                "versionId": versionId,
                "data": data,
                "overrideHash": overrideHash,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    versionId: MetaOapg.properties.versionId
    data: 'ModelGraph'
    overrideHash: MetaOapg.properties.overrideHash
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionId"]) -> MetaOapg.properties.versionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'ModelGraph': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overrideHash"]) -> MetaOapg.properties.overrideHash: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["versionId"], typing_extensions.Literal["data"], typing_extensions.Literal["overrideHash"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionId"]) -> MetaOapg.properties.versionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> 'ModelGraph': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overrideHash"]) -> MetaOapg.properties.overrideHash: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["versionId"], typing_extensions.Literal["data"], typing_extensions.Literal["overrideHash"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        versionId: typing.Union[MetaOapg.properties.versionId, str, ],
        data: 'ModelGraph',
        overrideHash: typing.Union[MetaOapg.properties.overrideHash, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'UpdateVersionParams':
        return super().__new__(
            cls,
            *args,
            versionId=versionId,
            data=data,
            overrideHash=overrideHash,
            _configuration=_configuration,
        )

from openapi_client.model.model_graph import ModelGraph

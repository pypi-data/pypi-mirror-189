# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class DatasetTestResultPayload(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "is_passed",
            "display",
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            display = schemas.DictSchema
            is_passed = schemas.BoolSchema
            
            
            class shape(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Float64Schema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shape':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "display": display,
                "is_passed": is_passed,
                "shape": shape,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    is_passed: MetaOapg.properties.is_passed
    display: MetaOapg.properties.display
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_passed"]) -> MetaOapg.properties.is_passed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display"]) -> MetaOapg.properties.display: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shape"]) -> MetaOapg.properties.shape: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_passed"], typing_extensions.Literal["display"], typing_extensions.Literal["name"], typing_extensions.Literal["shape"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_passed"]) -> MetaOapg.properties.is_passed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display"]) -> MetaOapg.properties.display: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shape"]) -> typing.Union[MetaOapg.properties.shape, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_passed"], typing_extensions.Literal["display"], typing_extensions.Literal["name"], typing_extensions.Literal["shape"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_passed: typing.Union[MetaOapg.properties.is_passed, bool, ],
        display: typing.Union[MetaOapg.properties.display, dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        shape: typing.Union[MetaOapg.properties.shape, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DatasetTestResultPayload':
        return super().__new__(
            cls,
            *args,
            is_passed=is_passed,
            display=display,
            name=name,
            shape=shape,
            _configuration=_configuration,
        )

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SizedLayout(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "md",
            "sm",
            "lg",
            "xs",
        }
        
        class properties:
        
            @staticmethod
            def xs() -> typing.Type['Layout']:
                return Layout
        
            @staticmethod
            def sm() -> typing.Type['Layout']:
                return Layout
        
            @staticmethod
            def md() -> typing.Type['Layout']:
                return Layout
        
            @staticmethod
            def lg() -> typing.Type['Layout']:
                return Layout
            __annotations__ = {
                "xs": xs,
                "sm": sm,
                "md": md,
                "lg": lg,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    md: 'Layout'
    sm: 'Layout'
    lg: 'Layout'
    xs: 'Layout'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md"]) -> 'Layout': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sm"]) -> 'Layout': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lg"]) -> 'Layout': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xs"]) -> 'Layout': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["md"], typing_extensions.Literal["sm"], typing_extensions.Literal["lg"], typing_extensions.Literal["xs"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md"]) -> 'Layout': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sm"]) -> 'Layout': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lg"]) -> 'Layout': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xs"]) -> 'Layout': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["md"], typing_extensions.Literal["sm"], typing_extensions.Literal["lg"], typing_extensions.Literal["xs"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        md: 'Layout',
        sm: 'Layout',
        lg: 'Layout',
        xs: 'Layout',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SizedLayout':
        return super().__new__(
            cls,
            *args,
            md=md,
            sm=sm,
            lg=lg,
            xs=xs,
            _configuration=_configuration,
        )

from openapi_client.model.layout import Layout

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TrainingParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "batch_size",
            "epochs",
        }
        
        class properties:
            epochs = schemas.Float64Schema
            batch_size = schemas.Float64Schema
        
            @staticmethod
            def early_stop_params() -> typing.Type['EarlyStopParams']:
                return EarlyStopParams
            __annotations__ = {
                "epochs": epochs,
                "batch_size": batch_size,
                "early_stop_params": early_stop_params,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    batch_size: MetaOapg.properties.batch_size
    epochs: MetaOapg.properties.epochs
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batch_size"]) -> MetaOapg.properties.batch_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["epochs"]) -> MetaOapg.properties.epochs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["early_stop_params"]) -> 'EarlyStopParams': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["batch_size"], typing_extensions.Literal["epochs"], typing_extensions.Literal["early_stop_params"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batch_size"]) -> MetaOapg.properties.batch_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["epochs"]) -> MetaOapg.properties.epochs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["early_stop_params"]) -> typing.Union['EarlyStopParams', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["batch_size"], typing_extensions.Literal["epochs"], typing_extensions.Literal["early_stop_params"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        batch_size: typing.Union[MetaOapg.properties.batch_size, decimal.Decimal, int, float, ],
        epochs: typing.Union[MetaOapg.properties.epochs, decimal.Decimal, int, float, ],
        early_stop_params: typing.Union['EarlyStopParams', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TrainingParams':
        return super().__new__(
            cls,
            *args,
            batch_size=batch_size,
            epochs=epochs,
            early_stop_params=early_stop_params,
            _configuration=_configuration,
        )

from openapi_client.model.early_stop_params import EarlyStopParams

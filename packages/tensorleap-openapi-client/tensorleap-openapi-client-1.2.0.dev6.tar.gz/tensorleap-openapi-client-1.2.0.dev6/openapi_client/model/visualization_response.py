# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class VisualizationResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "data",
            "source",
            "info",
        }
        
        class properties:
        
            @staticmethod
            def data() -> typing.Type['VisualizationData']:
                return VisualizationData
        
            @staticmethod
            def info() -> typing.Type['VizInfoType']:
                return VizInfoType
            source = schemas.StrSchema
            __annotations__ = {
                "data": data,
                "info": info,
                "source": source,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    data: 'VisualizationData'
    source: MetaOapg.properties.source
    info: 'VizInfoType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'VisualizationData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info"]) -> 'VizInfoType': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data"], typing_extensions.Literal["source"], typing_extensions.Literal["info"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> 'VisualizationData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info"]) -> 'VizInfoType': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data"], typing_extensions.Literal["source"], typing_extensions.Literal["info"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data: 'VisualizationData',
        source: typing.Union[MetaOapg.properties.source, str, ],
        info: 'VizInfoType',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'VisualizationResponse':
        return super().__new__(
            cls,
            *args,
            data=data,
            source=source,
            info=info,
            _configuration=_configuration,
        )

from openapi_client.model.visualization_data import VisualizationData
from openapi_client.model.viz_info_type import VizInfoType

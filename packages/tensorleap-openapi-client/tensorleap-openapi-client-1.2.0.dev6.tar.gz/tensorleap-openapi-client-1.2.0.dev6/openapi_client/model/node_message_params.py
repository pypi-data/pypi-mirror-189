# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NodeMessageParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "module",
            "message",
            "layer_name",
            "layer_type",
        }
        
        class properties:
            message = schemas.StrSchema
            layer_name = schemas.StrSchema
        
            @staticmethod
            def layer_type() -> typing.Type['NodeType']:
                return NodeType
        
            @staticmethod
            def module() -> typing.Type['Module']:
                return Module
            message_code = schemas.StrSchema
            __annotations__ = {
                "message": message,
                "layer_name": layer_name,
                "layer_type": layer_type,
                "module": module,
                "message_code": message_code,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    module: 'Module'
    message: MetaOapg.properties.message
    layer_name: MetaOapg.properties.layer_name
    layer_type: 'NodeType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["module"]) -> 'Module': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layer_name"]) -> MetaOapg.properties.layer_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layer_type"]) -> 'NodeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message_code"]) -> MetaOapg.properties.message_code: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["module"], typing_extensions.Literal["message"], typing_extensions.Literal["layer_name"], typing_extensions.Literal["layer_type"], typing_extensions.Literal["message_code"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["module"]) -> 'Module': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layer_name"]) -> MetaOapg.properties.layer_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layer_type"]) -> 'NodeType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message_code"]) -> typing.Union[MetaOapg.properties.message_code, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["module"], typing_extensions.Literal["message"], typing_extensions.Literal["layer_name"], typing_extensions.Literal["layer_type"], typing_extensions.Literal["message_code"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        module: 'Module',
        message: typing.Union[MetaOapg.properties.message, str, ],
        layer_name: typing.Union[MetaOapg.properties.layer_name, str, ],
        layer_type: 'NodeType',
        message_code: typing.Union[MetaOapg.properties.message_code, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'NodeMessageParams':
        return super().__new__(
            cls,
            *args,
            module=module,
            message=message,
            layer_name=layer_name,
            layer_type=layer_type,
            message_code=message_code,
            _configuration=_configuration,
        )

from openapi_client.model.module import Module
from openapi_client.model.node_type import NodeType

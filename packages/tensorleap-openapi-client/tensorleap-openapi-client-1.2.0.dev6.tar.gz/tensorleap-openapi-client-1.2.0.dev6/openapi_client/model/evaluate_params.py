# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class EvaluateParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "versionId",
            "modelId",
            "trainingParams",
            "dataStates",
            "shouldRunPopulationExploration",
            "evaluatedEpoch",
        }
        
        class properties:
            versionId = schemas.StrSchema
            modelId = schemas.StrSchema
        
            @staticmethod
            def trainingParams() -> typing.Type['TrainingParams']:
                return TrainingParams
            
            
            class dataStates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DataStateForEval']:
                        return DataStateForEval
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DataStateForEval'], typing.List['DataStateForEval']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dataStates':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DataStateForEval':
                    return super().__getitem__(i)
            shouldRunPopulationExploration = schemas.BoolSchema
            evaluatedEpoch = schemas.Float64Schema
            __annotations__ = {
                "versionId": versionId,
                "modelId": modelId,
                "trainingParams": trainingParams,
                "dataStates": dataStates,
                "shouldRunPopulationExploration": shouldRunPopulationExploration,
                "evaluatedEpoch": evaluatedEpoch,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    versionId: MetaOapg.properties.versionId
    modelId: MetaOapg.properties.modelId
    trainingParams: 'TrainingParams'
    dataStates: MetaOapg.properties.dataStates
    shouldRunPopulationExploration: MetaOapg.properties.shouldRunPopulationExploration
    evaluatedEpoch: MetaOapg.properties.evaluatedEpoch
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionId"]) -> MetaOapg.properties.versionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trainingParams"]) -> 'TrainingParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataStates"]) -> MetaOapg.properties.dataStates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shouldRunPopulationExploration"]) -> MetaOapg.properties.shouldRunPopulationExploration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["evaluatedEpoch"]) -> MetaOapg.properties.evaluatedEpoch: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["versionId"], typing_extensions.Literal["modelId"], typing_extensions.Literal["trainingParams"], typing_extensions.Literal["dataStates"], typing_extensions.Literal["shouldRunPopulationExploration"], typing_extensions.Literal["evaluatedEpoch"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionId"]) -> MetaOapg.properties.versionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trainingParams"]) -> 'TrainingParams': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataStates"]) -> MetaOapg.properties.dataStates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shouldRunPopulationExploration"]) -> MetaOapg.properties.shouldRunPopulationExploration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["evaluatedEpoch"]) -> MetaOapg.properties.evaluatedEpoch: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["versionId"], typing_extensions.Literal["modelId"], typing_extensions.Literal["trainingParams"], typing_extensions.Literal["dataStates"], typing_extensions.Literal["shouldRunPopulationExploration"], typing_extensions.Literal["evaluatedEpoch"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        versionId: typing.Union[MetaOapg.properties.versionId, str, ],
        modelId: typing.Union[MetaOapg.properties.modelId, str, ],
        trainingParams: 'TrainingParams',
        dataStates: typing.Union[MetaOapg.properties.dataStates, list, tuple, ],
        shouldRunPopulationExploration: typing.Union[MetaOapg.properties.shouldRunPopulationExploration, bool, ],
        evaluatedEpoch: typing.Union[MetaOapg.properties.evaluatedEpoch, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EvaluateParams':
        return super().__new__(
            cls,
            *args,
            versionId=versionId,
            modelId=modelId,
            trainingParams=trainingParams,
            dataStates=dataStates,
            shouldRunPopulationExploration=shouldRunPopulationExploration,
            evaluatedEpoch=evaluatedEpoch,
            _configuration=_configuration,
        )

from openapi_client.model.data_state_for_eval import DataStateForEval
from openapi_client.model.training_params import TrainingParams

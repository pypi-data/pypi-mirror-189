# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class UserDataMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            dnnLevel = schemas.StrSchema
            company = schemas.StrSchema
            title = schemas.StrSchema
            companySize = schemas.StrSchema
            __annotations__ = {
                "dnnLevel": dnnLevel,
                "company": company,
                "title": title,
                "companySize": companySize,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dnnLevel"]) -> MetaOapg.properties.dnnLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company"]) -> MetaOapg.properties.company: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companySize"]) -> MetaOapg.properties.companySize: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dnnLevel"], typing_extensions.Literal["company"], typing_extensions.Literal["title"], typing_extensions.Literal["companySize"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dnnLevel"]) -> typing.Union[MetaOapg.properties.dnnLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company"]) -> typing.Union[MetaOapg.properties.company, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companySize"]) -> typing.Union[MetaOapg.properties.companySize, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dnnLevel"], typing_extensions.Literal["company"], typing_extensions.Literal["title"], typing_extensions.Literal["companySize"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dnnLevel: typing.Union[MetaOapg.properties.dnnLevel, str, schemas.Unset] = schemas.unset,
        company: typing.Union[MetaOapg.properties.company, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        companySize: typing.Union[MetaOapg.properties.companySize, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'UserDataMetadata':
        return super().__new__(
            cls,
            *args,
            dnnLevel=dnnLevel,
            company=company,
            title=title,
            companySize=companySize,
            _configuration=_configuration,
        )

# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ScatterFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "metric",
            "value",
            "operator",
        }
        
        class properties:
            metric = schemas.StrSchema
            value = schemas.StrSchema
        
            @staticmethod
            def operator() -> typing.Type['OperatorEnum']:
                return OperatorEnum
        
            @staticmethod
            def data_state() -> typing.Type['DataStateType']:
                return DataStateType
            __annotations__ = {
                "metric": metric,
                "value": value,
                "operator": operator,
                "data_state": data_state,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    metric: MetaOapg.properties.metric
    value: MetaOapg.properties.value
    operator: 'OperatorEnum'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metric"]) -> MetaOapg.properties.metric: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator"]) -> 'OperatorEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_state"]) -> 'DataStateType': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["metric"], typing_extensions.Literal["value"], typing_extensions.Literal["operator"], typing_extensions.Literal["data_state"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metric"]) -> MetaOapg.properties.metric: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> 'OperatorEnum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_state"]) -> typing.Union['DataStateType', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metric"], typing_extensions.Literal["value"], typing_extensions.Literal["operator"], typing_extensions.Literal["data_state"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        metric: typing.Union[MetaOapg.properties.metric, str, ],
        value: typing.Union[MetaOapg.properties.value, str, ],
        operator: 'OperatorEnum',
        data_state: typing.Union['DataStateType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ScatterFilter':
        return super().__new__(
            cls,
            *args,
            metric=metric,
            value=value,
            operator=operator,
            data_state=data_state,
            _configuration=_configuration,
        )

from openapi_client.model.data_state_type import DataStateType
from openapi_client.model.operator_enum import OperatorEnum

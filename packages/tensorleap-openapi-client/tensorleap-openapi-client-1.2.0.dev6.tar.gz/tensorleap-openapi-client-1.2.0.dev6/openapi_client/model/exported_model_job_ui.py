# coding: utf-8

"""
    node-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.237
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ExportedModelJobUi(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "modelId",
            "_id",
            "title",
            "status",
        }
        
        class properties:
            _id = schemas.StrSchema
            modelId = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['JobStatus']:
                return JobStatus
            createdAt = schemas.StrSchema
            title = schemas.StrSchema
            exportedModelId = schemas.StrSchema
            __annotations__ = {
                "_id": _id,
                "modelId": modelId,
                "status": status,
                "createdAt": createdAt,
                "title": title,
                "exportedModelId": exportedModelId,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    createdAt: MetaOapg.properties.createdAt
    modelId: MetaOapg.properties.modelId
    _id: MetaOapg.properties._id
    title: MetaOapg.properties.title
    status: 'JobStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'JobStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportedModelId"]) -> MetaOapg.properties.exportedModelId: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["modelId"], typing_extensions.Literal["_id"], typing_extensions.Literal["title"], typing_extensions.Literal["status"], typing_extensions.Literal["exportedModelId"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'JobStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportedModelId"]) -> typing.Union[MetaOapg.properties.exportedModelId, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["createdAt"], typing_extensions.Literal["modelId"], typing_extensions.Literal["_id"], typing_extensions.Literal["title"], typing_extensions.Literal["status"], typing_extensions.Literal["exportedModelId"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, ],
        modelId: typing.Union[MetaOapg.properties.modelId, str, ],
        _id: typing.Union[MetaOapg.properties._id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        status: 'JobStatus',
        exportedModelId: typing.Union[MetaOapg.properties.exportedModelId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ExportedModelJobUi':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            modelId=modelId,
            _id=_id,
            title=title,
            status=status,
            exportedModelId=exportedModelId,
            _configuration=_configuration,
        )

from openapi_client.model.job_status import JobStatus

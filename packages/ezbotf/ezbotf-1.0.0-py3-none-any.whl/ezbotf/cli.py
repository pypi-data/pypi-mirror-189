"""
CLI helper for manage a framework data
"""

import argparse
import shutil
import pathlib
import tomlkit

import ezbotf


def get_instance(name: str) -> ezbotf.BotInstance | None:
    """Getting and initializes instance

    :param name: Name of instance to get

    :returns: Instance with imported config or None if it is not initialized
    """

    # check if folder is ezbotf instance
    if not pathlib.Path('./.ezbotf').exists():
        print('ERROR: This is not ezbotf instance folder')
        return

    config_path = pathlib.Path(f'./instances/{name}.toml')

    # check if config exists
    if not config_path.exists():
        print(f'ERROR: There is no instance with name "{name}"')
        return

    # initialize instance
    instance = ezbotf.BotInstance()
    instance.import_config(config_path)

    return instance


def initialize_environment(name: str):
    """Initializes new environment in new folder of current directory

    :param name: Name of the new environment
    """
    # create path to new instance
    new_env_path = pathlib.Path.cwd() / name
    # new_instance_path.mkdir(exist_ok=True)

    # copy default instance to current path
    shutil.copytree(pathlib.Path(__file__).parent / 'env_default', new_env_path)


def setup_instance(name: str, api_id: int, api_hash: str):
    """Setups existent instance

    :param name: Name of the instance
    :param api_id: API ID for the instance
    :param api_hash: API HASH for the instance
    """

    # get instance
    instance = get_instance(name)
    if not instance:
        return

    instance.config['api_id']     = api_id
    instance.config['api_hash']   = api_hash

    pathlib.Path(f'./instances/{name}.toml').write_text(tomlkit.dumps(instance.config))


def run_instance(name: str):
    """Runs instance

    :param name: Name of instance
    """

    # get instance
    instance = get_instance(name)
    if not instance:
        return

    # runs instance
    instance.fast_run()


####


def new_instance(name: str):
    """Creates new instance by name

    :param name: Name of the instance
    """

    # check if folder is ezbotf instance
    if not pathlib.Path('./.ezbotf').exists():
        print('ERROR: This is not ezbotf instance folder')
        return

    new_instance_path = pathlib.Path(f'./instances/{name}.toml')

    # copy default instance
    shutil.copyfile(pathlib.Path(__file__).parent / 'env_default/instances/default.toml',
                    new_instance_path)

    new_instance_path.write_text(new_instance_path.read_text().replace('DefaultInstance', name))


####


plugin_toml_default = """

name     = 'Example'      # name of the plugin
version  = '1.0.0'        # version of the plugin
author   = '<your name>'  # paste here your name

description       = 'This is an example plugin'  # small description of the plugin

# full description of the plugin (you may describe plugin in details)
full_description  = 'This is an example plugin generated by the EzBot Framework'

[executable]
main_file   = 'main.py'  # file with the main plugin class
main_class  = 'plugin'   # name of the plugin instance

[lang]
default  = 'en'      # default language of the plugin
langs    = [ 'en' ]  # supported languages

"""

plugin_config_default = """
text = "Hello, I'm a new plugin!"
"""

plugin_lang_en_default = """
[command.hello]
names = ['hello-{{__NAME__}}', 'h-{{__NAME__}}']
"""

plugin_main_default = """
import ezbotf

plugin = ezbotf.Plugin(ezbotf.PluginType.Standalone)


@plugin.on_load
def on_load():
    
    @plugin.command(plugin.translator.translations['command']['hello']['names'])
    async def hello(event, _):
        await ezbotf.messages.info(event, plugin.runtime_config['text'])

"""


def new_plugin(name: str, instance_name: str):
    """Creates new plugin

    :param name: Name of the new plugin
    :param instance_name: Name of the instance
    """

    # get instance
    instance = get_instance(instance_name)

    # check if instance successfully gotten
    if not instance:
        print('Cannot to create the plugin')
        return

    # get plugins dir
    plugins_dir = pathlib.Path(instance.config['dirs']['plugins_dir'])

    # check if plugins directory is exists
    if not (plugins_dir.exists() and plugins_dir.is_dir()):
        plugins_dir.mkdir(parents=True)

    # get directory of the plugin
    plugin_dir = plugins_dir / name.lower()

    # check if directory is exists
    if plugin_dir.exists():
        print('Plugin already exists')
        return

    # directories & files of the plugin
    plugin_toml  = plugin_dir / 'plugin.toml'
    plugin_main  = plugin_dir / 'main.py'

    plugin_config_dir  = plugin_dir / 'config'
    plugin_config      = plugin_config_dir / 'default.toml'

    plugin_lang_dir  = plugin_dir / 'lang'
    plugin_lang_en   = plugin_lang_dir / 'en.toml'

    # create directories
    for d in [plugin_dir, plugin_config_dir, plugin_lang_dir]:
        d.mkdir()

    # write files
    plugin_toml.write_text(plugin_toml_default.replace('{{__NAME__}}', name))
    plugin_config.write_text(plugin_config_default)
    plugin_lang_en.write_text(plugin_lang_en_default.replace('{{__NAME__}}', name))
    plugin_main.write_text(plugin_main_default)


def remove_plugin(name: str, instance_name: str):
    """Removes plugin

    :param name: Name of the plugin
    :param instance_name: Name of the instance
    """

    # get instance
    instance = get_instance(instance_name)

    # check if instance successfully gotten
    if not instance:
        print('Cannot to create the plugin')
        return

    # get plugins dir
    plugins_dir = pathlib.Path(instance.config['dirs']['plugins_dir'])

    # check if plugins directory is exists
    if not (plugins_dir.exists() and plugins_dir.is_dir()):
        print('Plugins directory for it instance isn\'t exists!')
        return

    # get directory of the plugin
    plugin_dir = plugins_dir / name.lower()

    # check if directory is exists
    if not plugin_dir.exists():
        print('Plugin isn\'t exists')
        return

    try:
        shutil.rmtree(plugin_dir)
    except Exception as e:
        print(f'Cannot to remove plugin. Exception: {e}')


def compile_plugin(name: str, instance_name: str):
    """Compiles the plugin

    :param name: Name of the plugin
    :param instance_name: Name of the instance
    """

    # get instance
    instance = get_instance(instance_name)

    # check if instance successfully gotten
    if not instance:
        print('Cannot to create the plugin')
        return

    # get plugins dir
    plugins_dir = pathlib.Path(instance.config['dirs']['plugins_dir'])

    # check if plugins directory is exists
    if not (plugins_dir.exists() and plugins_dir.is_dir()):
        print('Plugins directory for it instance isn\'t exists!')
        return

    # get directory of the plugin
    plugin_dir = plugins_dir / name.lower()

    # check if directory is exists
    if not plugin_dir.exists():
        print('Plugin isn\'t exists')
        return

    ezbotf.common.compile_plugin(plugin_dir, pathlib.Path.cwd() / f'{name}.plugin')


def install_plugin(path: pathlib.Path, instance_name: str):
    """Installs plugin

    :param path: Path to the compiled plugin
    :param instance_name: Name of the instance
    """

    # check if path format is plugin
    if not path.name.endswith('.plugin.zip'):
        print('Plugins must ends with .plugin.zip')
        return

    # get instance
    instance = get_instance(instance_name)

    # check if instance successfully gotten
    if not instance:
        print('Cannot to create the plugin')
        return

    # get plugins dir
    plugins_dir = pathlib.Path(instance.config['dirs']['plugins_dir'])

    # check if plugins directory is exists
    if not (plugins_dir.exists() and plugins_dir.is_dir()):
        plugins_dir.mkdir(parents=True)

    # get directory of the plugin
    plugin_dir = plugins_dir / path.name.lower()

    # check if directory is exists
    if plugin_dir.exists():
        print('Plugin already exists')
        return

    # try to install a plugin
    ezbotf.common.install_plugin(plugins_dir, path)

####


def main():
    """Main function for the CLI"""

    parser = argparse.ArgumentParser(description='Helps with EzBot Framework management')

    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + ezbotf.version.ezbotf_version_string_full,
                        help='Shows program version')
    parser.add_argument('--author', action='version',
                        version='ftdot (https://github.com/ftdot)',
                        help='Shows author of program')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Shows additional information')

    parser.add_argument('-i', '--initialize',
                        metavar='FOLDER NAME',
                        help='Initializes new ezbotf environment in the given folder name')

    subparsers = parser.add_subparsers(help='Subcommands for ')

    # instance management
    instance_parser = subparsers.add_parser('instance',
                                            help='Manipulate with the instances & environments')
    instance_parser.add_argument('-n', '--new-instance',
                                 metavar='NAME',
                                 help='Creates new instance in the current ezbotf environment')
    instance_parser.add_argument('-r', '--run',
                                 metavar='NAME',
                                 help='Runs instance by its name')

    instance_parser.add_argument('-s', '--setup',
                                 metavar='NAME',
                                 help='Setups instance by its name. Requires: --api-id, --api-hash')
    instance_parser.add_argument('--api-id',
                                 type=int,
                                 help='Telegram API ID parameter for the --setup argument')
    instance_parser.add_argument('--api-hash',
                                 help='Telegram API HASH parameter for the --setup argument')

    # plugin management
    plugin_parser = subparsers.add_parser('plugin',
                                          help='Plugins management in the current instance')
    plugin_parser.add_argument('-i', '--instance',
                               help='Instance with that manipulate')
    plugin_parser.add_argument('-n', '--new-plugin',
                               metavar='NAME',
                               help='Creates new plugin')
    plugin_parser.add_argument('-r', '--remove-plugin',
                               metavar='NAME',
                               help='Removes a plugin with giblets')
    plugin_parser.add_argument('-c', '--compile-plugin',
                               metavar='NAME',
                               help='Compiles a plugin to .zip')
    plugin_parser.add_argument('-I', '--install-plugin',
                               metavar='PATH',
                               help='Installs plugin to an instance')

    args = parser.parse_args()
    args_ = dir(args)

    if 'initialize' in args_ and args.initialize:
        initialize_environment(args.initialize)

    elif 'run' in args_ and args.run:
        run_instance(args.run)

    elif 'setup' in args_ and args.setup:
        if not (args.api_id and args.api_hash):
            instance_parser.print_help()

            print('--api-id, --api-hash arguments is required!')
            exit()

        setup_instance(args.setup, args.api_id, args.api_hash)

    elif 'new_instance' in args_ and args.new_instance:
        new_instance(args.new_instance)

    elif 'new_plugin' in args_ and args.new_plugin:
        if not args.instance:
            plugin_parser.print_help()

            print('-i, --instance argument is required!')
            exit()

        new_plugin(args.new_plugin, args.instance)

    elif 'remove_plugin' in args_ and args.remove_plugin:
        if not args.instance:
            plugin_parser.print_help()

            print('-i, --instance argument is required!')
            exit()

        remove_plugin(args.remove_plugin, args.instance)

    elif 'compile_plugin' in args_ and args.compile_plugin:
        if not args.instance:
            plugin_parser.print_help()

            print('-i, --instance argument is required!')
            exit()

        compile_plugin(args.compile_plugin, args.instance)

    elif 'install_plugin' in args_ and args.install_plugin:
        if not args.instance:
            plugin_parser.print_help()

            print('-i, --instance argument is required!')
            exit()

        install_plugin(pathlib.Path(args.install_plugin), args.instance)

    else:
        parser.print_help()

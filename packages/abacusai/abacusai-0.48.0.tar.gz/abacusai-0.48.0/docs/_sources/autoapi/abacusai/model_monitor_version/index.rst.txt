:py:mod:`abacusai.model_monitor_version`
========================================

.. py:module:: abacusai.model_monitor_version


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   abacusai.model_monitor_version.ModelMonitorVersion




.. py:class:: ModelMonitorVersion(client, modelMonitorVersion=None, status=None, modelMonitorId=None, monitoringStartedAt=None, monitoringCompletedAt=None, trainingFeatureGroupVersion=None, predictionFeatureGroupVersion=None, error=None, pendingDeploymentIds=None, failedDeploymentIds=None, metricConfigs=None, featureGroupMonitorConfigs=None, metricTypes=None, modelVersion=None, batchPredictionVersion=None, edaConfigs=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`

   A version of a model monitor

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param modelMonitorVersion: The unique identifier of a model monitor version.
   :type modelMonitorVersion: str
   :param status: The current status of the model.
   :type status: str
   :param modelMonitorId: A reference to the model monitor this version belongs to.
   :type modelMonitorId: str
   :param monitoringStartedAt: The start time and date of the monitoring process.
   :type monitoringStartedAt: str
   :param monitoringCompletedAt: The end time and date of the monitoring process.
   :type monitoringCompletedAt: str
   :param trainingFeatureGroupVersion: Feature group version IDs that this refresh pipeline run is monitoring.
   :type trainingFeatureGroupVersion: unique string identifiers
   :param predictionFeatureGroupVersion: Feature group version IDs that this refresh pipeline run is monitoring.
   :type predictionFeatureGroupVersion: unique string identifiers
   :param error: Relevant error if the status is FAILED.
   :type error: str
   :param pendingDeploymentIds: List of deployment IDs where deployment is pending.
   :type pendingDeploymentIds: list
   :param failedDeploymentIds: List of failed deployment IDs.
   :type failedDeploymentIds: list
   :param metricConfigs: List of metric configs for the model monitor instance.
   :type metricConfigs: json field
   :param featureGroupMonitorConfigs: Configurations for feature group monitor
   :type featureGroupMonitorConfigs: dict
   :param metricTypes: List of metric types.
   :type metricTypes: dict
   :param modelVersion: Model version IDs that this refresh pipeline run is monitoring.
   :type modelVersion: unique string identifiers
   :param batchPredictionVersion:
   :type batchPredictionVersion: str
   :param edaConfigs:
   :type edaConfigs: list

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict


   .. py:method:: get_prediction_drift()

      Gets the label and prediction drifts for a model monitor.

      :param model_monitor_version: The unique identifier to a model monitor version created under the project.
      :type model_monitor_version: str

      :returns: An object describing training and prediction output label and prediction distributions.
      :rtype: DriftDistributions


   .. py:method:: refresh()

      Calls describe and refreshes the current object's fields

      :returns: The current object
      :rtype: ModelMonitorVersion


   .. py:method:: describe()

      Retrieves a full description of the specified model monitor version

      :param model_monitor_version: The unique version ID of the model monitor version
      :type model_monitor_version: str

      :returns: A model monitor version.
      :rtype: ModelMonitorVersion


   .. py:method:: delete()

      Deletes the specified model monitor version.

      :param model_monitor_version: The ID of the model monitor version to delete.
      :type model_monitor_version: str


   .. py:method:: metric_data(metric_type, actual_values_to_detail = None)

      Provides the data needed for decile metrics associated with the model monitor.

      :param metric_type: The metric type to get data for.
      :type metric_type: str
      :param actual_values_to_detail:
      :type actual_values_to_detail: list

      :returns: Data associated with the metric.
      :rtype: ModelMonitorVersionMetricData


   .. py:method:: list_monitor_alert_versions_for_monitor_version()

      Retrieves the list of monitor alerts version for a specified monitor instance

      :param model_monitor_version: The unique ID associated with the model monitor.
      :type model_monitor_version: str

      :returns: An array of monitor alerts.
      :rtype: MonitorAlertVersion


   .. py:method:: get_model_monitoring_logs(stdout = False, stderr = False)

      Returns monitoring logs for the model.

      :param stdout: Set True to get info logs
      :type stdout: bool
      :param stderr: Set True to get error logs
      :type stderr: bool

      :returns: A function logs.
      :rtype: FunctionLogs


   .. py:method:: get_drift_for_feature(feature_name)

      Gets the feature drift associated with a single feature in an output feature group from a prediction.

      :param feature_name: Name of the feature to view the distribution of.
      :type feature_name: str


   .. py:method:: get_outliers_for_feature(feature_name = None)

      Gets a list of outliers measured by a single feature (or overall) in an output feature group from a prediction.

      :param feature_name: Name of the feature to view the distribution of.
      :type feature_name: str


   .. py:method:: wait_for_monitor(timeout=1200)

      A waiting call until model monitor version is ready.

      :param timeout: The waiting time given to the call to finish, if it doesn't finish by the allocated time, the call is said to be timed out.
      :type timeout: int, optional


   .. py:method:: get_status()

      Gets the status of the model monitor version.

      :returns: A string describing the status of the model monitor version, for e.g., pending, complete, etc.
      :rtype: str




:py:mod:`abacusai.eda_version`
==============================

.. py:module:: abacusai.eda_version


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   abacusai.eda_version.EdaVersion




.. py:class:: EdaVersion(client, edaVersion=None, status=None, edaId=None, edaStartedAt=None, edaCompletedAt=None, referenceFeatureGroupVersion=None, testFeatureGroupVersion=None, error=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`

   A version of an eda object

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param edaVersion: The unique identifier of a eda version.
   :type edaVersion: str
   :param status: The current status of the eda object.
   :type status: str
   :param edaId: A reference to the eda this version belongs to.
   :type edaId: str
   :param edaStartedAt: The start time and date of the eda process.
   :type edaStartedAt: str
   :param edaCompletedAt: The end time and date of the eda process.
   :type edaCompletedAt: str
   :param referenceFeatureGroupVersion: Feature group version IDs that this refresh pipeline run is analyzing.
   :type referenceFeatureGroupVersion: unique string identifiers
   :param testFeatureGroupVersion: Feature group version IDs that this refresh pipeline run is analyzing.
   :type testFeatureGroupVersion: unique string identifiers
   :param error: Relevant error if the status is FAILED.
   :type error: str

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict


   .. py:method:: refresh()

      Calls describe and refreshes the current object's fields

      :returns: The current object
      :rtype: EdaVersion


   .. py:method:: describe()

      Retrieves a full description of the specified eda version

      :param eda_version: The unique version ID of the eda version
      :type eda_version: str

      :returns: A eda version.
      :rtype: EdaVersion


   .. py:method:: delete()

      Deletes the specified eda version.

      :param eda_version: The ID of the eda version to delete.
      :type eda_version: str


   .. py:method:: get_eda_collinearity()

      Gets the Collinearity between all features for the Exploratory Data Analysis.

      :param eda_version: The unique ID associated with the EDA instance.
      :type eda_version: str

      :returns: An object with a record of correlations between each feature for an eda.
      :rtype: EdaCollinearity


   .. py:method:: get_eda_data_consistency(transformation_feature = None)

      Gets the data consistency for the Exploratory Data Analysis.

      :param transformation_feature:
      :type transformation_feature: str

      :returns: An object with duplication, deletion and transformation data for Data Consistency Analysis for an eda.
      :rtype: EdaDataConsistency


   .. py:method:: get_collinearity_for_feature(feature_name = None)

      Gets the Collinearity for the given feature from the Exploratory Data Analysis.

      :param feature_name: The name of the feature for which correlation shown
      :type feature_name: str

      :returns: An object with a record of correlations for the provided feature for an eda.
      :rtype: EdaFeatureCollinearity


   .. py:method:: get_feature_association(reference_feature_name, test_feature_name)

      Gets the Feature Association for the given features from the feature group version within the eda_version.

      :param reference_feature_name: The name of the feature for feature association (in x axis for the plots generated for the Feature association in the product)
      :type reference_feature_name: str
      :param test_feature_name: The name of the feature for feature association (in y axis for the plots generated for the Feature association in the product)
      :type test_feature_name: str

      :returns: An object with a record of data for the feature association between the two given features for an eda version.
      :rtype: EdaFeatureAssociation


   .. py:method:: wait_for_eda(timeout=1200)

      A waiting call until eda version is ready.

      :param timeout: The waiting time given to the call to finish, if it doesn't finish by the allocated time, the call is said to be timed out.
      :type timeout: int, optional


   .. py:method:: get_status()

      Gets the status of the eda version.

      :returns: A string describing the status of the model monitor version, for e.g., pending, complete, etc.
      :rtype: str




:py:mod:`abacusai.python_function`
==================================

.. py:module:: abacusai.python_function


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   abacusai.python_function.PythonFunction




.. py:class:: PythonFunction(client, notebookId=None, name=None, createdAt=None, functionVariableMappings=None, functionName=None, pythonFunctionId=None, functionType=None, codeSource={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`

   Customer created python function

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param notebookId: The unique identifier of the notebook used to spin up the notebook upon creation
   :type notebookId: str
   :param name: The name to identify the algorithm, only uppercase letters, numbers and underscore allowed
   :type name: str
   :param createdAt: When the python function was created
   :type createdAt: str
   :param functionVariableMappings:
   :type functionVariableMappings: dict
   :param functionName: The name of the python function to be used
   :type functionName: str
   :param pythonFunctionId: The unique identifier of the python function
   :type pythonFunctionId: str
   :param functionType: The type of the python function
   :type functionType: str
   :param codeSource: Info about the source code of the python function
   :type codeSource: CodeSource

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict


   .. py:method:: add_graph_to_dashboard(graph_dashboard_id, function_variable_mappings = None)

      Add a python plot function to a dashboard

      :param graph_dashboard_id: The graph dashboard id to update
      :type graph_dashboard_id: str
      :param function_variable_mappings: List of arguments to be supplied to the function as parameters in the format [{'name': 'function_argument', 'variable_type': 'FEATURE_GROUP', 'value': 'name_of_feature_group'}].
      :type function_variable_mappings: dict

      :returns: An object describing the graph dashboard
      :rtype: GraphDashboard


   .. py:method:: update_graph_to_dashboard(graph_dashboard_id, function_variable_mappings = None)

      Update a python plot function to a dashboard

      :param graph_dashboard_id: The graph dashboard id to update
      :type graph_dashboard_id: str
      :param function_variable_mappings: List of arguments to be supplied to the function as parameters in the format [{'name': 'function_argument', 'variable_type': 'FEATURE_GROUP', 'value': 'name_of_feature_group'}].
      :type function_variable_mappings: dict

      :returns: An object describing the graph dashboard
      :rtype: GraphDashboard


   .. py:method:: describe_graph_for_dashboard(graph_dashboard_id)

      Describes a python plot to a graph dashboard

      :param graph_dashboard_id: The graph dashboard id to update
      :type graph_dashboard_id: str

      :returns: An object describing the graph dashboard
      :rtype: PythonFunction




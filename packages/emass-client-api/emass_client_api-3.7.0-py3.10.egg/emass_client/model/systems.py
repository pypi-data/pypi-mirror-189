"""
    Enterprise Mission Assurance Support Service (eMASS)

    The Enterprise Mission Assurance Support Service (eMASS) Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.   <strong>Register External Application (that use the eMASS API)</strong></br> New users will need to [register](https://nisp.emass.apps.mil/Content/Help/jobaids/eMASS_OT_NewUser_Job_Aid.pdf) an API key with the eMASS development team prior to accessing the site for the first time. The eMASS REST API  requires a client certificate (SSL/TLS, DoD PKI only). Use the `Registration` endpoint to register the client certificate.</br></br>  Every call to the eMASS REST API will require the use of the agreed upon public key certificate and API key.  The API key must be provided in the request header for all endpoint calls (api-key). If the service receives an untrusted certificate or API key, a 401 error response code will be returned along with an error message.</br></br>  <strong>Available Request Headers</strong></br> <table>   <tr>     <th align=left>key</th>     <th align=left>Example Value</th>     <th align=left>Description</th>   </tr>   <tr>     <td>`api-key`</td>     <td>api-key-provided-by-emass</td>     <td>This API key must be provided in the request header for all endpoint calls</td>   </tr>   <tr>     <td>`user-uid`</td>     <td>USER.UID.KEY</td>     <td>This User unique identifier key must be provided in the request header for all PUT, POST, and DELETE endpoint calls</td>   </tr>   <tr>     <td></td><td></td>     <td>       Note: For DoD users this is the DoD ID Number (EIDIPI) on their DoD CAC     </td>   </tr> </table>  </br><strong>Approve API Client for Actionable Requests</strong></br> Users are required to log-in to eMASS and grant permissions for a client to update data within eMASS on their behalf. This is only required for actionable requests (PUT, POST, DELETE). The Registration Endpoint and all GET requests can be accessed without completing this process with the correct permissions. Please note that leaving a field parameter blank (for PUT/POST requests) has the potential to clear information in the active eMASS records.  To establish an account with eMASS and/or acquire an api-key/user-uid, contact one of the listed POC:   # noqa: E501

    The version of the OpenAPI document: v3.4
    Contact: disa.meade.id.mbx.emass-tier-iii-support@mail.mil
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from emass_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from emass_client.exceptions import ApiAttributeError


def lazy_import():
    from emass_client.model.connectivity_ccsd import ConnectivityCcsd
    from emass_client.model.pac_get import PacGet
    globals()['ConnectivityCcsd'] = ConnectivityCcsd
    globals()['PacGet'] = PacGet


class Systems(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('policy',): {
            'None': None,
            'RMF': "RMF",
            'DIACAP': "DIACAP",
        },
        ('registration_type',): {
            'None': None,
            'ASSESS_AND_AUTHORIZE': "Assess and Authorize",
            'ASSESS_ONLY': "Assess Only",
            'GUEST': "Guest",
            'REGULAR': "Regular",
            'FUNCTIONAL': "Functional",
            'CLOUD_SERVICE_PROVIDER': "Cloud Service Provider",
            'COMMON_CONTROL_PROVIDER': "Common Control Provider",
        },
        ('system_type',): {
            'None': None,
            'IS_MAJOR_APPLICATION': "IS Major Application",
            'IS_ENCLAVE': "IS Enclave",
            'PLATFORM_IT': "Platform IT",
            'PLATFORM_IT_SYSTEM': "Platform IT System",
            'PLATFORM_IT_INTERCONNECTION': "Platform IT Interconnection",
            'AIS_APPLICATION': "AIS Application",
            'OUTSOURCED_IT-BASED_PROCESS_(DOD-CONTROLLED)': "Outsourced IT-Based Process (DoD-controlled)",
            'ENCLAVE': "Enclave",
            'OUTSOURCED_IT-BASED_PROCESS_(SERVICE_PROVIDER_SHARED)': "Outsourced IT-Based Process (service provider shared)",
        },
        ('authorization_status',): {
            'None': None,
            'AUTHORITY_TO_OPERATE_(ATO)': "Authority to Operate (ATO)",
            'AUTHORIZATION_TO_OPERATE_(ATO)': "Authorization to Operate (ATO)",
            'AUTHORITY_TO_OPERATE_WITH_CONDITIONS_(ATO_W/CONDITIONS)': "Authority to Operate with Conditions (ATO w/Conditions)",
            'INTERIM_AUTHORITY_TO_TEST_(IATT)': "Interim Authority to Test (IATT)",
            'INTERIM_AUTHORITY_TO_OPERATE_(IATO)': "Interim Authority to Operate (IATO)",
            'DENIED_AUTHORITY_TO_OPERATE_(DATO)': "Denied Authority to Operate (DATO)",
            'DENIAL_OF_AUTHORIZATION_TO_OPERATE_(DATO)': "Denial of Authorization to Operate (DATO)",
            'NOT_YET_AUTHORIZED': "Not Yet Authorized",
            'DECOMMISSIONED': "Decommissioned",
            'UNACCREDITED': "Unaccredited",
        },
        ('security_plan_approval_status',): {
            'None': None,
            'APPROVED': "Approved",
            'NOT_YET_APPROVED': "Not Yet Approved",
            'DENIED': "Denied",
        },
        ('mission_criticality',): {
            'None': None,
            'CRITICAL_(MC)': "Mission Critical (MC)",
            'ESSENTIAL_(ME)': "Mission Essential (ME)",
            'SUPPORT_(MS)': "Mission Support (MS)",
        },
        ('geographical_association',): {
            'None': None,
            'VA_OPERATED_IS': "VA Operated IS",
            'NON-VA_OPERATED_IS': "non-VA Operated IS",
        },
        ('governing_mission_area',): {
            'None': None,
            'BUSINESS_MA_(BMA)': "Business MA (BMA)",
            'DOD_PORTION_OF_THE_INTELLIGENCE_MA_(DIMA)': "DoD portion of the Intelligence MA (DIMA)",
            'ENTERPRISE_INFORMATION_ENVIRONMENT_MA_(EIEMA)': "Enterprise Information Environment MA (EIEMA)",
            'WARFIGHTING_MA_(WMA)': "Warfighting MA (WMA)",
        },
        ('primary_control_set',): {
            'None': None,
            'NIST_SP_800-53_REVISION_4': "NIST SP 800-53 Revision 4",
            'DODI_8500.2': "DoDI 8500.2",
        },
        ('confidentiality',): {
            'None': None,
            'HIGH': "High",
            'MODERATE': "Moderate",
            'LOW': "Low",
        },
        ('integrity',): {
            'None': None,
            'HIGH': "High",
            'MODERATE': "Moderate",
            'LOW': "Low",
        },
        ('availability',): {
            'None': None,
            'HIGH': "High",
            'MODERATE': "Moderate",
            'LOW': "Low",
        },
        ('mac',): {
            'None': None,
            'I': "I",
            'II': "II",
            'III': "III",
        },
        ('dod_confidentiality',): {
            'None': None,
            'PUBLIC': "Public",
            'SENSITIVE': "Sensitive",
            'CLASSIFIED': "Classified",
        },
        ('impact',): {
            'None': None,
            'LOW': "Low",
            'MODERATE': "Moderate",
            'HIGH': "High",
        },
        ('pia_status',): {
            'None': None,
            'NOT_STARTED': "Not Started",
            'IN_PROGRESS': "In Progress",
            'COMPLETED': "Completed",
        },
        ('current_rmf_lifecycle_step',): {
            'None': None,
            '1_-_CATEGORIZE': "1 - Categorize",
            '2_-_SELECT': "2 - Select",
            '3_-_IMPLEMENT': "3 - Implement",
            '4_-_ASSESS': "4 - Assess",
            '5_-_AUTHORIZE': "5 - Authorize",
            '6_-_MONITOR': "6 - Monitor",
        },
    }

    validations = {
        ('authorization_length',): {
            'inclusive_maximum': 1825,
            'inclusive_minimum': 28,
        },
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'system_id': (int,),  # noqa: E501
            'policy': (str, none_type,),  # noqa: E501
            'registration_type': (str, none_type,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'acronym': (str, none_type,),  # noqa: E501
            'description': (str, none_type,),  # noqa: E501
            'system_owner': (str, none_type,),  # noqa: E501
            'organization_name': (str, none_type,),  # noqa: E501
            'secondary_organization': (str, none_type,),  # noqa: E501
            'version_release_no': (str, none_type,),  # noqa: E501
            'system_type': (str, none_type,),  # noqa: E501
            'is_nss': (bool, none_type,),  # noqa: E501
            'is_public_facing': (bool, none_type,),  # noqa: E501
            'coams_id': (int, none_type,),  # noqa: E501
            'is_type_authorization': (bool, none_type,),  # noqa: E501
            'ditpr_id': (str,),  # noqa: E501
            'authorization_status': (str, none_type,),  # noqa: E501
            'authorization_date': (int, none_type,),  # noqa: E501
            'authorization_termination_date': (int, none_type,),  # noqa: E501
            'authorization_length': (int, none_type,),  # noqa: E501
            'terms_for_auth': (str, none_type,),  # noqa: E501
            'security_plan_approval_status': (str, none_type,),  # noqa: E501
            'security_plan_approval_date': (int, none_type,),  # noqa: E501
            'mission_criticality': (str, none_type,),  # noqa: E501
            'geographical_association': (str, none_type,),  # noqa: E501
            'system_ownership': (str, none_type,),  # noqa: E501
            'governing_mission_area': (str, none_type,),  # noqa: E501
            'primary_functional_area': (str, none_type,),  # noqa: E501
            'secondary_functional_area': (str, none_type,),  # noqa: E501
            'primary_control_set': (str, none_type,),  # noqa: E501
            'confidentiality': (str, none_type,),  # noqa: E501
            'integrity': (str, none_type,),  # noqa: E501
            'availability': (str, none_type,),  # noqa: E501
            'applied_overlays': (str, none_type,),  # noqa: E501
            'rmf_activity': (str, none_type,),  # noqa: E501
            'cross_domain_ticket': (str, none_type,),  # noqa: E501
            'ditpr_don_id': (str, none_type,),  # noqa: E501
            'mac': (str, none_type,),  # noqa: E501
            'dod_confidentiality': (str, none_type,),  # noqa: E501
            'contingency_plan_tested': (bool, none_type,),  # noqa: E501
            'contingency_plan_test_date': (int, none_type,),  # noqa: E501
            'security_review_date': (int, none_type,),  # noqa: E501
            'has_open_poam_item': (bool, none_type,),  # noqa: E501
            'has_open_poam_item90to120_past_scheduled_completion_date': (bool, none_type,),  # noqa: E501
            'has_open_poam_item120_plus_past_scheudled_completion_date': (bool, none_type,),  # noqa: E501
            'impact': (str, none_type,),  # noqa: E501
            'has_cui': (bool, none_type,),  # noqa: E501
            'has_pii': (bool, none_type,),  # noqa: E501
            'has_phi': (bool, none_type,),  # noqa: E501
            'ppsm_registry_number': (str, none_type,),  # noqa: E501
            'interconnected_information_system_and_identifiers': (str, none_type,),  # noqa: E501
            'is_pia_required': (bool, none_type,),  # noqa: E501
            'pia_status': (str, none_type,),  # noqa: E501
            'pia_date': (int, none_type,),  # noqa: E501
            'user_defined_field1': (str, none_type,),  # noqa: E501
            'user_defined_field2': (str, none_type,),  # noqa: E501
            'user_defined_field3': (str, none_type,),  # noqa: E501
            'user_defined_field4': (str, none_type,),  # noqa: E501
            'user_defined_field5': (str, none_type,),  # noqa: E501
            'current_rmf_lifecycle_step': (str, none_type,),  # noqa: E501
            'other_information': (str, none_type,),  # noqa: E501
            'reports_for_scorecard': (bool, none_type,),  # noqa: E501
            'package': ([PacGet], none_type,),  # noqa: E501
            'connectivity_ccsd': ([ConnectivityCcsd], none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'system_id': 'systemId',  # noqa: E501
        'policy': 'policy',  # noqa: E501
        'registration_type': 'registrationType',  # noqa: E501
        'name': 'name',  # noqa: E501
        'acronym': 'acronym',  # noqa: E501
        'description': 'description',  # noqa: E501
        'system_owner': 'systemOwner',  # noqa: E501
        'organization_name': 'organizationName',  # noqa: E501
        'secondary_organization': 'secondaryOrganization',  # noqa: E501
        'version_release_no': 'versionReleaseNo',  # noqa: E501
        'system_type': 'systemType',  # noqa: E501
        'is_nss': 'isNSS',  # noqa: E501
        'is_public_facing': 'isPublicFacing',  # noqa: E501
        'coams_id': 'coamsId',  # noqa: E501
        'is_type_authorization': 'isTypeAuthorization',  # noqa: E501
        'ditpr_id': 'ditprId',  # noqa: E501
        'authorization_status': 'authorizationStatus',  # noqa: E501
        'authorization_date': 'authorizationDate',  # noqa: E501
        'authorization_termination_date': 'authorizationTerminationDate',  # noqa: E501
        'authorization_length': 'authorizationLength',  # noqa: E501
        'terms_for_auth': 'termsForAuth',  # noqa: E501
        'security_plan_approval_status': 'securityPlanApprovalStatus',  # noqa: E501
        'security_plan_approval_date': 'securityPlanApprovalDate',  # noqa: E501
        'mission_criticality': 'missionCriticality',  # noqa: E501
        'geographical_association': 'geographicalAssociation',  # noqa: E501
        'system_ownership': 'systemOwnership',  # noqa: E501
        'governing_mission_area': 'governingMissionArea',  # noqa: E501
        'primary_functional_area': 'primaryFunctionalArea',  # noqa: E501
        'secondary_functional_area': 'secondaryFunctionalArea',  # noqa: E501
        'primary_control_set': 'primaryControlSet',  # noqa: E501
        'confidentiality': 'confidentiality',  # noqa: E501
        'integrity': 'integrity',  # noqa: E501
        'availability': 'availability',  # noqa: E501
        'applied_overlays': 'appliedOverlays',  # noqa: E501
        'rmf_activity': 'rmfActivity',  # noqa: E501
        'cross_domain_ticket': 'crossDomainTicket',  # noqa: E501
        'ditpr_don_id': 'ditprDonId',  # noqa: E501
        'mac': 'mac',  # noqa: E501
        'dod_confidentiality': 'dodConfidentiality',  # noqa: E501
        'contingency_plan_tested': 'contingencyPlanTested',  # noqa: E501
        'contingency_plan_test_date': 'contingencyPlanTestDate',  # noqa: E501
        'security_review_date': 'securityReviewDate',  # noqa: E501
        'has_open_poam_item': 'hasOpenPoamItem',  # noqa: E501
        'has_open_poam_item90to120_past_scheduled_completion_date': 'hasOpenPoamItem90to120PastScheduledCompletionDate',  # noqa: E501
        'has_open_poam_item120_plus_past_scheudled_completion_date': 'hasOpenPoamItem120PlusPastScheudledCompletionDate',  # noqa: E501
        'impact': 'impact',  # noqa: E501
        'has_cui': 'hasCUI',  # noqa: E501
        'has_pii': 'hasPII',  # noqa: E501
        'has_phi': 'hasPHI',  # noqa: E501
        'ppsm_registry_number': 'ppsmRegistryNumber',  # noqa: E501
        'interconnected_information_system_and_identifiers': 'interconnectedInformationSystemAndIdentifiers',  # noqa: E501
        'is_pia_required': 'isPiaRequired',  # noqa: E501
        'pia_status': 'piaStatus',  # noqa: E501
        'pia_date': 'piaDate',  # noqa: E501
        'user_defined_field1': 'userDefinedField1',  # noqa: E501
        'user_defined_field2': 'userDefinedField2',  # noqa: E501
        'user_defined_field3': 'userDefinedField3',  # noqa: E501
        'user_defined_field4': 'userDefinedField4',  # noqa: E501
        'user_defined_field5': 'userDefinedField5',  # noqa: E501
        'current_rmf_lifecycle_step': 'currentRmfLifecycleStep',  # noqa: E501
        'other_information': 'otherInformation',  # noqa: E501
        'reports_for_scorecard': 'reportsForScorecard',  # noqa: E501
        'package': 'package',  # noqa: E501
        'connectivity_ccsd': 'connectivityCcsd',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Systems - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            system_id (int): [Read-only] Unique system record identifier.. [optional]  # noqa: E501
            policy (str, none_type): [Read-only] RMF/DIACAP Policy identifier for the system record.. [optional]  # noqa: E501
            registration_type (str, none_type): [Read-Only] Registration types parameters (assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider.). [optional]  # noqa: E501
            name (str, none_type): [Read-only] Name of the system record.. [optional]  # noqa: E501
            acronym (str, none_type): [Read-only] Acronym of the system record.. [optional]  # noqa: E501
            description (str, none_type): [Read-only] Description of the system record.. [optional]  # noqa: E501
            system_owner (str, none_type): [Read-only] Owning organization of the system record.. [optional]  # noqa: E501
            organization_name (str, none_type): [Read-only] Name of the top-level component that owns the system (e.g. Navy, Air Force, Army, etc..).. [optional]  # noqa: E501
            secondary_organization (str, none_type): [Read-only] Secondary organization that owns the system record (i.e. Sub-Organization-level.. [optional]  # noqa: E501
            version_release_no (str, none_type): [Read-only] Version/Release Number of system record.. [optional]  # noqa: E501
            system_type (str, none_type): [Read-only] Type of the system record. RMF values include the following options (IS Major Application, IS Enclave, Platform IT System). DIACAP values include the following options (Platform IT, Interconnection, AIS Application). [optional]  # noqa: E501
            is_nss (bool, none_type): [Read-only] Is the system record a National Security System?. [optional]  # noqa: E501
            is_public_facing (bool, none_type): [Read-only] Does the system record have a public facing component/presence.. [optional]  # noqa: E501
            coams_id (int, none_type): [Read-only] Corresponding Cyber Operational Attributes Management System (COAMS) identifier for the system record.. [optional]  # noqa: E501
            is_type_authorization (bool, none_type): [Read-only] Identifies if system is a Type Authorization.. [optional]  # noqa: E501
            ditpr_id (str): [Read-only] DITPR ID of the system record.. [optional]  # noqa: E501
            authorization_status (str, none_type): [Read-only] Authorization Status of the system record.. [optional]  # noqa: E501
            authorization_date (int, none_type): [Read-only] Authorization Date of the system record.. [optional]  # noqa: E501
            authorization_termination_date (int, none_type): [Read-only] Authorization Termination Date of the system record.. [optional]  # noqa: E501
            authorization_length (int, none_type): [Read-only] Length of system's Authorization. Calculated based off of Authorization Date & Authorization Termination Date.. [optional]  # noqa: E501
            terms_for_auth (str, none_type): [Read-only] Terms/Conditions for receiving and maintaining the system's Authorization. Assigned by the Authorizing Official.. [optional]  # noqa: E501
            security_plan_approval_status (str, none_type): [Read-only] Status of the approval of the system's RMF Security Plan. Values include the following options (Approved, Denied, Not Yet Approved).. [optional]  # noqa: E501
            security_plan_approval_date (int, none_type): [Read-only] Approval date of the system's RMF Security Plan.. [optional]  # noqa: E501
            mission_criticality (str, none_type): [Read-only] Mission Criticality of the system record. Values include the following options (Mission Critical (MC), Mission Essential (ME), Mission Support (MS).. [optional]  # noqa: E501
            geographical_association (str, none_type): [Read-only] Geographical Association of the system record (VA only).. [optional]  # noqa: E501
            system_ownership (str, none_type): [Read-only] Ownership of the system record (VA only).. [optional]  # noqa: E501
            governing_mission_area (str, none_type): [Read-only] Governing Mission Area of the system record.. [optional]  # noqa: E501
            primary_functional_area (str, none_type): [Read-only] Primary functional area of the system record.. [optional]  # noqa: E501
            secondary_functional_area (str, none_type): [Read-only] Secondary functional area of the system record.. [optional]  # noqa: E501
            primary_control_set (str, none_type): [Read-only] Primary Control Set of the system record. RMF values include the following options (NIST SP 800-53 Revision 4), DIACAP values include the following options (DoDI 8500.2). [optional]  # noqa: E501
            confidentiality (str, none_type): [Read-only] Confidentiality of the system record. RMF values include the following options (High, Moderate, Low). [optional]  # noqa: E501
            integrity (str, none_type): [Read-only] Integrity of the system record. RMF values include the following options (High, Moderate, Low). [optional]  # noqa: E501
            availability (str, none_type): [Read-only] Availability of the system record. RMF values include the following options (High, Moderate, Low). [optional]  # noqa: E501
            applied_overlays (str, none_type): [Read-only] Overlays applied to the system record.. [optional]  # noqa: E501
            rmf_activity (str, none_type): [Read-only] RMF Activity of the system record.. [optional]  # noqa: E501
            cross_domain_ticket (str, none_type): [Read-only] Cross Domain Tickets of the system record.. [optional]  # noqa: E501
            ditpr_don_id (str, none_type): [Read-Only] DITPR-DON identifier of the system record.. [optional]  # noqa: E501
            mac (str, none_type): [Read-Only] MAC level of the system record.. [optional]  # noqa: E501
            dod_confidentiality (str, none_type): [Read-Only] DoD Confidentiality level of the system record.. [optional]  # noqa: E501
            contingency_plan_tested (bool, none_type): [Read-only] Has the system record's Contingency Plan been tested?. [optional]  # noqa: E501
            contingency_plan_test_date (int, none_type): [Read-only] Date the system record's Contingency Plan was tested.. [optional]  # noqa: E501
            security_review_date (int, none_type): [Read-only] Date the system record's Annual Security Review was conducted.. [optional]  # noqa: E501
            has_open_poam_item (bool, none_type): [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item?. [optional]  # noqa: E501
            has_open_poam_item90to120_past_scheduled_completion_date (bool, none_type): [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item 90 to 120 days past its Scheduled Completion Date?. [optional]  # noqa: E501
            has_open_poam_item120_plus_past_scheudled_completion_date (bool, none_type): [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item 120 days past its Scheduled Completion Date?. [optional]  # noqa: E501
            impact (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            has_cui (bool, none_type): [Read-only] Does the system record contain and/or process Controlled Unclassified information?. [optional]  # noqa: E501
            has_pii (bool, none_type): [Read-only] Does the system record contain and/or process Personally Identifiable Information?. [optional]  # noqa: E501
            has_phi (bool, none_type): [Read-only] Does the system record contain and/or process Personal Health Information?. [optional]  # noqa: E501
            ppsm_registry_number (str, none_type): [Read-only] Unique identifier for the DoD’s Ports, Protocols, and Services Management Registry system.. [optional]  # noqa: E501
            interconnected_information_system_and_identifiers (str, none_type): [Read-only] Identify the interconnected information systems and corresponding identifiers within control CA-3.. [optional]  # noqa: E501
            is_pia_required (bool, none_type): [Read-only] Does the system require a Privacy Impact Assessment?. [optional]  # noqa: E501
            pia_status (str, none_type): [Read-only] Status of the PIA, availability values include the following options (Not Started, In Progress, Completed). [optional]  # noqa: E501
            pia_date (int, none_type): [Read-only] Date in which the system's PIA took place.. [optional]  # noqa: E501
            user_defined_field1 (str, none_type): [Read-only] User-defined field to augment Ad Hoc Reporting.. [optional]  # noqa: E501
            user_defined_field2 (str, none_type): [Read-only] User-defined field to augment Ad Hoc Reporting.. [optional]  # noqa: E501
            user_defined_field3 (str, none_type): [Read-only] User-defined field to augment Ad Hoc Reporting.. [optional]  # noqa: E501
            user_defined_field4 (str, none_type): [Read-only] User-defined field to augment Ad Hoc Reporting.. [optional]  # noqa: E501
            user_defined_field5 (str, none_type): [Read-only] User-defined field to augment Ad Hoc Reporting.. [optional]  # noqa: E501
            current_rmf_lifecycle_step (str, none_type): [Read-only] Displays the system's current step within the RMF Lifecycle.. [optional]  # noqa: E501
            other_information (str, none_type): [Read-only] Include any additional information required by the organization.. [optional]  # noqa: E501
            reports_for_scorecard (bool, none_type): [Read-only] Indicates if the system reports to the DoD Cyber Hygiene Scorecard.. [optional]  # noqa: E501
            package ([PacGet], none_type): [optional]  # noqa: E501
            connectivity_ccsd ([ConnectivityCcsd], none_type): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Systems - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            system_id (int): [Read-only] Unique system record identifier.. [optional]  # noqa: E501
            policy (str, none_type): [Read-only] RMF/DIACAP Policy identifier for the system record.. [optional]  # noqa: E501
            registration_type (str, none_type): [Read-Only] Registration types parameters (assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider.). [optional]  # noqa: E501
            name (str, none_type): [Read-only] Name of the system record.. [optional]  # noqa: E501
            acronym (str, none_type): [Read-only] Acronym of the system record.. [optional]  # noqa: E501
            description (str, none_type): [Read-only] Description of the system record.. [optional]  # noqa: E501
            system_owner (str, none_type): [Read-only] Owning organization of the system record.. [optional]  # noqa: E501
            organization_name (str, none_type): [Read-only] Name of the top-level component that owns the system (e.g. Navy, Air Force, Army, etc..).. [optional]  # noqa: E501
            secondary_organization (str, none_type): [Read-only] Secondary organization that owns the system record (i.e. Sub-Organization-level.. [optional]  # noqa: E501
            version_release_no (str, none_type): [Read-only] Version/Release Number of system record.. [optional]  # noqa: E501
            system_type (str, none_type): [Read-only] Type of the system record. RMF values include the following options (IS Major Application, IS Enclave, Platform IT System). DIACAP values include the following options (Platform IT, Interconnection, AIS Application). [optional]  # noqa: E501
            is_nss (bool, none_type): [Read-only] Is the system record a National Security System?. [optional]  # noqa: E501
            is_public_facing (bool, none_type): [Read-only] Does the system record have a public facing component/presence.. [optional]  # noqa: E501
            coams_id (int, none_type): [Read-only] Corresponding Cyber Operational Attributes Management System (COAMS) identifier for the system record.. [optional]  # noqa: E501
            is_type_authorization (bool, none_type): [Read-only] Identifies if system is a Type Authorization.. [optional]  # noqa: E501
            ditpr_id (str): [Read-only] DITPR ID of the system record.. [optional]  # noqa: E501
            authorization_status (str, none_type): [Read-only] Authorization Status of the system record.. [optional]  # noqa: E501
            authorization_date (int, none_type): [Read-only] Authorization Date of the system record.. [optional]  # noqa: E501
            authorization_termination_date (int, none_type): [Read-only] Authorization Termination Date of the system record.. [optional]  # noqa: E501
            authorization_length (int, none_type): [Read-only] Length of system's Authorization. Calculated based off of Authorization Date & Authorization Termination Date.. [optional]  # noqa: E501
            terms_for_auth (str, none_type): [Read-only] Terms/Conditions for receiving and maintaining the system's Authorization. Assigned by the Authorizing Official.. [optional]  # noqa: E501
            security_plan_approval_status (str, none_type): [Read-only] Status of the approval of the system's RMF Security Plan. Values include the following options (Approved, Denied, Not Yet Approved).. [optional]  # noqa: E501
            security_plan_approval_date (int, none_type): [Read-only] Approval date of the system's RMF Security Plan.. [optional]  # noqa: E501
            mission_criticality (str, none_type): [Read-only] Mission Criticality of the system record. Values include the following options (Mission Critical (MC), Mission Essential (ME), Mission Support (MS).. [optional]  # noqa: E501
            geographical_association (str, none_type): [Read-only] Geographical Association of the system record (VA only).. [optional]  # noqa: E501
            system_ownership (str, none_type): [Read-only] Ownership of the system record (VA only).. [optional]  # noqa: E501
            governing_mission_area (str, none_type): [Read-only] Governing Mission Area of the system record.. [optional]  # noqa: E501
            primary_functional_area (str, none_type): [Read-only] Primary functional area of the system record.. [optional]  # noqa: E501
            secondary_functional_area (str, none_type): [Read-only] Secondary functional area of the system record.. [optional]  # noqa: E501
            primary_control_set (str, none_type): [Read-only] Primary Control Set of the system record. RMF values include the following options (NIST SP 800-53 Revision 4), DIACAP values include the following options (DoDI 8500.2). [optional]  # noqa: E501
            confidentiality (str, none_type): [Read-only] Confidentiality of the system record. RMF values include the following options (High, Moderate, Low). [optional]  # noqa: E501
            integrity (str, none_type): [Read-only] Integrity of the system record. RMF values include the following options (High, Moderate, Low). [optional]  # noqa: E501
            availability (str, none_type): [Read-only] Availability of the system record. RMF values include the following options (High, Moderate, Low). [optional]  # noqa: E501
            applied_overlays (str, none_type): [Read-only] Overlays applied to the system record.. [optional]  # noqa: E501
            rmf_activity (str, none_type): [Read-only] RMF Activity of the system record.. [optional]  # noqa: E501
            cross_domain_ticket (str, none_type): [Read-only] Cross Domain Tickets of the system record.. [optional]  # noqa: E501
            ditpr_don_id (str, none_type): [Read-Only] DITPR-DON identifier of the system record.. [optional]  # noqa: E501
            mac (str, none_type): [Read-Only] MAC level of the system record.. [optional]  # noqa: E501
            dod_confidentiality (str, none_type): [Read-Only] DoD Confidentiality level of the system record.. [optional]  # noqa: E501
            contingency_plan_tested (bool, none_type): [Read-only] Has the system record's Contingency Plan been tested?. [optional]  # noqa: E501
            contingency_plan_test_date (int, none_type): [Read-only] Date the system record's Contingency Plan was tested.. [optional]  # noqa: E501
            security_review_date (int, none_type): [Read-only] Date the system record's Annual Security Review was conducted.. [optional]  # noqa: E501
            has_open_poam_item (bool, none_type): [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item?. [optional]  # noqa: E501
            has_open_poam_item90to120_past_scheduled_completion_date (bool, none_type): [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item 90 to 120 days past its Scheduled Completion Date?. [optional]  # noqa: E501
            has_open_poam_item120_plus_past_scheudled_completion_date (bool, none_type): [Read-Only] Does the system record have an Ongoing or Risk Accepted POA&M Item 120 days past its Scheduled Completion Date?. [optional]  # noqa: E501
            impact (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            has_cui (bool, none_type): [Read-only] Does the system record contain and/or process Controlled Unclassified information?. [optional]  # noqa: E501
            has_pii (bool, none_type): [Read-only] Does the system record contain and/or process Personally Identifiable Information?. [optional]  # noqa: E501
            has_phi (bool, none_type): [Read-only] Does the system record contain and/or process Personal Health Information?. [optional]  # noqa: E501
            ppsm_registry_number (str, none_type): [Read-only] Unique identifier for the DoD’s Ports, Protocols, and Services Management Registry system.. [optional]  # noqa: E501
            interconnected_information_system_and_identifiers (str, none_type): [Read-only] Identify the interconnected information systems and corresponding identifiers within control CA-3.. [optional]  # noqa: E501
            is_pia_required (bool, none_type): [Read-only] Does the system require a Privacy Impact Assessment?. [optional]  # noqa: E501
            pia_status (str, none_type): [Read-only] Status of the PIA, availability values include the following options (Not Started, In Progress, Completed). [optional]  # noqa: E501
            pia_date (int, none_type): [Read-only] Date in which the system's PIA took place.. [optional]  # noqa: E501
            user_defined_field1 (str, none_type): [Read-only] User-defined field to augment Ad Hoc Reporting.. [optional]  # noqa: E501
            user_defined_field2 (str, none_type): [Read-only] User-defined field to augment Ad Hoc Reporting.. [optional]  # noqa: E501
            user_defined_field3 (str, none_type): [Read-only] User-defined field to augment Ad Hoc Reporting.. [optional]  # noqa: E501
            user_defined_field4 (str, none_type): [Read-only] User-defined field to augment Ad Hoc Reporting.. [optional]  # noqa: E501
            user_defined_field5 (str, none_type): [Read-only] User-defined field to augment Ad Hoc Reporting.. [optional]  # noqa: E501
            current_rmf_lifecycle_step (str, none_type): [Read-only] Displays the system's current step within the RMF Lifecycle.. [optional]  # noqa: E501
            other_information (str, none_type): [Read-only] Include any additional information required by the organization.. [optional]  # noqa: E501
            reports_for_scorecard (bool, none_type): [Read-only] Indicates if the system reports to the DoD Cyber Hygiene Scorecard.. [optional]  # noqa: E501
            package ([PacGet], none_type): [optional]  # noqa: E501
            connectivity_ccsd ([ConnectivityCcsd], none_type): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

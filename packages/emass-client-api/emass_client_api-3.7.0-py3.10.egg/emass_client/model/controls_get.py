"""
    Enterprise Mission Assurance Support Service (eMASS)

    The Enterprise Mission Assurance Support Service (eMASS) Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.   <strong>Register External Application (that use the eMASS API)</strong></br> New users will need to [register](https://nisp.emass.apps.mil/Content/Help/jobaids/eMASS_OT_NewUser_Job_Aid.pdf) an API key with the eMASS development team prior to accessing the site for the first time. The eMASS REST API  requires a client certificate (SSL/TLS, DoD PKI only). Use the `Registration` endpoint to register the client certificate.</br></br>  Every call to the eMASS REST API will require the use of the agreed upon public key certificate and API key.  The API key must be provided in the request header for all endpoint calls (api-key). If the service receives an untrusted certificate or API key, a 401 error response code will be returned along with an error message.</br></br>  <strong>Available Request Headers</strong></br> <table>   <tr>     <th align=left>key</th>     <th align=left>Example Value</th>     <th align=left>Description</th>   </tr>   <tr>     <td>`api-key`</td>     <td>api-key-provided-by-emass</td>     <td>This API key must be provided in the request header for all endpoint calls</td>   </tr>   <tr>     <td>`user-uid`</td>     <td>USER.UID.KEY</td>     <td>This User unique identifier key must be provided in the request header for all PUT, POST, and DELETE endpoint calls</td>   </tr>   <tr>     <td></td><td></td>     <td>       Note: For DoD users this is the DoD ID Number (EIDIPI) on their DoD CAC     </td>   </tr> </table>  </br><strong>Approve API Client for Actionable Requests</strong></br> Users are required to log-in to eMASS and grant permissions for a client to update data within eMASS on their behalf. This is only required for actionable requests (PUT, POST, DELETE). The Registration Endpoint and all GET requests can be accessed without completing this process with the correct permissions. Please note that leaving a field parameter blank (for PUT/POST requests) has the potential to clear information in the active eMASS records.  To establish an account with eMASS and/or acquire an api-key/user-uid, contact one of the listed POC:   # noqa: E501

    The version of the OpenAPI document: v3.4
    Contact: disa.meade.id.mbx.emass-tier-iii-support@mail.mil
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from emass_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from emass_client.exceptions import ApiAttributeError



class ControlsGet(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('modified_by_overlays',): {
            'None': None,
            'PRIVACY': "Privacy",
            'REQUIREMENTS': "Requirements",
            'CONCURRENCY': "Concurrency",
        },
        ('implementation_status',): {
            'None': None,
            'PLANNED': "Planned",
            'IMPLEMENTED': "Implemented",
            'INHERITED': "Inherited",
            'NOT_APPLICABLE': "Not Applicable",
            'MANUALLY_INHERITED': "Manually Inherited",
        },
        ('common_control_provider',): {
            'None': None,
            'DOD': "DoD",
            'COMPONENT': "Component",
            'ENCLAVE': "Enclave",
        },
        ('control_designation',): {
            'COMMON': "Common",
            'SYSTEM-SPECIFIC': "System-Specific",
            'HYBRID': "Hybrid",
        },
        ('slcm_frequency',): {
            'None': None,
            'CONSTANTLY': "Constantly",
            'DAILY': "Daily",
            'WEEKLY': "Weekly",
            'MONTHLY': "Monthly",
            'QUARTERLY': "Quarterly",
            'SEMI-ANNUALLY': "Semi-Annually",
            'ANNUALLY': "Annually",
            'EVERY_TWO_YEARS': "Every Two Years",
            'EVERY_THREE_YEARS': "Every Three Years",
            'UNDETERMINED': "Undetermined",
        },
        ('slcm_method',): {
            'None': None,
            'AUTOMATED': "Automated",
            'SEMI-AUTOMATED': "Semi-Automated",
            'MANUAL': "Manual",
            'UNDETERMINED': "Undetermined",
        },
        ('severity',): {
            'None': None,
            'VERY_LOW': "Very Low",
            'LOW': "Low",
            'MODERATE': "Moderate",
            'HIGH': "High",
            'VERY_HIGH': "Very High",
        },
        ('relevance_of_threat',): {
            'None': None,
            'VERY_LOW': "Very Low",
            'LOW': "Low",
            'MODERATE': "Moderate",
            'HIGH': "High",
            'VERY_HIGH': "Very High",
        },
        ('likelihood',): {
            'None': None,
            'VERY_LOW': "Very Low",
            'LOW': "Low",
            'MODERATE': "Moderate",
            'HIGH': "High",
            'VERY_HIGH': "Very High",
        },
        ('impact',): {
            'None': None,
            'VERY_LOW': "Very Low",
            'LOW': "Low",
            'MODERATE': "Moderate",
            'HIGH': "High",
            'VERY_HIGH': "Very High",
        },
        ('residual_risk_level',): {
            'None': None,
            'VERY_LOW': "Very Low",
            'LOW': "Low",
            'MODERATE': "Moderate",
            'HIGH': "High",
            'VERY_HIGH': "Very High",
        },
        ('test_method',): {
            'None': None,
            'TEST': "Test",
            'INTERVIEW': "Interview",
            'EXAMINE': "Examine",
            'TEST,_INTERVIEW': "Test, Interview",
            'TEST,_EXAMINE': "Test, Examine",
            'INTERVIEW,_EXAMINE': "Interview, Examine",
            'TEST,_INTERVIEW,_EXAMINE': "Test, Interview, Examine",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'system_id': (int,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'acronym': (str,),  # noqa: E501
            'ccis': (str, none_type,),  # noqa: E501
            'is_inherited': (bool, none_type,),  # noqa: E501
            'modified_by_overlays': (str, none_type,),  # noqa: E501
            'included_status': (str, none_type,),  # noqa: E501
            'compliance_status': (str, none_type,),  # noqa: E501
            'responsible_entities': (str,),  # noqa: E501
            'implementation_status': (str, none_type,),  # noqa: E501
            'common_control_provider': (str, none_type,),  # noqa: E501
            'na_justification': (str, none_type,),  # noqa: E501
            'control_designation': (str,),  # noqa: E501
            'estimated_completion_date': (int,),  # noqa: E501
            'implementation_narrative': (str,),  # noqa: E501
            'slcm_criticality': (str, none_type,),  # noqa: E501
            'slcm_frequency': (str, none_type,),  # noqa: E501
            'slcm_method': (str, none_type,),  # noqa: E501
            'slcm_reporting': (str, none_type,),  # noqa: E501
            'slcm_tracking': (str, none_type,),  # noqa: E501
            'slcm_comments': (str, none_type,),  # noqa: E501
            'severity': (str, none_type,),  # noqa: E501
            'vulnerabilty_summary': (str, none_type,),  # noqa: E501
            'recommendations': (str, none_type,),  # noqa: E501
            'relevance_of_threat': (str, none_type,),  # noqa: E501
            'likelihood': (str, none_type,),  # noqa: E501
            'impact': (str, none_type,),  # noqa: E501
            'impact_description': (str, none_type,),  # noqa: E501
            'residual_risk_level': (str, none_type,),  # noqa: E501
            'test_method': (str, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'system_id': 'systemId',  # noqa: E501
        'name': 'name',  # noqa: E501
        'acronym': 'acronym',  # noqa: E501
        'ccis': 'ccis',  # noqa: E501
        'is_inherited': 'isInherited',  # noqa: E501
        'modified_by_overlays': 'modifiedByOverlays',  # noqa: E501
        'included_status': 'includedStatus',  # noqa: E501
        'compliance_status': 'complianceStatus',  # noqa: E501
        'responsible_entities': 'responsibleEntities',  # noqa: E501
        'implementation_status': 'implementationStatus',  # noqa: E501
        'common_control_provider': 'commonControlProvider',  # noqa: E501
        'na_justification': 'naJustification',  # noqa: E501
        'control_designation': 'controlDesignation',  # noqa: E501
        'estimated_completion_date': 'estimatedCompletionDate',  # noqa: E501
        'implementation_narrative': 'implementationNarrative',  # noqa: E501
        'slcm_criticality': 'slcmCriticality',  # noqa: E501
        'slcm_frequency': 'slcmFrequency',  # noqa: E501
        'slcm_method': 'slcmMethod',  # noqa: E501
        'slcm_reporting': 'slcmReporting',  # noqa: E501
        'slcm_tracking': 'slcmTracking',  # noqa: E501
        'slcm_comments': 'slcmComments',  # noqa: E501
        'severity': 'severity',  # noqa: E501
        'vulnerabilty_summary': 'vulnerabiltySummary',  # noqa: E501
        'recommendations': 'recommendations',  # noqa: E501
        'relevance_of_threat': 'relevanceOfThreat',  # noqa: E501
        'likelihood': 'likelihood',  # noqa: E501
        'impact': 'impact',  # noqa: E501
        'impact_description': 'impactDescription',  # noqa: E501
        'residual_risk_level': 'residualRiskLevel',  # noqa: E501
        'test_method': 'testMethod',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ControlsGet - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            system_id (int): [Required] Unique system record identifier.. [optional]  # noqa: E501
            name (str, none_type): [Read-only] Name of the system record.. [optional]  # noqa: E501
            acronym (str): [Required] Acronym of the system record.. [optional]  # noqa: E501
            ccis (str, none_type): [Read-only] Comma separated list of CCIs associated with the control.. [optional]  # noqa: E501
            is_inherited (bool, none_type): [Read-only] Indicates whether a control is inherited.. [optional]  # noqa: E501
            modified_by_overlays (str, none_type): [Read-only] List of overlays that affect the control.. [optional]  # noqa: E501
            included_status (str, none_type): [Read-only] Indicates the manner by which a control was included in the system’s categorization.. [optional]  # noqa: E501
            compliance_status (str, none_type): [Read-only] Compliance of the control.. [optional]  # noqa: E501
            responsible_entities (str): [Required] Include written description of Responsible Entities that are responsible for the Security Control. Character Limit = 2,000.. [optional]  # noqa: E501
            implementation_status (str, none_type): [Optional] Implementation Status of the Security Control for the information system.. [optional]  # noqa: E501
            common_control_provider (str, none_type): [Conditional] Indicate the type of Common Control Provider for an “Inherited” Security Control.. [optional]  # noqa: E501
            na_justification (str, none_type): [Conditional] Provide justification for Security Controls deemed Not Applicable to the system.. [optional]  # noqa: E501
            control_designation (str): [Required] Control designations. [optional]  # noqa: E501
            estimated_completion_date (int): [Required] Field is required for Implementation Plan.. [optional]  # noqa: E501
            implementation_narrative (str): [Required] Includes security control comments. Character Limit = 2,000.. [optional]  # noqa: E501
            slcm_criticality (str, none_type): [Conditional] Criticality of Security Control regarding SLCM. Character Limit = 2,000.. [optional]  # noqa: E501
            slcm_frequency (str, none_type): [Conditional] SLCM frequency. [optional]  # noqa: E501
            slcm_method (str, none_type): [Conditional] SLCM method utilized. [optional]  # noqa: E501
            slcm_reporting (str, none_type): [Conditional] Method for reporting Security Control for SLCM. Character Limit = 2,000.. [optional]  # noqa: E501
            slcm_tracking (str, none_type): [Conditional] How Non-Compliant Security Controls will be tracked for SLCM. Character Limit = 2,000.. [optional]  # noqa: E501
            slcm_comments (str, none_type): [Conditional] Additional comments for Security Control regarding SLCM. Character Limit = 4,000.. [optional]  # noqa: E501
            severity (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            vulnerabilty_summary (str, none_type): [Optional] Include vulnerability summary. Character Limit = 2,000.. [optional]  # noqa: E501
            recommendations (str, none_type): [Optional] Include recommendations. Character Limit = 2,000.. [optional]  # noqa: E501
            relevance_of_threat (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            likelihood (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            impact (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            impact_description (str, none_type): [Optional] Include description of Security Control’s impact.. [optional]  # noqa: E501
            residual_risk_level (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            test_method (str, none_type): [Optional] Identifies the assessment method / combination that will determine if the security requirements are implemented correctly.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ControlsGet - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            system_id (int): [Required] Unique system record identifier.. [optional]  # noqa: E501
            name (str, none_type): [Read-only] Name of the system record.. [optional]  # noqa: E501
            acronym (str): [Required] Acronym of the system record.. [optional]  # noqa: E501
            ccis (str, none_type): [Read-only] Comma separated list of CCIs associated with the control.. [optional]  # noqa: E501
            is_inherited (bool, none_type): [Read-only] Indicates whether a control is inherited.. [optional]  # noqa: E501
            modified_by_overlays (str, none_type): [Read-only] List of overlays that affect the control.. [optional]  # noqa: E501
            included_status (str, none_type): [Read-only] Indicates the manner by which a control was included in the system’s categorization.. [optional]  # noqa: E501
            compliance_status (str, none_type): [Read-only] Compliance of the control.. [optional]  # noqa: E501
            responsible_entities (str): [Required] Include written description of Responsible Entities that are responsible for the Security Control. Character Limit = 2,000.. [optional]  # noqa: E501
            implementation_status (str, none_type): [Optional] Implementation Status of the Security Control for the information system.. [optional]  # noqa: E501
            common_control_provider (str, none_type): [Conditional] Indicate the type of Common Control Provider for an “Inherited” Security Control.. [optional]  # noqa: E501
            na_justification (str, none_type): [Conditional] Provide justification for Security Controls deemed Not Applicable to the system.. [optional]  # noqa: E501
            control_designation (str): [Required] Control designations. [optional]  # noqa: E501
            estimated_completion_date (int): [Required] Field is required for Implementation Plan.. [optional]  # noqa: E501
            implementation_narrative (str): [Required] Includes security control comments. Character Limit = 2,000.. [optional]  # noqa: E501
            slcm_criticality (str, none_type): [Conditional] Criticality of Security Control regarding SLCM. Character Limit = 2,000.. [optional]  # noqa: E501
            slcm_frequency (str, none_type): [Conditional] SLCM frequency. [optional]  # noqa: E501
            slcm_method (str, none_type): [Conditional] SLCM method utilized. [optional]  # noqa: E501
            slcm_reporting (str, none_type): [Conditional] Method for reporting Security Control for SLCM. Character Limit = 2,000.. [optional]  # noqa: E501
            slcm_tracking (str, none_type): [Conditional] How Non-Compliant Security Controls will be tracked for SLCM. Character Limit = 2,000.. [optional]  # noqa: E501
            slcm_comments (str, none_type): [Conditional] Additional comments for Security Control regarding SLCM. Character Limit = 4,000.. [optional]  # noqa: E501
            severity (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            vulnerabilty_summary (str, none_type): [Optional] Include vulnerability summary. Character Limit = 2,000.. [optional]  # noqa: E501
            recommendations (str, none_type): [Optional] Include recommendations. Character Limit = 2,000.. [optional]  # noqa: E501
            relevance_of_threat (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            likelihood (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            impact (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            impact_description (str, none_type): [Optional] Include description of Security Control’s impact.. [optional]  # noqa: E501
            residual_risk_level (str, none_type): [Optional] Values include the following options (Very Low, Low, Moderate,High,Very High). [optional]  # noqa: E501
            test_method (str, none_type): [Optional] Identifies the assessment method / combination that will determine if the security requirements are implemented correctly.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

# coding: utf-8

"""
    Copilot SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from copilot_platforms_sdk import schemas  # noqa: F401


class ApiCompanyItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            
            
            class assignedUserIDs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assignedUserIDs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            avatarImageURL = schemas.StrSchema
            created = schemas.StrSchema
            deleted = schemas.BoolSchema
            fallbackColor = schemas.StrSchema
            id = schemas.StrSchema
            isPlaceholder = schemas.BoolSchema
            leadUserID = schemas.StrSchema
        
            @staticmethod
            def object() -> typing.Type['ConstantsApiObject']:
                return ConstantsApiObject
            __annotations__ = {
                "name": name,
                "assignedUserIDs": assignedUserIDs,
                "avatarImageURL": avatarImageURL,
                "created": created,
                "deleted": deleted,
                "fallbackColor": fallbackColor,
                "id": id,
                "isPlaceholder": isPlaceholder,
                "leadUserID": leadUserID,
                "object": object,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignedUserIDs"]) -> MetaOapg.properties.assignedUserIDs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatarImageURL"]) -> MetaOapg.properties.avatarImageURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fallbackColor"]) -> MetaOapg.properties.fallbackColor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPlaceholder"]) -> MetaOapg.properties.isPlaceholder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leadUserID"]) -> MetaOapg.properties.leadUserID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> 'ConstantsApiObject': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "assignedUserIDs", "avatarImageURL", "created", "deleted", "fallbackColor", "id", "isPlaceholder", "leadUserID", "object", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignedUserIDs"]) -> typing.Union[MetaOapg.properties.assignedUserIDs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatarImageURL"]) -> typing.Union[MetaOapg.properties.avatarImageURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fallbackColor"]) -> typing.Union[MetaOapg.properties.fallbackColor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPlaceholder"]) -> typing.Union[MetaOapg.properties.isPlaceholder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leadUserID"]) -> typing.Union[MetaOapg.properties.leadUserID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union['ConstantsApiObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "assignedUserIDs", "avatarImageURL", "created", "deleted", "fallbackColor", "id", "isPlaceholder", "leadUserID", "object", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        assignedUserIDs: typing.Union[MetaOapg.properties.assignedUserIDs, list, tuple, schemas.Unset] = schemas.unset,
        avatarImageURL: typing.Union[MetaOapg.properties.avatarImageURL, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        fallbackColor: typing.Union[MetaOapg.properties.fallbackColor, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        isPlaceholder: typing.Union[MetaOapg.properties.isPlaceholder, bool, schemas.Unset] = schemas.unset,
        leadUserID: typing.Union[MetaOapg.properties.leadUserID, str, schemas.Unset] = schemas.unset,
        object: typing.Union['ConstantsApiObject', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiCompanyItem':
        return super().__new__(
            cls,
            *args,
            name=name,
            assignedUserIDs=assignedUserIDs,
            avatarImageURL=avatarImageURL,
            created=created,
            deleted=deleted,
            fallbackColor=fallbackColor,
            id=id,
            isPlaceholder=isPlaceholder,
            leadUserID=leadUserID,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from copilot_platforms_sdk.model.constants_api_object import ConstantsApiObject

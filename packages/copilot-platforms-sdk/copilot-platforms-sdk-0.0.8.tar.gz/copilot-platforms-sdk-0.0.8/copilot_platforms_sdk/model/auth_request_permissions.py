# coding: utf-8

"""
    Copilot SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from copilot_platforms_sdk import schemas  # noqa: F401


class AuthRequestPermissions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            authPoolId = schemas.StrSchema
            cognitoUsername = schemas.StrSchema
            
            
            class companies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'companies':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            companyId = schemas.StrSchema
            getstreamId = schemas.StrSchema
            identityId = schemas.StrSchema
            isSuperUser = schemas.BoolSchema
            level = schemas.IntSchema
            ownerId = schemas.StrSchema
            queryPrefixString = schemas.StrSchema
            ref = schemas.StrSchema
            
            
            class roles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roles':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            sourceIP = schemas.StrSchema
            userId = schemas.StrSchema
            
            
            class viewMode(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            ConstantsViewMode,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'viewMode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "authPoolId": authPoolId,
                "cognitoUsername": cognitoUsername,
                "companies": companies,
                "companyId": companyId,
                "getstreamId": getstreamId,
                "identityId": identityId,
                "isSuperUser": isSuperUser,
                "level": level,
                "ownerId": ownerId,
                "queryPrefixString": queryPrefixString,
                "ref": ref,
                "roles": roles,
                "sourceIP": sourceIP,
                "userId": userId,
                "viewMode": viewMode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authPoolId"]) -> MetaOapg.properties.authPoolId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cognitoUsername"]) -> MetaOapg.properties.cognitoUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companies"]) -> MetaOapg.properties.companies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["getstreamId"]) -> MetaOapg.properties.getstreamId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identityId"]) -> MetaOapg.properties.identityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSuperUser"]) -> MetaOapg.properties.isSuperUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queryPrefixString"]) -> MetaOapg.properties.queryPrefixString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ref"]) -> MetaOapg.properties.ref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceIP"]) -> MetaOapg.properties.sourceIP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewMode"]) -> MetaOapg.properties.viewMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authPoolId", "cognitoUsername", "companies", "companyId", "getstreamId", "identityId", "isSuperUser", "level", "ownerId", "queryPrefixString", "ref", "roles", "sourceIP", "userId", "viewMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authPoolId"]) -> typing.Union[MetaOapg.properties.authPoolId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cognitoUsername"]) -> typing.Union[MetaOapg.properties.cognitoUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companies"]) -> typing.Union[MetaOapg.properties.companies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["getstreamId"]) -> typing.Union[MetaOapg.properties.getstreamId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identityId"]) -> typing.Union[MetaOapg.properties.identityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSuperUser"]) -> typing.Union[MetaOapg.properties.isSuperUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> typing.Union[MetaOapg.properties.level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerId"]) -> typing.Union[MetaOapg.properties.ownerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queryPrefixString"]) -> typing.Union[MetaOapg.properties.queryPrefixString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ref"]) -> typing.Union[MetaOapg.properties.ref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union[MetaOapg.properties.roles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceIP"]) -> typing.Union[MetaOapg.properties.sourceIP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewMode"]) -> typing.Union[MetaOapg.properties.viewMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authPoolId", "cognitoUsername", "companies", "companyId", "getstreamId", "identityId", "isSuperUser", "level", "ownerId", "queryPrefixString", "ref", "roles", "sourceIP", "userId", "viewMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        authPoolId: typing.Union[MetaOapg.properties.authPoolId, str, schemas.Unset] = schemas.unset,
        cognitoUsername: typing.Union[MetaOapg.properties.cognitoUsername, str, schemas.Unset] = schemas.unset,
        companies: typing.Union[MetaOapg.properties.companies, list, tuple, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        getstreamId: typing.Union[MetaOapg.properties.getstreamId, str, schemas.Unset] = schemas.unset,
        identityId: typing.Union[MetaOapg.properties.identityId, str, schemas.Unset] = schemas.unset,
        isSuperUser: typing.Union[MetaOapg.properties.isSuperUser, bool, schemas.Unset] = schemas.unset,
        level: typing.Union[MetaOapg.properties.level, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ownerId: typing.Union[MetaOapg.properties.ownerId, str, schemas.Unset] = schemas.unset,
        queryPrefixString: typing.Union[MetaOapg.properties.queryPrefixString, str, schemas.Unset] = schemas.unset,
        ref: typing.Union[MetaOapg.properties.ref, str, schemas.Unset] = schemas.unset,
        roles: typing.Union[MetaOapg.properties.roles, list, tuple, schemas.Unset] = schemas.unset,
        sourceIP: typing.Union[MetaOapg.properties.sourceIP, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        viewMode: typing.Union[MetaOapg.properties.viewMode, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthRequestPermissions':
        return super().__new__(
            cls,
            *args,
            authPoolId=authPoolId,
            cognitoUsername=cognitoUsername,
            companies=companies,
            companyId=companyId,
            getstreamId=getstreamId,
            identityId=identityId,
            isSuperUser=isSuperUser,
            level=level,
            ownerId=ownerId,
            queryPrefixString=queryPrefixString,
            ref=ref,
            roles=roles,
            sourceIP=sourceIP,
            userId=userId,
            viewMode=viewMode,
            _configuration=_configuration,
            **kwargs,
        )

from copilot_platforms_sdk.model.constants_view_mode import ConstantsViewMode

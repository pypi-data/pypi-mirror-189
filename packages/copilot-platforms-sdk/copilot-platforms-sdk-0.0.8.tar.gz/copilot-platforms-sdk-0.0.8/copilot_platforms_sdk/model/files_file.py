# coding: utf-8

"""
    Copilot SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from copilot_platforms_sdk import schemas  # noqa: F401


class FilesFile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "fields",
        }
        
        class properties:
        
            @staticmethod
            def fields() -> typing.Type['FilesFields']:
                return FilesFields
            additionalFields = schemas.DictSchema
            channelId = schemas.StrSchema
            createdAt = schemas.StrSchema
            createdBy = schemas.StrSchema
            id = schemas.StrSchema
            object = schemas.StrSchema
            updatedAt = schemas.StrSchema
            __annotations__ = {
                "fields": fields,
                "additionalFields": additionalFields,
                "channelId": channelId,
                "createdAt": createdAt,
                "createdBy": createdBy,
                "id": id,
                "object": object,
                "updatedAt": updatedAt,
            }
    
    fields: 'FilesFields'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'FilesFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalFields"]) -> MetaOapg.properties.additionalFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channelId"]) -> MetaOapg.properties.channelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fields", "additionalFields", "channelId", "createdAt", "createdBy", "id", "object", "updatedAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> 'FilesFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalFields"]) -> typing.Union[MetaOapg.properties.additionalFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channelId"]) -> typing.Union[MetaOapg.properties.channelId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fields", "additionalFields", "channelId", "createdAt", "createdBy", "id", "object", "updatedAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fields: 'FilesFields',
        additionalFields: typing.Union[MetaOapg.properties.additionalFields, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        channelId: typing.Union[MetaOapg.properties.channelId, str, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, schemas.Unset] = schemas.unset,
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FilesFile':
        return super().__new__(
            cls,
            *args,
            fields=fields,
            additionalFields=additionalFields,
            channelId=channelId,
            createdAt=createdAt,
            createdBy=createdBy,
            id=id,
            object=object,
            updatedAt=updatedAt,
            _configuration=_configuration,
            **kwargs,
        )

from copilot_platforms_sdk.model.files_fields import FilesFields

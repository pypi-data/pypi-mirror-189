# coding: utf-8

"""
    Copilot SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from copilot_platforms_sdk import schemas  # noqa: F401


class ApiFormResponseItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            clientId = schemas.StrSchema
            created = schemas.StrSchema
            deleted = schemas.BoolSchema
            formId = schemas.StrSchema
            id = schemas.StrSchema
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApiFormResponseInput']:
                        return ApiFormResponseInput
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ApiFormResponseInput'], typing.List['ApiFormResponseInput']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApiFormResponseInput':
                    return super().__getitem__(i)
        
            @staticmethod
            def object() -> typing.Type['ConstantsApiObject']:
                return ConstantsApiObject
            responseStatus = schemas.StrSchema
            __annotations__ = {
                "clientId": clientId,
                "created": created,
                "deleted": deleted,
                "formId": formId,
                "id": id,
                "items": items,
                "object": object,
                "responseStatus": responseStatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientId"]) -> MetaOapg.properties.clientId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formId"]) -> MetaOapg.properties.formId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> 'ConstantsApiObject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responseStatus"]) -> MetaOapg.properties.responseStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clientId", "created", "deleted", "formId", "id", "items", "object", "responseStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientId"]) -> typing.Union[MetaOapg.properties.clientId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formId"]) -> typing.Union[MetaOapg.properties.formId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union['ConstantsApiObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responseStatus"]) -> typing.Union[MetaOapg.properties.responseStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clientId", "created", "deleted", "formId", "id", "items", "object", "responseStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        clientId: typing.Union[MetaOapg.properties.clientId, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        formId: typing.Union[MetaOapg.properties.formId, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        object: typing.Union['ConstantsApiObject', schemas.Unset] = schemas.unset,
        responseStatus: typing.Union[MetaOapg.properties.responseStatus, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiFormResponseItem':
        return super().__new__(
            cls,
            *args,
            clientId=clientId,
            created=created,
            deleted=deleted,
            formId=formId,
            id=id,
            items=items,
            object=object,
            responseStatus=responseStatus,
            _configuration=_configuration,
            **kwargs,
        )

from copilot_platforms_sdk.model.api_form_response_input import ApiFormResponseInput
from copilot_platforms_sdk.model.constants_api_object import ConstantsApiObject

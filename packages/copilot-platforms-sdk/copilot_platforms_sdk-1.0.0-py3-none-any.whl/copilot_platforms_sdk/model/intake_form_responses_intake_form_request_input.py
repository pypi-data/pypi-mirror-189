# coding: utf-8

"""
    Copilot SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from copilot_platforms_sdk import schemas  # noqa: F401


class IntakeFormResponsesIntakeFormRequestInput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "recipientType",
        }
        
        class properties:
            recipientType = schemas.StrSchema
            formID = schemas.StrSchema
            recipientID = schemas.StrSchema
            __annotations__ = {
                "recipientType": recipientType,
                "formID": formID,
                "recipientID": recipientID,
            }
    
    recipientType: MetaOapg.properties.recipientType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipientType"]) -> MetaOapg.properties.recipientType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formID"]) -> MetaOapg.properties.formID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipientID"]) -> MetaOapg.properties.recipientID: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["recipientType", "formID", "recipientID", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipientType"]) -> MetaOapg.properties.recipientType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formID"]) -> typing.Union[MetaOapg.properties.formID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipientID"]) -> typing.Union[MetaOapg.properties.recipientID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["recipientType", "formID", "recipientID", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        recipientType: typing.Union[MetaOapg.properties.recipientType, str, ],
        formID: typing.Union[MetaOapg.properties.formID, str, schemas.Unset] = schemas.unset,
        recipientID: typing.Union[MetaOapg.properties.recipientID, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IntakeFormResponsesIntakeFormRequestInput':
        return super().__new__(
            cls,
            *args,
            recipientType=recipientType,
            formID=formID,
            recipientID=recipientID,
            _configuration=_configuration,
            **kwargs,
        )

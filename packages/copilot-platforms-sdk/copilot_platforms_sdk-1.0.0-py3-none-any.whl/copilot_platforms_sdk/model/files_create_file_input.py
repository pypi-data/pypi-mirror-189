# coding: utf-8

"""
    Copilot SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from copilot_platforms_sdk import schemas  # noqa: F401


class FilesCreateFileInput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "type",
            "channelID",
        }
        
        class properties:
            channelID = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "file": "FILE",
                        "folder": "FOLDER",
                        "link": "LINK",
                    }
                
                @schemas.classproperty
                def FILE(cls):
                    return cls("file")
                
                @schemas.classproperty
                def FOLDER(cls):
                    return cls("folder")
                
                @schemas.classproperty
                def LINK(cls):
                    return cls("link")
            fileKey = schemas.StrSchema
            fileUrl = schemas.StrSchema
            path = schemas.StrSchema
            __annotations__ = {
                "channelID": channelID,
                "type": type,
                "fileKey": fileKey,
                "fileUrl": fileUrl,
                "path": path,
            }
    
    type: MetaOapg.properties.type
    channelID: MetaOapg.properties.channelID
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channelID"]) -> MetaOapg.properties.channelID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileKey"]) -> MetaOapg.properties.fileKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileUrl"]) -> MetaOapg.properties.fileUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channelID", "type", "fileKey", "fileUrl", "path", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channelID"]) -> MetaOapg.properties.channelID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileKey"]) -> typing.Union[MetaOapg.properties.fileKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileUrl"]) -> typing.Union[MetaOapg.properties.fileUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channelID", "type", "fileKey", "fileUrl", "path", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        channelID: typing.Union[MetaOapg.properties.channelID, str, ],
        fileKey: typing.Union[MetaOapg.properties.fileKey, str, schemas.Unset] = schemas.unset,
        fileUrl: typing.Union[MetaOapg.properties.fileUrl, str, schemas.Unset] = schemas.unset,
        path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FilesCreateFileInput':
        return super().__new__(
            cls,
            *args,
            type=type,
            channelID=channelID,
            fileKey=fileKey,
            fileUrl=fileUrl,
            path=path,
            _configuration=_configuration,
            **kwargs,
        )

import numpy as np
from ..illuminants import whitepoints_cie1931 as whitepoints_cie1931
from ._color_space import ColorSpace as ColorSpace
from ._helpers import register as register
from _typeshed import Incomplete
from numpy.typing import ArrayLike as ArrayLike

class SRGBlinear(ColorSpace):
    invM: Incomplete
    default_mode: Incomplete
    name: str
    labels: Incomplete
    def __init__(self, default_mode: str = ..., whitepoint_correction: bool = ...) -> None: ...
    def from_xyz100(self, xyz: np.ndarray, mode: Union[str, None] = ...) -> np.ndarray: ...
    def to_xyz100(self, srgb1_linear: np.ndarray) -> np.ndarray: ...

class SRGB1(ColorSpace):
    name: str
    def __init__(self, default_mode: str = ...) -> None: ...
    def from_xyz100(self, xyz: np.ndarray, mode: Union[str, None] = ...) -> np.ndarray: ...
    def to_xyz100(self, coords: ArrayLike) -> np.ndarray: ...

class SRGB255(ColorSpace):
    name: str
    def __init__(self, default_mode: str = ...) -> None: ...
    def from_xyz100(self, xyz: np.ndarray, mode: Union[str, None] = ...) -> np.ndarray: ...
    def to_xyz100(self, coords: ArrayLike) -> np.ndarray: ...

class SRGBhex(ColorSpace):
    name: str
    prepend: Incomplete
    def __init__(self, default_mode: str = ..., prepend: str = ...) -> None: ...
    def from_xyz100(self, xyz: np.ndarray, mode: Union[str, None] = ...) -> np.ndarray: ...
    def to_xyz100(self, coords: ArrayLike) -> np.ndarray: ...

"""
    UniCourt API v2 - Beta APIs

    <button><a href=\"/apiv2/download/UniCourt-APIv2-Spec.yaml\" >Download Legal Analytics API Specification</a></button>   # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from apollo.api_client import ApiClient, Endpoint as _Endpoint
from apollo.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from apollo.model.exception import Exception
from apollo.model.norm_organization import NormOrganization
from apollo.model.norm_organization_search_response import NormOrganizationSearchResponse


class CompanyDataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_norm_organization_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NormOrganization,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/normOrganization/{normOrganizationId}',
                'operation_id': 'get_norm_organization_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'norm_organization_id',
                ],
                'required': [
                    'norm_organization_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'norm_organization_id',
                ]
            },
            root_map={
                'validations': {
                    ('norm_organization_id',): {
                        'max_length': 18,
                        'min_length': 17,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'norm_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'norm_organization_id': 'normOrganizationId',
                },
                'location_map': {
                    'norm_organization_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_normalized_organizations_endpoint = _Endpoint(
            settings={
                'response_type': (NormOrganizationSearchResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/normOrganizationSearch',
                'operation_id': 'search_normalized_organizations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                    'page_number',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'q',
                    'page_number',
                ]
            },
            root_map={
                'validations': {
                    ('q',): {
                        'max_length': 2000,
                        'min_length': 3,
                    },
                    ('page_number',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'q':
                        (str,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'q': 'q',
                    'page_number': 'pageNumber',
                },
                'location_map': {
                    'q': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_normalized_organizations_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (NormOrganizationSearchResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/normOrganizationSearch/{normOrganizationSearchId}',
                'operation_id': 'search_normalized_organizations_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'norm_organization_search_id',
                    'page_number',
                ],
                'required': [
                    'norm_organization_search_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'norm_organization_search_id',
                    'page_number',
                ]
            },
            root_map={
                'validations': {
                    ('norm_organization_search_id',): {
                        'max_length': 18,
                        'min_length': 18,
                    },
                    ('page_number',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'norm_organization_search_id':
                        (str,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'norm_organization_search_id': 'normOrganizationSearchId',
                    'page_number': 'pageNumber',
                },
                'location_map': {
                    'norm_organization_search_id': 'path',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_norm_organization_by_id(
        self,
        norm_organization_id,
        **kwargs
    ):
        """Norm Organization Details.  # noqa: E501

        The Norm Organization API allows you to look up organizations by normOrganizationId.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_norm_organization_by_id(norm_organization_id, async_req=True)
        >>> result = thread.get()

        Args:
            norm_organization_id (str): norm ID of the organization.   - minimum: 17   - maximum: 18 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NormOrganization
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['norm_organization_id'] = \
            norm_organization_id
        return self.get_norm_organization_by_id_endpoint.call_with_http_info(**kwargs)

    def search_normalized_organizations(
        self,
        **kwargs
    ):
        """Organization search.  # noqa: E501

        ### All query parameters supported for this API can be found in below schema section. Schema --> NormOrganizationSearchQueryObject   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_normalized_organizations(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            q (str): The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.</a> . [optional]
            page_number (int): Page number. - Minimum: 1 - Maximum: 1000 . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NormOrganizationSearchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.search_normalized_organizations_endpoint.call_with_http_info(**kwargs)

    def search_normalized_organizations_by_id(
        self,
        norm_organization_search_id,
        **kwargs
    ):
        """Norm organization search result for a given normOrganizationSearchId.  # noqa: E501

        ### All query parameters supported for this API can be found in below schema section. Schema --> NormOrganizationSearchQueryObject   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_normalized_organizations_by_id(norm_organization_search_id, async_req=True)
        >>> result = thread.get()

        Args:
            norm_organization_search_id (str): Norm organization search information for the given normOrganizationSearchId.

        Keyword Args:
            page_number (int): Page number. - Minimum: 1 - Maximum: 1000 . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NormOrganizationSearchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['norm_organization_search_id'] = \
            norm_organization_search_id
        return self.search_normalized_organizations_by_id_endpoint.call_with_http_info(**kwargs)


# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tesseract_motion_planners_descartes_python
else:
    import _tesseract_motion_planners_descartes_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _tesseract_motion_planners_descartes_python.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _tesseract_motion_planners_descartes_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.SwigPyIterator_swigregister(SwigPyIterator)

class vector_eigen_index(object, metaclass=_SwigNonDynamicMeta):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index___bool__(self)

    def __len__(self) -> "std::vector< ptrdiff_t >::size_type":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index___len__(self)

    def __getslice__(self, i: "std::vector< ptrdiff_t >::difference_type", j: "std::vector< ptrdiff_t >::difference_type") -> "std::vector< ptrdiff_t,std::allocator< ptrdiff_t > > *":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< ptrdiff_t >::difference_type", j: "std::vector< ptrdiff_t >::difference_type") -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< ptrdiff_t >::value_type const &":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index___setitem__(self, *args)

    def pop(self) -> "std::vector< ptrdiff_t >::value_type":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_pop(self)

    def append(self, x: "std::vector< ptrdiff_t >::value_type const &") -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_empty(self)

    def size(self) -> "std::vector< ptrdiff_t >::size_type":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_size(self)

    def swap(self, v: "vector_eigen_index") -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_swap(self, v)

    def begin(self) -> "std::vector< ptrdiff_t >::iterator":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_begin(self)

    def end(self) -> "std::vector< ptrdiff_t >::iterator":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_end(self)

    def rbegin(self) -> "std::vector< ptrdiff_t >::reverse_iterator":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_rbegin(self)

    def rend(self) -> "std::vector< ptrdiff_t >::reverse_iterator":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_rend(self)

    def clear(self) -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_clear(self)

    def get_allocator(self) -> "std::vector< ptrdiff_t >::allocator_type":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_pop_back(self)

    def erase(self, *args) -> "std::vector< ptrdiff_t >::iterator":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_erase(self, *args)

    def __init__(self, *args):
        _tesseract_motion_planners_descartes_python.vector_eigen_index_swiginit(self, _tesseract_motion_planners_descartes_python.new_vector_eigen_index(*args))

    def push_back(self, x: "std::vector< ptrdiff_t >::value_type const &") -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_push_back(self, x)

    def front(self) -> "std::vector< ptrdiff_t >::value_type const &":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_front(self)

    def back(self) -> "std::vector< ptrdiff_t >::value_type const &":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_back(self)

    def assign(self, n: "std::vector< ptrdiff_t >::size_type", x: "std::vector< ptrdiff_t >::value_type const &") -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_insert(self, *args)

    def reserve(self, n: "std::vector< ptrdiff_t >::size_type") -> "void":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_reserve(self, n)

    def capacity(self) -> "std::vector< ptrdiff_t >::size_type":
        return _tesseract_motion_planners_descartes_python.vector_eigen_index_capacity(self)
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_vector_eigen_index

# Register vector_eigen_index in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.vector_eigen_index_swigregister(vector_eigen_index)

import tesseract_robotics.tesseract_motion_planners.tesseract_motion_planners_python
import tesseract_robotics.tesseract_environment.tesseract_environment_python
import tesseract_robotics.tesseract_kinematics.tesseract_kinematics_python
import tesseract_robotics.tesseract_common.tesseract_common_python
import tesseract_robotics.tesseract_scene_graph.tesseract_scene_graph_python
import tesseract_robotics.tesseract_geometry.tesseract_geometry_python
import tesseract_robotics.tesseract_srdf.tesseract_srdf_python
import tesseract_robotics.tesseract_state_solver.tesseract_state_solver_python
import tesseract_robotics.tesseract_collision.tesseract_collision_python
import tesseract_robotics.tesseract_command_language.tesseract_command_language_python

def sampleToolAxis(tool_pose: "Isometry3d", resolution: "double", axis: "Eigen::Vector3d const &") -> "Eigen::Isometry3d const &, Eigen::Vector3d const &":
    r"""
    Given a tool pose create samples from [-PI, PI) around the provided axis.
    :type tool_pose: :py:class:`Isometry3d`
    :param tool_pose: Tool pose to be sampled
    :type resolution: float
    :param resolution: The resolution to sample at
    :type axis: Eigen::Vector3d
    :param axis: The axis to sample around
    :rtype: :py:class:`VectorIsometry3d`
    :return: A vector of tool poses
    """
    return _tesseract_motion_planners_descartes_python.sampleToolAxis(tool_pose, resolution, axis)

def sampleToolXAxis(tool_pose: "Isometry3d", resolution: "double") -> "Eigen::Isometry3d const &":
    r"""
    Given a tool pose create samples from [-PI, PI) around the x axis.
    :type tool_pose: :py:class:`Isometry3d`
    :param tool_pose: Tool pose to be sampled
    :type resolution: float
    :param resolution: The resolution to sample at
    :rtype: :py:class:`VectorIsometry3d`
    :return: A vector of tool poses
    """
    return _tesseract_motion_planners_descartes_python.sampleToolXAxis(tool_pose, resolution)

def sampleToolYAxis(tool_pose: "Isometry3d", resolution: "double") -> "Eigen::Isometry3d const &":
    r"""
    Given a tool pose create samples from [-PI, PI) around the y axis.
    :type tool_pose: :py:class:`Isometry3d`
    :param tool_pose: Tool pose to be sampled
    :type resolution: float
    :param resolution: The resolution to sample at
    :rtype: :py:class:`VectorIsometry3d`
    :return: A vector of tool poses
    """
    return _tesseract_motion_planners_descartes_python.sampleToolYAxis(tool_pose, resolution)

def sampleToolZAxis(tool_pose: "Isometry3d", resolution: "double") -> "Eigen::Isometry3d const &":
    r"""
    Given a tool pose create samples from [-PI, PI) around the z axis.
    :type tool_pose: :py:class:`Isometry3d`
    :param tool_pose: Tool pose to be sampled
    :type resolution: float
    :param resolution: The resolution to sample at
    :rtype: :py:class:`VectorIsometry3d`
    :return: A vector of tool poses
    """
    return _tesseract_motion_planners_descartes_python.sampleToolZAxis(tool_pose, resolution)

def sampleFixed(tool_pose: "Isometry3d") -> "Eigen::Isometry3d const &":
    r"""
    This is the default sample with if a fixed pose sampler
    :type tool_pose: :py:class:`Isometry3d`
    :param tool_pose: Tool pose to be sampled
    :rtype: :py:class:`VectorIsometry3d`
    :return: A vector with a single pose that was provided as input to function
    """
    return _tesseract_motion_planners_descartes_python.sampleFixed(tool_pose)
class PoseSamplerFnBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def call(self, a: "Isometry3d") -> "tesseract_common::VectorIsometry3d":
        return _tesseract_motion_planners_descartes_python.PoseSamplerFnBase_call(self, a)
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_PoseSamplerFnBase

    def __init__(self):
        if self.__class__ == PoseSamplerFnBase:
            _self = None
        else:
            _self = self
        _tesseract_motion_planners_descartes_python.PoseSamplerFnBase_swiginit(self, _tesseract_motion_planners_descartes_python.new_PoseSamplerFnBase(_self, ))
    def __disown__(self):
        self.this.disown()
        _tesseract_motion_planners_descartes_python.disown_PoseSamplerFnBase(self)
        return weakref.proxy(self)

# Register PoseSamplerFnBase in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.PoseSamplerFnBase_swigregister(PoseSamplerFnBase)



class PoseSamplerFn(PoseSamplerFnBase):
  def __init__(self,fn):
    super(PoseSamplerFn,self).__init__()
    self._fn = fn

  def call(self,*args):
    return self._fn(*args)

class DescartesProblemD(object, metaclass=_SwigNonDynamicMeta):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    env = property(_tesseract_motion_planners_descartes_python.DescartesProblemD_env_get, _tesseract_motion_planners_descartes_python.DescartesProblemD_env_set)
    env_state = property(_tesseract_motion_planners_descartes_python.DescartesProblemD_env_state_get, _tesseract_motion_planners_descartes_python.DescartesProblemD_env_state_set)
    manip = property(_tesseract_motion_planners_descartes_python.DescartesProblemD_manip_get, _tesseract_motion_planners_descartes_python.DescartesProblemD_manip_set)
    edge_evaluators = property(_tesseract_motion_planners_descartes_python.DescartesProblemD_edge_evaluators_get, _tesseract_motion_planners_descartes_python.DescartesProblemD_edge_evaluators_set)
    samplers = property(_tesseract_motion_planners_descartes_python.DescartesProblemD_samplers_get, _tesseract_motion_planners_descartes_python.DescartesProblemD_samplers_set)
    state_evaluators = property(_tesseract_motion_planners_descartes_python.DescartesProblemD_state_evaluators_get, _tesseract_motion_planners_descartes_python.DescartesProblemD_state_evaluators_set)
    num_threads = property(_tesseract_motion_planners_descartes_python.DescartesProblemD_num_threads_get, _tesseract_motion_planners_descartes_python.DescartesProblemD_num_threads_set)

    def __init__(self):
        _tesseract_motion_planners_descartes_python.DescartesProblemD_swiginit(self, _tesseract_motion_planners_descartes_python.new_DescartesProblemD())
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_DescartesProblemD

# Register DescartesProblemD in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.DescartesProblemD_swigregister(DescartesProblemD)

class DescartesMotionPlannerStatusCategory(tesseract_robotics.tesseract_common.tesseract_common_python.StatusCategory):
    r"""
    The Descartes motion planner status category

    It contains both successfull and error status codes.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, name: "std::string"):
        _tesseract_motion_planners_descartes_python.DescartesMotionPlannerStatusCategory_swiginit(self, _tesseract_motion_planners_descartes_python.new_DescartesMotionPlannerStatusCategory(name))

    def name(self) -> "std::string const &":
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerStatusCategory_name(self)

    def message(self, code: "int") -> "std::string":
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerStatusCategory_message(self, code)
    SolutionFound = _tesseract_motion_planners_descartes_python.DescartesMotionPlannerStatusCategory_SolutionFound
    ErrorInvalidInput = _tesseract_motion_planners_descartes_python.DescartesMotionPlannerStatusCategory_ErrorInvalidInput
    ErrorFailedToBuildGraph = _tesseract_motion_planners_descartes_python.DescartesMotionPlannerStatusCategory_ErrorFailedToBuildGraph
    ErrorFailedToFindValidSolution = _tesseract_motion_planners_descartes_python.DescartesMotionPlannerStatusCategory_ErrorFailedToFindValidSolution
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_DescartesMotionPlannerStatusCategory

# Register DescartesMotionPlannerStatusCategory in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.DescartesMotionPlannerStatusCategory_swigregister(DescartesMotionPlannerStatusCategory)

class DescartesPlanProfileD(object, metaclass=_SwigNonDynamicMeta):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_motion_planners_descartes_python.DescartesPlanProfileD_swiginit(self, _tesseract_motion_planners_descartes_python.new_DescartesPlanProfileD())
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_DescartesPlanProfileD

# Register DescartesPlanProfileD in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.DescartesPlanProfileD_swigregister(DescartesPlanProfileD)

class DescartesPlanProfileMapD(object, metaclass=_SwigNonDynamicMeta):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::size_type":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::key_type const &") -> "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::mapped_type const &":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::key_type const &") -> "void":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::key_type const &") -> "bool":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_keys(self)

    def values(self) -> "PyObject *":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_values(self)

    def items(self) -> "PyObject *":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::key_type const &") -> "bool":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_asdict(self)

    def __init__(self, *args):
        _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_swiginit(self, _tesseract_motion_planners_descartes_python.new_DescartesPlanProfileMapD(*args))

    def empty(self) -> "bool":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::size_type":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_size(self)

    def swap(self, v: "DescartesPlanProfileMapD") -> "void":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::iterator":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::iterator":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_end(self)

    def clear(self) -> "void":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::allocator_type":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::key_type const &") -> "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::size_type":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_count(self, x)

    def erase(self, *args) -> "void":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::key_type const &") -> "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > >::iterator":
        return _tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_find(self, x)
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_DescartesPlanProfileMapD

# Register DescartesPlanProfileMapD in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.DescartesPlanProfileMapD_swigregister(DescartesPlanProfileMapD)


def ProfileDictionary_hasProfileEntry_DescartesPlanProfileD(profile_dictionary: "std::shared_ptr< tesseract_planning::ProfileDictionary >", ns: "std::string const &") -> "bool":
    return _tesseract_motion_planners_descartes_python.ProfileDictionary_hasProfileEntry_DescartesPlanProfileD(profile_dictionary, ns)

def ProfileDictionary_removeProfileEntry_DescartesPlanProfileD(profile_dictionary: "std::shared_ptr< tesseract_planning::ProfileDictionary >", ns: "std::string const &") -> "void":
    return _tesseract_motion_planners_descartes_python.ProfileDictionary_removeProfileEntry_DescartesPlanProfileD(profile_dictionary, ns)

def ProfileDictionary_getProfileEntry_DescartesPlanProfileD(profile_dictionary: "std::shared_ptr< tesseract_planning::ProfileDictionary >", ns: "std::string const &") -> "std::unordered_map< std::string,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const > > > >":
    return _tesseract_motion_planners_descartes_python.ProfileDictionary_getProfileEntry_DescartesPlanProfileD(profile_dictionary, ns)

def ProfileDictionary_addProfile_DescartesPlanProfileD(profile_dictionary: "std::shared_ptr< tesseract_planning::ProfileDictionary >", ns: "std::string const &", profile_name: "std::string const &", profile: "std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const >") -> "void":
    return _tesseract_motion_planners_descartes_python.ProfileDictionary_addProfile_DescartesPlanProfileD(profile_dictionary, ns, profile_name, profile)

def ProfileDictionary_getProfile_DescartesPlanProfileD(profile_dictionary: "std::shared_ptr< tesseract_planning::ProfileDictionary >", ns: "std::string const &", profile_name: "std::string const &") -> "std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > const >":
    return _tesseract_motion_planners_descartes_python.ProfileDictionary_getProfile_DescartesPlanProfileD(profile_dictionary, ns, profile_name)

def ProfileDictionary_hasProfile_DescartesPlanProfileD(profile_dictionary: "std::shared_ptr< tesseract_planning::ProfileDictionary >", ns: "std::string const &", profile_name: "std::string const &") -> "bool":
    return _tesseract_motion_planners_descartes_python.ProfileDictionary_hasProfile_DescartesPlanProfileD(profile_dictionary, ns, profile_name)

def ProfileDictionary_removeProfile_DescartesPlanProfileD(profile_dictionary: "std::shared_ptr< tesseract_planning::ProfileDictionary >", ns: "std::string const &", profile_name: "std::string const &") -> "void":
    return _tesseract_motion_planners_descartes_python.ProfileDictionary_removeProfile_DescartesPlanProfileD(profile_dictionary, ns, profile_name)
class DescartesDefaultPlanProfileD(object, metaclass=_SwigNonDynamicMeta):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_DescartesDefaultPlanProfileD

    def __init__(self, *args):
        _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_swiginit(self, _tesseract_motion_planners_descartes_python.new_DescartesDefaultPlanProfileD(*args))
    target_pose_sampler = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_sampler_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_target_pose_sampler_set)
    allow_collision = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_allow_collision_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_allow_collision_set, doc=r"""
    Flag to indicate that collisions should not cause failures during state/edge evaluation
    Sometimes it is beneficial to evaluate states and edges based on the distance of states from collision
    without treating collisions as failures. In the case that the Descartes trajectory is used as a seed for a
    subsequent planner, such as TrajOpt, the subsequent planner can adjust/optimize individual joint poses such that
    they become collision-free.
    """)
    enable_collision = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_enable_collision_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_enable_collision_set, doc=r""" Flag to apply collision checking during state sampling""")
    vertex_collision_check_config = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_vertex_collision_check_config_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_vertex_collision_check_config_set)
    enable_edge_collision = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_enable_edge_collision_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_enable_edge_collision_set, doc=r""" Flag to apply collision checking during edge evaluation""")
    edge_collision_check_config = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_edge_collision_check_config_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_edge_collision_check_config_set)
    use_redundant_joint_solutions = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_use_redundant_joint_solutions_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_use_redundant_joint_solutions_set, doc=r"""Flag for generating redundant solutions as additional vertices for the planning graph search""")
    num_threads = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_num_threads_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_num_threads_set, doc=r""" Number of threads to use during planning""")
    debug = property(_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_debug_get, _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_debug_set, doc=r""" Flag to produce debug information during planning""")

    def apply(self, *args) -> "void":
        return _tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_apply(self, *args)

# Register DescartesDefaultPlanProfileD in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.DescartesDefaultPlanProfileD_swigregister(DescartesDefaultPlanProfileD)

class DescartesMotionPlannerD(tesseract_robotics.tesseract_motion_planners.tesseract_motion_planners_python.MotionPlanner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""" Construct a basic planner"""
        _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_swiginit(self, _tesseract_motion_planners_descartes_python.new_DescartesMotionPlannerD(*args))
    __swig_destroy__ = _tesseract_motion_planners_descartes_python.delete_DescartesMotionPlannerD

    def getName(self) -> "std::string const &":
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_getName(self)

    def solve(self, request: "PlannerRequest", response: "PlannerResponse", verbose: "bool"=False) -> "tesseract_common::StatusCode":
        r"""
        Sets up the optimizer and solves a SQP problem read from json with no callbacks and default parameters
        :type response: :py:class:`PlannerResponse`
        :param response: The results of the optimization. Primary output is the optimized joint trajectory
        :param check_type: The type of validation check to be performed on the planned trajectory
        :type verbose: boolean, optional
        :param verbose: Boolean indicating whether logging information about the motion planning solution should be printed
            to console
        :rtype: :py:class:`StatusCode`
        :return: true if optimization complete
        """
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_solve(self, request, response, verbose)

    def checkUserInput(self, request: "PlannerRequest") -> "bool":
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_checkUserInput(self, request)

    def terminate(self) -> "bool":
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_terminate(self)

    def clear(self) -> "void":
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_clear(self)

    def clone(self) -> "tesseract_planning::MotionPlanner::Ptr":
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_clone(self)

    def createProblem(self, request: "PlannerRequest") -> "std::shared_ptr< tesseract_planning::DescartesProblem< double > >":
        return _tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_createProblem(self, request)

# Register DescartesMotionPlannerD in _tesseract_motion_planners_descartes_python:
_tesseract_motion_planners_descartes_python.DescartesMotionPlannerD_swigregister(DescartesMotionPlannerD)


def cast_DescartesPlanProfileD(a: "std::shared_ptr< tesseract_planning::DescartesDefaultPlanProfile< double > > const &") -> "std::shared_ptr< tesseract_planning::DescartesPlanProfile< double > >":
    return _tesseract_motion_planners_descartes_python.cast_DescartesPlanProfileD(a)



[build-system]
requires = ['flit_core >=3.4,<4']
build-backend = 'flit_core.buildapi'

[project]
name = 'aiida-codtools'
dynamic = ['version']
description = 'The Official AiiDA plugin for the cod-tools package.'
authors = [{name = 'The AiiDA team', email = 'developers@aiida.net'}]
readme = 'README.md'
license = {file = 'LICENSE'}
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Framework :: AiiDA',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]
keywords = ['aiida', 'workflows']
requires-python = '>=3.8'
dependencies = [
    'aiida-core[atomic_tools]~=2.1',
]

[project.urls]
Home = 'https://github.com/aiidateam/aiida-codtools'
Source = 'https://github.com/aiidateam/aiida-codtools'
Documentation = 'https://aiida-codtools.readthedocs.io'

[project.optional-dependencies]
dev = [
    'pgtest~=1.3',
    'pre-commit~=2.17',
    'pylint~=2.16.0',
    'pylint-aiida~=0.1',
    'pytest~=7.0',
    'pytest-regressions~=1.0',
    'toml'
]
docs = [
    'docutils',
    'jinja2>=3.0',
    'sphinx~=4.1',
    'sphinx_rtd_theme'
]

[project.scripts]
aiida-codtools = 'aiida_codtools.cli:cmd_root'

[project.entry-points.'aiida.calculations']
'codtools.primitive_structure_from_cif' = 'aiida_codtools.calculations.functions.primitive_structure_from_cif:primitive_structure_from_cif'
'codtools.cif_base' = 'aiida_codtools.calculations.cif_base:CifBaseCalculation'
'codtools.cif_cell_contents' = 'aiida_codtools.calculations.cif_cell_contents:CifCellContentsCalculation'
'codtools.cif_cod_check' = 'aiida_codtools.calculations.cif_cod_check:CifCodCheckCalculation'
'codtools.cif_cod_deposit' = 'aiida_codtools.calculations.cif_cod_deposit:CifCodDepositCalculation'
'codtools.cif_cod_numbers' = 'aiida_codtools.calculations.cif_cod_numbers:CifCodNumbersCalculation'
'codtools.cif_filter' = 'aiida_codtools.calculations.cif_filter:CifFilterCalculation'
'codtools.cif_select' = 'aiida_codtools.calculations.cif_select:CifSelectCalculation'
'codtools.cif_split_primitive' = 'aiida_codtools.calculations.cif_split_primitive:CifSplitPrimitiveCalculation'

[project.entry-points.'aiida.parsers']
'codtools.cif_base' = 'aiida_codtools.parsers.cif_base:CifBaseParser'
'codtools.cif_cell_contents' = 'aiida_codtools.parsers.cif_cell_contents:CifCellContentsParser'
'codtools.cif_cod_check' = 'aiida_codtools.parsers.cif_cod_check:CifCodCheckParser'
'codtools.cif_cod_deposit' = 'aiida_codtools.parsers.cif_cod_deposit:CifCodDepositParser'
'codtools.cif_cod_numbers' = 'aiida_codtools.parsers.cif_cod_numbers:CifCodNumbersParser'
'codtools.cif_split_primitive' = 'aiida_codtools.parsers.cif_split_primitive:CifSplitPrimitiveParser'

[project.entry-points.'aiida.workflows']
'codtools.cif_clean' = 'aiida_codtools.workflows.cif_clean:CifCleanWorkChain'

[tool.flit.module]
name = 'aiida_codtools'

[tool.flit.sdist]
exclude = [
    'docs/',
    'tests/',
]

[tool.flynt]
line-length = 120
fail-on-change = true

[tool.isort]
force_sort_within_sections = true
include_trailing_comma = true
line_length = 120
multi_line_output = 3  # this configuration is compatible with yapf

[tool.pydocstyle]
ignore = [
    'D104',
    'D202',
    'D203',
    'D213'
]

[tool.pylint.master]
load-plugins = ['pylint_aiida']

[tool.pylint.format]
max-line-length = 120

[tool.pylint.messages_control]
disable = [
    'duplicate-code',
    'import-outside-toplevel',
    'too-many-return-statements',
]

[tool.pylint.basic]
good-names = []

[tool.pytest.ini_options]
minversion = '7.0'
testpaths = [
    'tests',
]
filterwarnings = [
    'ignore::DeprecationWarning:frozendict:',
    'ignore::DeprecationWarning:pkg_resources:',
    'ignore::DeprecationWarning:sqlalchemy_utils:',
]

[tool.yapf]
align_closing_bracket_with_visual_indent = true
based_on_style = 'google'
coalesce_brackets = true
column_limit = 120
dedent_closing_brackets = true
indent_dictionary_value = false
split_arguments_when_comma_terminated = true

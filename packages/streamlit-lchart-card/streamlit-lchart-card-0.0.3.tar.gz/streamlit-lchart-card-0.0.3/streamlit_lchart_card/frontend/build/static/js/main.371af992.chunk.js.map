{"version":3,"sources":["StreamlitLChartCard.tsx","index.tsx"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","arrowTableToArray","t","n","dataRows","Array","res","i","push","getCell","content","options","responsive","plugins","legend","display","scales","x","grid","drawBorder","y","thresHoldDisplay","thresh","Typography","sx","fontWeight","tablesToData","title","defaultColor","threshColor","format","abs","Date","map","date","getTime","toLocaleString","datasets","label","data","borderColor","backgroundColor","tension","pointRadius","borderWidth","pointHitRadius","StreamlitLChartCard","state","props","args","labels","metrics","render","Box","padding","Card","height","width","CardContent","justifyContent","alignItems","marginTop","marginLeft","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.371af992.chunk.js","sourcesContent":["import {\n  ArrowTable,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport {Box, Card, CardContent, Typography} from \"@mui/material\"\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js'\nimport { Line } from 'react-chartjs-2'\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n)\n\ninterface State {\n}\n\ninterface Labels {\n  x: string,\n  y: string\n}\n\ntype Datum = string|number|Date\ntype Data = Datum[]\n\nconst arrowTableToArray = (t: ArrowTable): Data => {\n  const n = t.dataRows\n  if (t instanceof Array) {\n    return t\n  } else {\n    const res: Data = []\n    for (let i = 1; i <= n; i++) {\n      res.push(t.getCell(i, 1).content as Datum)\n    }\n    return res\n  }\n}\n\nconst getMonthString = (month: number) => {\n  if (month + 1 < 10) {\n    return '0' + (month + 1).toString()\n  } else {\n    return (month + 1).toString()\n  }\n}\n\n// Add segment in datasets options with borderColor with function (ctx: any) => changeColor(ctx, ...)\n// const changeColor = (ctx: any, colorUpThresh: string, colorDownThresh: string, thresh: number) => {\n//   if (ctx.p0.raw <= thresh && ctx.p1.raw <= thresh) {\n//     return colorDownThresh\n//   } else {\n//     if (ctx.p0.raw > thresh && ctx.p1.raw > thresh) {\n//       return colorUpThresh\n//     } else {\n//       return colorUpThresh\n//     }\n//   }\n// }\n\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false\n    },\n  },\n  scales: {\n        x: {\n          grid: {\n            drawBorder: false,\n          }\n        },\n        y: {\n          grid: {\n            display: false,\n            drawBorder: false,\n          }\n        }\n      }\n}\n\nconst thresHoldDisplay = (thresh: number|null) => {\n  if (thresh !== null) {\n    return (\n      <Typography\n        sx={{\n          fontWeight: \"bold\"\n        }}\n      >\n        S = {thresh}\n      </Typography>\n    )\n  } else {\n    return (\n      <Typography\n        sx={{\n          fontWeight: \"bold\"\n        }}\n      >\n        S = Ã˜\n      </Typography>\n    )\n  }\n}\n\nconst tablesToData = (x: Data, y: Data, title: string, defaultColor: string, thresh: number|null, threshColor: string, format: string) => {\n    let abs = []\n    if (x[0] instanceof Date) {\n      // @ts-ignore\n      const temp_dates = x.map((date: Date) => new Date(date.getTime()*1000000))\n      // @ts-ignore\n      abs = temp_dates.map((date: Date) => date.toLocaleString())\n    } else {\n      abs = x\n    }\n    if (thresh == null) {\n      const data = {\n        \"labels\": abs,\n        datasets: [\n          {\n            label: title,\n            data: y,\n            borderColor: defaultColor,\n            backgroundColor: defaultColor,\n            tension: 0.5,\n            pointRadius: 2\n          },\n        ],\n      }\n      return data\n    } else {\n      const data = {\n        \"labels\": abs,\n        datasets: [\n          {\n            label: \"Seuil\",\n            data: y.map((data: Datum) => thresh),\n            borderColor: threshColor,\n            backgroundColor: threshColor,\n            borderWidth: 2,\n            pointRadius: 0,\n            pointHitRadius: 0\n          },\n          {\n            label: title,\n            data: y,\n            borderColor: defaultColor,\n            backgroundColor: defaultColor,\n            tension: 0.5,\n            pointRadius: 2\n          },\n        ],\n      }\n      return data\n    }\n  }\n\nclass StreamlitLChartCard extends StreamlitComponentBase<State> {\n  public state: State = {}\n  private title: string = this.props.args[\"title\"]\n  private x: Data = arrowTableToArray(this.props.args[\"x\"])\n  private y: Data = arrowTableToArray(this.props.args[\"y\"])\n  private labels: Labels = this.props.args[\"labels\"]\n  private metrics = this.props.args[\"metrics\"]\n  private defaultColor: string = this.props.args[\"defaultColor\"]\n  private threshColor: string = this.props.args[\"threshColor\"]\n  private thresh: number|null = this.props.args[\"thresh\"]\n  private format = this.props.args[\"format\"]\n  private data = tablesToData(this.x, this.y, this.title, this.defaultColor, this.thresh, this.threshColor, this.format)\n\n  public render = (): ReactNode => {\n\n    return (\n      <Box\n        sx={{\n          padding: 2,\n        }}\n      >\n        <Card\n          sx={{\n            height: 250,\n            width: 290\n        }}\n        >\n          <CardContent>\n            <Box>\n              <Box\n              sx={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              }}\n              >\n                <Typography\n                  sx={{\n                    fontWeight: \"bold\"\n                  }}\n                >\n                  {this.title}\n                </Typography>\n                {thresHoldDisplay(this.thresh)}\n                <Typography\n                  sx={{\n                    fontWeight: \"bold\"\n                  }}\n                >\n                  {this.labels[\"y\"]}\n                </Typography>\n              </Box>\n              <Box\n                sx={{\n                  marginTop: 2,\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\"\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\"\n                  }}\n                >\n                  <Typography\n                    sx={{\n                      marginLeft: 1,\n                      fontWeight: \"bold\"\n                    }}\n                  >\n                    min\n                  </Typography>\n                  <Typography\n                  >\n                    ={this.metrics[\"min\"]}\n                  </Typography>\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\"\n                  }}\n                >\n                  <Typography\n                    sx={{\n                      marginLeft: 1,\n                      fontWeight: \"bold\"\n                    }}\n                  >\n                    xÌ„\n                  </Typography>\n                  <Typography\n                  >\n                    ={this.metrics[\"mean\"]}\n                  </Typography>\n                </Box>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\"\n                  }}\n                >\n                  <Typography\n                    sx={{\n                      marginLeft: 1,\n                      fontWeight: \"bold\"\n                    }}\n                  >\n                    max\n                  </Typography>\n                  <Typography\n                  >\n                    ={this.metrics[\"max\"]}\n                  </Typography>\n                </Box>\n              </Box>\n              <Box\n                sx={{\n                  marginTop: 2\n                }}\n              >\n                <Line options={options} data={this.data}></Line>\n              </Box>\n            </Box>\n          </CardContent>\n        </Card>\n      </Box>\n    )\n  }\n}\n\nexport default withStreamlitConnection(StreamlitLChartCard)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitLChartCard from \"./StreamlitLChartCard\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitLChartCard />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}
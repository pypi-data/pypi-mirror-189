# coding: utf-8

"""
    Common Fate

    Common Fate API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from commonfate import schemas  # noqa: F401


class ModelWith(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "label",
            "title",
            "value",
        }
        
        class properties:
            title = schemas.StrSchema
            label = schemas.StrSchema
            value = schemas.StrSchema
            optionDescription = schemas.StrSchema
            fieldDescription = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "label": label,
                "value": value,
                "optionDescription": optionDescription,
                "fieldDescription": fieldDescription,
            }
    
    label: MetaOapg.properties.label
    title: MetaOapg.properties.title
    value: MetaOapg.properties.value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionDescription"]) -> MetaOapg.properties.optionDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldDescription"]) -> MetaOapg.properties.fieldDescription: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "label", "value", "optionDescription", "fieldDescription", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionDescription"]) -> typing.Union[MetaOapg.properties.optionDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldDescription"]) -> typing.Union[MetaOapg.properties.fieldDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "label", "value", "optionDescription", "fieldDescription", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        value: typing.Union[MetaOapg.properties.value, str, ],
        optionDescription: typing.Union[MetaOapg.properties.optionDescription, str, schemas.Unset] = schemas.unset,
        fieldDescription: typing.Union[MetaOapg.properties.fieldDescription, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelWith':
        return super().__new__(
            cls,
            *args,
            label=label,
            title=title,
            value=value,
            optionDescription=optionDescription,
            fieldDescription=fieldDescription,
            _configuration=_configuration,
            **kwargs,
        )

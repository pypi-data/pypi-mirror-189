# coding: utf-8

"""
    Common Fate

    Common Fate API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from commonfate import schemas  # noqa: F401


class AccessRuleDetail(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    AccessRuleDetail contains detailed information about a rule and is used in administrative apis.
    """


    class MetaOapg:
        required = {
            "timeConstraints",
            "isCurrent",
            "metadata",
            "approval",
            "name",
            "description",
            "groups",
            "id",
            "version",
            "status",
            "target",
        }
        
        class properties:
            id = schemas.StrSchema
            version = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['AccessRuleStatus']:
                return AccessRuleStatus
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def approval() -> typing.Type['ApproverConfig']:
                return ApproverConfig
            name = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['AccessRuleMetadata']:
                return AccessRuleMetadata
        
            @staticmethod
            def target() -> typing.Type['AccessRuleTargetDetail']:
                return AccessRuleTargetDetail
        
            @staticmethod
            def timeConstraints() -> typing.Type['TimeConstraints']:
                return TimeConstraints
            isCurrent = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "version": version,
                "status": status,
                "groups": groups,
                "approval": approval,
                "name": name,
                "description": description,
                "metadata": metadata,
                "target": target,
                "timeConstraints": timeConstraints,
                "isCurrent": isCurrent,
            }
    
    timeConstraints: 'TimeConstraints'
    isCurrent: MetaOapg.properties.isCurrent
    metadata: 'AccessRuleMetadata'
    approval: 'ApproverConfig'
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    groups: MetaOapg.properties.groups
    id: MetaOapg.properties.id
    version: MetaOapg.properties.version
    status: 'AccessRuleStatus'
    target: 'AccessRuleTargetDetail'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'AccessRuleStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approval"]) -> 'ApproverConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'AccessRuleMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target"]) -> 'AccessRuleTargetDetail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeConstraints"]) -> 'TimeConstraints': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCurrent"]) -> MetaOapg.properties.isCurrent: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "version", "status", "groups", "approval", "name", "description", "metadata", "target", "timeConstraints", "isCurrent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'AccessRuleStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approval"]) -> 'ApproverConfig': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'AccessRuleMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target"]) -> 'AccessRuleTargetDetail': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeConstraints"]) -> 'TimeConstraints': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCurrent"]) -> MetaOapg.properties.isCurrent: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "version", "status", "groups", "approval", "name", "description", "metadata", "target", "timeConstraints", "isCurrent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        timeConstraints: 'TimeConstraints',
        isCurrent: typing.Union[MetaOapg.properties.isCurrent, bool, ],
        metadata: 'AccessRuleMetadata',
        approval: 'ApproverConfig',
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        status: 'AccessRuleStatus',
        target: 'AccessRuleTargetDetail',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccessRuleDetail':
        return super().__new__(
            cls,
            *args,
            timeConstraints=timeConstraints,
            isCurrent=isCurrent,
            metadata=metadata,
            approval=approval,
            name=name,
            description=description,
            groups=groups,
            id=id,
            version=version,
            status=status,
            target=target,
            _configuration=_configuration,
            **kwargs,
        )

from commonfate.model.access_rule_metadata import AccessRuleMetadata
from commonfate.model.access_rule_status import AccessRuleStatus
from commonfate.model.access_rule_target_detail import AccessRuleTargetDetail
from commonfate.model.approver_config import ApproverConfig
from commonfate.model.time_constraints import TimeConstraints

# coding: utf-8

"""
    Common Fate

    Common Fate API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from commonfate import schemas  # noqa: F401


class AccessRuleMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "updatedBy",
            "createdBy",
            "updatedAt",
        }
        
        class properties:
            createdAt = schemas.StrSchema
            createdBy = schemas.StrSchema
            updatedAt = schemas.StrSchema
            updatedBy = schemas.StrSchema
            updateMessage = schemas.StrSchema
            __annotations__ = {
                "createdAt": createdAt,
                "createdBy": createdBy,
                "updatedAt": updatedAt,
                "updatedBy": updatedBy,
                "updateMessage": updateMessage,
            }
    
    createdAt: MetaOapg.properties.createdAt
    updatedBy: MetaOapg.properties.updatedBy
    createdBy: MetaOapg.properties.createdBy
    updatedAt: MetaOapg.properties.updatedAt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedBy"]) -> MetaOapg.properties.updatedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateMessage"]) -> MetaOapg.properties.updateMessage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["createdAt", "createdBy", "updatedAt", "updatedBy", "updateMessage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedBy"]) -> MetaOapg.properties.updatedBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateMessage"]) -> typing.Union[MetaOapg.properties.updateMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["createdAt", "createdBy", "updatedAt", "updatedBy", "updateMessage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, ],
        updatedBy: typing.Union[MetaOapg.properties.updatedBy, str, ],
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, ],
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, ],
        updateMessage: typing.Union[MetaOapg.properties.updateMessage, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccessRuleMetadata':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            updatedBy=updatedBy,
            createdBy=createdBy,
            updatedAt=updatedAt,
            updateMessage=updateMessage,
            _configuration=_configuration,
            **kwargs,
        )

# coding: utf-8

"""
    Common Fate

    Common Fate API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from commonfate import schemas  # noqa: F401


class Argument(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ruleFormElement",
            "id",
            "title",
        }
        
        class properties:
            id = schemas.StrSchema
            title = schemas.StrSchema
            
            
            class ruleFormElement(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "INPUT": "INPUT",
                        "MULTISELECT": "MULTISELECT",
                        "SELECT": "SELECT",
                    }
                
                @schemas.classproperty
                def INPUT(cls):
                    return cls("INPUT")
                
                @schemas.classproperty
                def MULTISELECT(cls):
                    return cls("MULTISELECT")
                
                @schemas.classproperty
                def SELECT(cls):
                    return cls("SELECT")
            description = schemas.StrSchema
            
            
            class requestFormElement(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SELECT": "SELECT",
                    }
                
                @schemas.classproperty
                def SELECT(cls):
                    return cls("SELECT")
            
            
            class groups(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['Group1']:
                        return Group1
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'Group1':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'Group1':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'Group1',
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "title": title,
                "ruleFormElement": ruleFormElement,
                "description": description,
                "requestFormElement": requestFormElement,
                "groups": groups,
            }
    
    ruleFormElement: MetaOapg.properties.ruleFormElement
    id: MetaOapg.properties.id
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ruleFormElement"]) -> MetaOapg.properties.ruleFormElement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestFormElement"]) -> MetaOapg.properties.requestFormElement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "title", "ruleFormElement", "description", "requestFormElement", "groups", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ruleFormElement"]) -> MetaOapg.properties.ruleFormElement: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestFormElement"]) -> typing.Union[MetaOapg.properties.requestFormElement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "title", "ruleFormElement", "description", "requestFormElement", "groups", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ruleFormElement: typing.Union[MetaOapg.properties.ruleFormElement, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        requestFormElement: typing.Union[MetaOapg.properties.requestFormElement, str, schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Argument':
        return super().__new__(
            cls,
            *args,
            ruleFormElement=ruleFormElement,
            id=id,
            title=title,
            description=description,
            requestFormElement=requestFormElement,
            groups=groups,
            _configuration=_configuration,
            **kwargs,
        )

from commonfate.model.group1 import Group1

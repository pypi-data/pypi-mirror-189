service experimental.abb_robot

import com.robotraconteur.geometry
import com.robotraconteur.sensordata
import com.robotraconteur.device
import com.robotraconteur.robotics.tool
import com.robotraconteur.robotics.payload
import com.robotraconteur.robotics.trajectory
import com.robotraconteur.action
import com.robotraconteur.eventlog
import com.robotraconteur.device.isoch
import com.robotraconteur.device.clock
import com.robotraconteur.robotics.robot
import experimental.robotics.motion_program
import experimental.abb_robot.motion_program

using com.robotraconteur.geometry.Pose
using com.robotraconteur.geometry.SpatialVelocity
using com.robotraconteur.device.DeviceInfo
using com.robotraconteur.device.Device
using com.robotraconteur.robotics.tool.ToolInfo
using com.robotraconteur.robotics.payload.PayloadInfo
using com.robotraconteur.robotics.trajectory.TrajectoryStatus
using com.robotraconteur.robotics.trajectory.JointTrajectory
using com.robotraconteur.action.ActionStatusCode
using com.robotraconteur.eventlog.EventLogMessage
using com.robotraconteur.device.isoch.IsochDevice
using com.robotraconteur.device.isoch.IsochInfo
using com.robotraconteur.device.clock.DeviceClock
using com.robotraconteur.device.clock.DeviceTime
using com.robotraconteur.robotics.robot.Robot
using com.robotraconteur.robotics.robot.RobotInfo
using com.robotraconteur.robotics.robot.RobotCommandMode
using com.robotraconteur.robotics.robot.RobotOperationalMode
using com.robotraconteur.robotics.robot.RobotControllerState
using com.robotraconteur.robotics.robot.RobotState
using com.robotraconteur.robotics.robot.AdvancedRobotState
using com.robotraconteur.robotics.robot.RobotStateSensorData
using com.robotraconteur.robotics.robot.RobotJointCommand
using experimental.robotics.motion_program.MotionProgramRobot
using experimental.robotics.motion_program.MotionProgramRobotInfo
using experimental.robotics.motion_program.MotionProgram
using experimental.robotics.motion_program.MotionProgramStatus
using experimental.robotics.motion_program.MotionProgramRecordingPart
using experimental.robotics.motion_program.MotionProgramRobotState
using experimental.abb_robot.motion_program.EGMJointTarget
using experimental.abb_robot.motion_program.EGMPoseTarget
using experimental.abb_robot.motion_program.EGMPathCorrection

enum ABBRobotCommandMode
    invalid_state = -1,
    halt = 0,
    jog,
    trajectory,
    position_command,
    velocity_command,
    homing,
    motion_program
end

object ABBRobot
    implements Robot
    implements MotionProgramRobot

    implements Device
    implements DeviceClock
    implements IsochDevice
    property DeviceInfo device_info [readonly,nolock]
    property RobotInfo robot_info [readonly,nolock]
    property RobotCommandMode command_mode [nolockread]
    property RobotOperationalMode operational_mode [readonly, nolock]
    property RobotControllerState controller_state [readonly, nolock]
    property EventLogMessage{list} current_errors [readonly, nolock]
    function void halt() [urgent]
    function void enable()
    function void disable() [urgent]
    function void reset_errors()
    property double speed_ratio
    function void jog_freespace(double[] joint_position, double[] max_velocity, bool wait)
    function void jog_joint(double[] joint_velocity, double timeout, bool wait)
    function void jog_cartesian(SpatialVelocity{int32} max_velocity, double timeout, bool wait)
    function TrajectoryStatus{generator} execute_trajectory(JointTrajectory trajectory)
    wire RobotState robot_state [readonly,nolock]
    wire AdvancedRobotState advanced_robot_state [readonly,nolock]
    pipe RobotStateSensorData robot_state_sensor_data [readonly,nolock]
    property IsochInfo isoch_info [readonly,nolock]
    property uint32 isoch_downsample [perclient]
    wire DeviceTime device_clock_now [readonly,nolock]
    wire RobotJointCommand position_command [writeonly]
    wire RobotJointCommand velocity_command [writeonly]
    function ActionStatusCode{generator} home()
    function double[] getf_signal(string signal_name)
    function void setf_signal(string signal_name, double[] value)
    function void tool_attached(int32 chain, ToolInfo tool)
    function void tool_detached(int32 chain, string tool_name)
    event tool_changed(int32 chain, string tool_name)
    function void payload_attached(int32 chain, PayloadInfo payload, Pose pose)
    function void payload_detached(int32 chain, string payload_name)
    event payload_changed(int32 chain, string payload_name)
    function varvalue getf_param(string param_name)
    function void setf_param(string param_name, varvalue value)
    event param_changed(string param_name)

    property MotionProgramRobotInfo motion_program_robot_info [readonly,nolock]
    function MotionProgramStatus{generator} execute_motion_program(MotionProgram program, bool queue)
    function MotionProgramStatus{generator} execute_motion_program_record(MotionProgram program, bool queue)
    function void preempt_motion_program(MotionProgram program, uint32 preempt_number, uint32 preempt_cmdnum)
    function MotionProgramRecordingPart{generator} read_recording(uint32 recording_handle)
    function void clear_recordings()

    wire EGMJointTarget egm_joint_command [writeonly]
    wire EGMPoseTarget egm_pose_command [writeonly]
    wire EGMPathCorrection egm_path_correction_command [writeonly]

    wire MotionProgramRobotState motion_program_robot_state [readonly,nolock]
    function void enable_motion_program_mode()
    function void disable_motion_program_mode()
end object
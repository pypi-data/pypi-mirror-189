{"version":3,"file":"a92bcccf.js","mappings":";AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;;;AChGA;ACQA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAIA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;;;ACnEA;;;;ACHA;ACiEA;AAeA;;AC5CA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;;;;;;;;;;AAWA;;ACnEA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-input-helper-text.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-entity-card-editor.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n\n      :host {\n        outline: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { dynamicElement } from \"../../common/dom/dynamic-element-directive\";\nimport type { Selector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\n\nconst LOAD_ELEMENTS = {\n  action: () => import(\"./ha-selector-action\"),\n  addon: () => import(\"./ha-selector-addon\"),\n  area: () => import(\"./ha-selector-area\"),\n  attribute: () => import(\"./ha-selector-attribute\"),\n  boolean: () => import(\"./ha-selector-boolean\"),\n  color_rgb: () => import(\"./ha-selector-color-rgb\"),\n  config_entry: () => import(\"./ha-selector-config-entry\"),\n  date: () => import(\"./ha-selector-date\"),\n  datetime: () => import(\"./ha-selector-datetime\"),\n  device: () => import(\"./ha-selector-device\"),\n  duration: () => import(\"./ha-selector-duration\"),\n  entity: () => import(\"./ha-selector-entity\"),\n  statistic: () => import(\"./ha-selector-statistic\"),\n  file: () => import(\"./ha-selector-file\"),\n  navigation: () => import(\"./ha-selector-navigation\"),\n  number: () => import(\"./ha-selector-number\"),\n  object: () => import(\"./ha-selector-object\"),\n  select: () => import(\"./ha-selector-select\"),\n  state: () => import(\"./ha-selector-state\"),\n  target: () => import(\"./ha-selector-target\"),\n  template: () => import(\"./ha-selector-template\"),\n  text: () => import(\"./ha-selector-text\"),\n  time: () => import(\"./ha-selector-time\"),\n  icon: () => import(\"./ha-selector-icon\"),\n  media: () => import(\"./ha-selector-media\"),\n  theme: () => import(\"./ha-selector-theme\"),\n  location: () => import(\"./ha-selector-location\"),\n  color_temp: () => import(\"./ha-selector-color-temp\"),\n  \"ui-action\": () => import(\"./ha-selector-ui-action\"),\n  \"ui-color\": () => import(\"./ha-selector-ui-color\"),\n};\n\n@customElement(\"ha-selector\")\nexport class HaSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public name?: string;\n\n  @property() public selector!: Selector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public localizeValue?: (key: string) => string;\n\n  @property() public placeholder?: any;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property() public context?: Record<string, any>;\n\n  public focus() {\n    this.shadowRoot?.getElementById(\"selector\")?.focus();\n  }\n\n  private get _type() {\n    return Object.keys(this.selector)[0];\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"selector\") && this.selector) {\n      LOAD_ELEMENTS[this._type]?.();\n    }\n  }\n\n  protected render() {\n    return html`\n      ${dynamicElement(`ha-selector-${this._type}`, {\n        hass: this.hass,\n        name: this.name,\n        selector: this.selector,\n        value: this.value,\n        label: this.label,\n        placeholder: this.placeholder,\n        disabled: this.disabled,\n        required: this.required,\n        helper: this.helper,\n        context: this.context,\n        localizeValue: this.localizeValue,\n        id: \"selector\",\n      })}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector\": HaSelector;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  @property() public autocomplete?: string;\n\n  @query(\"input\") public formElement!: HTMLInputElement;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n    if (changedProperties.has(\"autocomplete\")) {\n      if (this.autocomplete) {\n        this.formElement.setAttribute(\"autocomplete\", this.autocomplete);\n      } else {\n        this.formElement.removeAttribute(\"autocomplete\");\n      }\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket/dist/types\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { assert, assign, boolean, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../../../common/entity/domain_icon\";\nimport { entityId } from \"../../../../common/structs/is-entity-id\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { EntityCardConfig } from \"../../cards/types\";\nimport { headerFooterConfigStructs } from \"../../header-footer/structs\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(entityId()),\n    name: optional(string()),\n    icon: optional(string()),\n    attribute: optional(string()),\n    unit: optional(string()),\n    theme: optional(string()),\n    state_color: optional(boolean()),\n    footer: optional(headerFooterConfigStructs),\n  })\n);\n\n@customElement(\"hui-entity-card-editor\")\nexport class HuiEntityCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityCardConfig;\n\n  public setConfig(config: EntityCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  private _schema = memoizeOne(\n    (entity: string, icon: string, entityState: HassEntity) =>\n      [\n        { name: \"entity\", required: true, selector: { entity: {} } },\n        {\n          type: \"grid\",\n          name: \"\",\n          schema: [\n            { name: \"name\", selector: { text: {} } },\n            {\n              name: \"icon\",\n              selector: {\n                icon: {\n                  placeholder: icon || entityState?.attributes.icon,\n                  fallbackPath:\n                    !icon && !entityState?.attributes.icon && entityState\n                      ? domainIcon(computeDomain(entity), entityState)\n                      : undefined,\n                },\n              },\n            },\n\n            {\n              name: \"attribute\",\n              selector: { attribute: { entity_id: entity } },\n            },\n            { name: \"unit\", selector: { text: {} } },\n            { name: \"theme\", selector: { theme: {} } },\n            { name: \"state_color\", selector: { boolean: {} } },\n          ],\n        },\n      ] as const\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const entityState = this.hass.states[this._config.entity];\n\n    const schema = this._schema(\n      this._config.entity,\n      this._config.icon,\n      entityState\n    );\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${this._config}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const config = ev.detail.value;\n    Object.keys(config).forEach((k) => config[k] === \"\" && delete config[k]);\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    if (schema.name === \"entity\") {\n      return this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.generic.entity\"\n      );\n    }\n\n    if (schema.name === \"theme\") {\n      return `${this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.generic.theme\"\n      )} (${this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.config.optional\"\n      )})`;\n    }\n\n    return this.hass!.localize(\n      `ui.panel.lovelace.editor.card.generic.${schema.name}`\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-card-editor\": HuiEntityCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}
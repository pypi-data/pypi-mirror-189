{"version":3,"file":"3760ec6a.js","mappings":";AA8EA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;AA+DA;;;;;;;;;;;;;;;;;;;;;;AC1IA;;ACpBA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;AClBA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;;;;;;;;;;AAWA;;ACqGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAiEA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-statistics-picker.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-statistics-graph-card-editor.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"./ha-statistic-picker\";\n\n@customElement(\"ha-statistics-picker\")\nclass HaStatisticsPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ type: Array }) public statisticIds?: string[];\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ attribute: \"picked-statistic-label\" })\n  public pickedStatisticLabel?: string;\n\n  @property({ attribute: \"pick-statistic-label\" })\n  public pickStatisticLabel?: string;\n\n  /**\n   * Show only statistics natively stored with these units of measurements.\n   * @attr include-statistics-unit-of-measurement\n   */\n  @property({\n    attribute: \"include-statistics-unit-of-measurement\",\n  })\n  public includeStatisticsUnitOfMeasurement?: string[] | string;\n\n  /**\n   * Show only statistics with these unit classes.\n   * @attr include-unit-class\n   */\n  @property({ attribute: \"include-unit-class\" })\n  public includeUnitClass?: string | string[];\n\n  /**\n   * Show only statistics with these device classes.\n   * @attr include-device-class\n   */\n  @property({ attribute: \"include-device-class\" })\n  public includeDeviceClass?: string | string[];\n\n  /**\n   * Ignore filtering of statistics type and units when only a single statistic is selected.\n   * @type {boolean}\n   * @attr ignore-restrictions-on-first-statistic\n   */\n  @property({\n    type: Boolean,\n    attribute: \"ignore-restrictions-on-first-statistic\",\n  })\n  public ignoreRestrictionsOnFirstStatistic = false;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const ignoreRestriction =\n      this.ignoreRestrictionsOnFirstStatistic &&\n      this._currentStatistics.length <= 1;\n\n    const includeStatisticsUnitCurrent = ignoreRestriction\n      ? undefined\n      : this.includeStatisticsUnitOfMeasurement;\n    const includeUnitClassCurrent = ignoreRestriction\n      ? undefined\n      : this.includeUnitClass;\n    const includeStatisticTypesCurrent = ignoreRestriction\n      ? undefined\n      : this.statisticTypes;\n\n    return html`\n      ${this._currentStatistics.map(\n        (statisticId) => html`\n          <div>\n            <ha-statistic-picker\n              .curValue=${statisticId}\n              .hass=${this.hass}\n              .includeStatisticsUnitOfMeasurement=${includeStatisticsUnitCurrent}\n              .includeUnitClass=${includeUnitClassCurrent}\n              .value=${statisticId}\n              .statisticTypes=${includeStatisticTypesCurrent}\n              .statisticIds=${this.statisticIds}\n              .label=${this.pickedStatisticLabel}\n              @value-changed=${this._statisticChanged}\n            ></ha-statistic-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-statistic-picker\n          .hass=${this.hass}\n          .includeStatisticsUnitOfMeasurement=${this\n            .includeStatisticsUnitOfMeasurement}\n          .includeUnitClass=${this.includeUnitClass}\n          .includeDeviceClass=${this.includeDeviceClass}\n          .statisticTypes=${this.statisticTypes}\n          .statisticIds=${this.statisticIds}\n          .label=${this.pickStatisticLabel}\n          @value-changed=${this._addStatistic}\n        ></ha-statistic-picker>\n      </div>\n    `;\n  }\n\n  private get _currentStatistics() {\n    return this.value || [];\n  }\n\n  private async _updateStatistics(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _statisticChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const oldValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === oldValue) {\n      return;\n    }\n    const currentStatistics = this._currentStatistics;\n    if (!newValue || currentStatistics.includes(newValue)) {\n      this._updateStatistics(\n        currentStatistics.filter((ent) => ent !== oldValue)\n      );\n      return;\n    }\n    this._updateStatistics(\n      currentStatistics.map((ent) => (ent === oldValue ? newValue : ent))\n    );\n  }\n\n  private async _addStatistic(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentStatistics;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateStatistics([...currentEntities, toAdd]);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        width: 200px;\n        display: block;\n      }\n      ha-statistic-picker {\n        display: block;\n        width: 100%;\n        margin-top: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistics-picker\": HaStatisticsPicker;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  @property() public autocomplete?: string;\n\n  @query(\"input\") public formElement!: HTMLInputElement;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n    if (changedProperties.has(\"autocomplete\")) {\n      if (this.autocomplete) {\n        this.formElement.setAttribute(\"autocomplete\", this.autocomplete);\n      } else {\n        this.formElement.removeAttribute(\"autocomplete\");\n      }\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  array,\n  assert,\n  assign,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { ensureArray } from \"../../../../common/array/ensure-array\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\nimport {\n  ExtendedStatisticType,\n  statTypeMap,\n  supportedStatTypeMap,\n} from \"../../../../components/chart/statistics-chart\";\nimport \"../../../../components/entity/ha-statistics-picker\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { HaFormSchema } from \"../../../../components/ha-form/types\";\nimport {\n  getDisplayUnit,\n  getStatisticMetadata,\n  isExternalStatistic,\n  StatisticsMetaData,\n  statisticsMetaHasType,\n} from \"../../../../data/recorder\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { StatisticsGraphCardConfig } from \"../../cards/types\";\nimport { processConfigEntities } from \"../../common/process-config-entities\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\n\nconst statTypeStruct = union([\n  literal(\"state\"),\n  literal(\"sum\"),\n  literal(\"change\"),\n  literal(\"min\"),\n  literal(\"max\"),\n  literal(\"mean\"),\n]);\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entities: array(entitiesConfigStruct),\n    title: optional(string()),\n    days_to_show: optional(number()),\n    period: optional(\n      union([\n        literal(\"5minute\"),\n        literal(\"hour\"),\n        literal(\"day\"),\n        literal(\"week\"),\n        literal(\"month\"),\n      ])\n    ),\n    chart_type: optional(union([literal(\"bar\"), literal(\"line\")])),\n    stat_types: optional(union([array(statTypeStruct), statTypeStruct])),\n    unit: optional(string()),\n  })\n);\n\nconst periods = [\"5minute\", \"hour\", \"day\", \"week\", \"month\"] as const;\nconst stat_types = [\n  \"mean\",\n  \"min\",\n  \"max\",\n  \"sum\",\n  \"state\",\n  \"change\",\n] as ExtendedStatisticType[];\n\n@customElement(\"hui-statistics-graph-card-editor\")\nexport class HuiStatisticsGraphCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StatisticsGraphCardConfig;\n\n  @state() private _configEntities?: string[];\n\n  @state() private _metaDatas?: StatisticsMetaData[];\n\n  public setConfig(config: StatisticsGraphCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = config.entities\n      ? processConfigEntities(config.entities, false).map((cfg) => cfg.entity)\n      : [];\n  }\n\n  private _getStatisticsMetaData = async (statisticIds?: string[]) => {\n    this._metaDatas = await getStatisticMetadata(\n      this.hass!,\n      statisticIds || []\n    );\n  };\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"_configEntities\") &&\n      !deepEqual(this._configEntities, changedProps.get(\"_configEntities\"))\n    ) {\n      this._metaDatas = undefined;\n      this._getStatisticsMetaData(this._configEntities);\n    }\n  }\n\n  private _schema = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      statisticIds: string[] | undefined,\n      metaDatas: StatisticsMetaData[] | undefined\n    ) => {\n      const units = new Set<string>();\n      metaDatas?.forEach((metaData) => {\n        const unit = getDisplayUnit(\n          this.hass!,\n          metaData.statistic_id,\n          metaData\n        );\n        if (unit) {\n          units.add(unit);\n        }\n      });\n      const schema: HaFormSchema[] = [\n        { name: \"title\", selector: { text: {} } },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            {\n              name: \"period\",\n              required: true,\n              selector: {\n                select: {\n                  options: periods.map((period) => ({\n                    value: period,\n                    label: localize(\n                      `ui.panel.lovelace.editor.card.statistics-graph.periods.${period}`\n                    ),\n                    disabled:\n                      period === \"5minute\" &&\n                      // External statistics don't support 5-minute statistics.\n                      statisticIds?.some((statistic_id) =>\n                        isExternalStatistic(statistic_id)\n                      ),\n                  })),\n                },\n              },\n            },\n            {\n              name: \"days_to_show\",\n              required: true,\n              selector: { number: { min: 1, mode: \"box\" } },\n            },\n            {\n              name: \"stat_types\",\n              required: true,\n              selector: {\n                select: {\n                  multiple: true,\n                  mode: \"list\",\n                  options: stat_types.map((stat_type) => ({\n                    value: stat_type,\n                    label: localize(\n                      `ui.panel.lovelace.editor.card.statistics-graph.stat_type_labels.${stat_type}`\n                    ),\n                    disabled:\n                      !metaDatas ||\n                      !metaDatas.every((metaData) =>\n                        statisticsMetaHasType(\n                          metaData,\n                          supportedStatTypeMap[stat_type]\n                        )\n                      ),\n                  })),\n                },\n              },\n            },\n            {\n              name: \"chart_type\",\n              required: true,\n              type: \"select\",\n              options: [\n                [\"line\", \"Line\"],\n                [\"bar\", \"Bar\"],\n              ],\n            },\n          ],\n        },\n      ];\n\n      if (units.size > 1) {\n        (schema[1] as any).schema.push({\n          name: \"unit\",\n          required: false,\n          selector: {\n            select: {\n              options: Array.from(units).map((unit) => ({\n                value: unit,\n                label: unit,\n              })),\n            },\n          },\n        });\n      }\n\n      return schema;\n    }\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const schema = this._schema(\n      this.hass.localize,\n      this._configEntities,\n      this._metaDatas\n    );\n    const configured_stat_types = this._config!.stat_types\n      ? ensureArray(this._config.stat_types)\n      : stat_types.filter(\n          (stat_type) =>\n            stat_type !== \"change\" &&\n            this._metaDatas?.every((metaData) =>\n              statisticsMetaHasType(metaData, statTypeMap[stat_type])\n            )\n        );\n    const data = {\n      chart_type: \"line\",\n      period: \"hour\",\n      days_to_show: 30,\n      ...this._config,\n      stat_types: configured_stat_types,\n    };\n    const unitClass = this._metaDatas?.[0]?.unit_class;\n    const statisticsUnit = unitClass\n      ? undefined\n      : this._metaDatas?.[0]?.statistics_unit_of_measurement;\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n        <ha-statistics-picker\n          .hass=${this.hass}\n          .pickStatisticLabel=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.statistics-graph.pick_statistic\"\n          )}\n          .pickedStatisticLabel=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.statistics-graph.picked_statistic\"\n          )}\n          .includeStatisticsUnitOfMeasurement=${statisticsUnit}\n          .includeUnitClass=${unitClass}\n          .ignoreRestrictionsOnFirstStatistic=${true}\n          .value=${this._configEntities}\n          .configValue=${\"entities\"}\n          @value-changed=${this._entitiesChanged}\n        ></ha-statistics-picker>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", { config: ev.detail.value });\n  }\n\n  private async _entitiesChanged(ev: CustomEvent): Promise<void> {\n    const config = { ...this._config!, entities: ev.detail.value };\n    if (\n      config.entities?.some((statistic_id) =>\n        isExternalStatistic(statistic_id)\n      ) &&\n      config.period === \"5minute\"\n    ) {\n      delete config.period;\n    }\n    const metadata =\n      config.stat_types || config.unit\n        ? await getStatisticMetadata(this.hass!, config.entities)\n        : undefined;\n    if (config.stat_types && config.entities.length) {\n      config.stat_types = ensureArray(config.stat_types).filter((stat_type) =>\n        metadata!.every((metaData) =>\n          statisticsMetaHasType(metaData, statTypeMap[stat_type])\n        )\n      );\n      if (!config.stat_types.length) {\n        delete config.stat_types;\n      }\n    }\n    if (\n      config.unit &&\n      !metadata!.some(\n        (metaData) =>\n          getDisplayUnit(this.hass!, metaData?.statistic_id, metaData) ===\n          config.unit\n      )\n    ) {\n      delete config.unit;\n    }\n    fireEvent(this, \"config-changed\", {\n      config,\n    });\n  }\n\n  private _computeLabelCallback = (schema) => {\n    switch (schema.name) {\n      case \"chart_type\":\n      case \"stat_types\":\n      case \"period\":\n      case \"unit\":\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.statistics-graph.${schema.name}`\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static styles: CSSResultGroup = css`\n    ha-statistics-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-statistics-graph-card-editor\": HuiStatisticsGraphCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}
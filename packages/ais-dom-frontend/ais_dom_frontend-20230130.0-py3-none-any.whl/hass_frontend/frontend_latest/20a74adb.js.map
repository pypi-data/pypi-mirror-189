{"version":3,"file":"20a74adb.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;;;;;;AAOA;AACA;;AA7BA;;;;;;;;AA8FA;;AC5BA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;AAMA;AAGA;AACA;AACA;;;;AA7BA;;;;;;AAiGA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-input-list-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-map-card-editor.ts"],"sourcesContent":["import { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-icon-button\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EditorTarget } from \"../editor/types\";\nimport \"../../../components/ha-textfield\";\n\n@customElement(\"hui-input-list-editor\")\nexport class HuiInputListEditor extends LitElement {\n  @property() protected value?: string[];\n\n  @property() protected hass?: HomeAssistant;\n\n  @property() protected inputLabel?: string;\n\n  protected render(): TemplateResult {\n    if (!this.value) {\n      return html``;\n    }\n\n    return html`\n      ${this.value.map(\n        (listEntry, index) => html`\n          <ha-textfield\n            .label=${this.inputLabel}\n            .value=${listEntry}\n            .configValue=${\"entry\"}\n            .index=${index}\n            @input=${this._valueChanged}\n            @blur=${this._consolidateEntries}\n            @keydown=${this._handleKeyDown}\n            iconTrailing\n            ><ha-icon-button\n              slot=\"trailingIcon\"\n              class=\"clear-button\"\n              .path=${mdiClose}\n              no-ripple\n              @click=${this._removeEntry}\n              .label=${this.hass!.localize(\"ui.common.clear\")}\n            >\n            </ha-icon-button>\n          </ha-textfield>\n        `\n      )}\n      <ha-textfield\n        .label=${this.inputLabel}\n        @change=${this._addEntry}\n      ></ha-textfield>\n    `;\n  }\n\n  private _addEntry(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    if (target.value === \"\") {\n      return;\n    }\n    const newEntries = this.value!.concat(target.value as string);\n    target.value = \"\";\n    fireEvent(this, \"value-changed\", {\n      value: newEntries,\n    });\n    (ev.target! as LitElement).blur();\n  }\n\n  private _valueChanged(ev: Event): void {\n    ev.stopPropagation();\n    const target = ev.target! as EditorTarget;\n    const newEntries = this.value!.concat();\n    newEntries[target.index!] = target.value!;\n    fireEvent(this, \"value-changed\", {\n      value: newEntries,\n    });\n  }\n\n  private _handleKeyDown(ev: KeyboardEvent) {\n    if (ev.key === \"Enter\") {\n      ev.stopPropagation();\n      this._consolidateEntries(ev);\n    }\n  }\n\n  private _consolidateEntries(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    if (target.value === \"\") {\n      const newEntries = this.value!.concat();\n      newEntries.splice(target.index!, 1);\n      fireEvent(this, \"value-changed\", {\n        value: newEntries,\n      });\n    }\n  }\n\n  private _removeEntry(ev: Event): void {\n    const parent = (ev.currentTarget as any).parentElement;\n    const newEntries = this.value!.concat();\n    newEntries.splice(parent.index!, 1);\n    fireEvent(this, \"value-changed\", {\n      value: newEntries,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-icon-button {\n        margin-right: -24px;\n        color: var(--secondary-text-color);\n      }\n      ha-textfield {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-list-editor\": HuiInputListEditor;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  array,\n  assert,\n  assign,\n  boolean,\n  number,\n  object,\n  optional,\n  string,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-switch\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { MapCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../components/hui-input-list-editor\";\nimport { EntityConfig } from \"../../entity-rows/types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { EntitiesEditorEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    title: optional(string()),\n    aspect_ratio: optional(string()),\n    default_zoom: optional(number()),\n    dark_mode: optional(boolean()),\n    entities: array(entitiesConfigStruct),\n    hours_to_show: optional(number()),\n    geo_location_sources: optional(array(string())),\n    auto_fit: optional(boolean()),\n  })\n);\n\nconst SCHEMA = [\n  { name: \"title\", selector: { text: {} } },\n  {\n    name: \"\",\n    type: \"grid\",\n    schema: [\n      { name: \"aspect_ratio\", selector: { text: {} } },\n      { name: \"default_zoom\", selector: { number: { mode: \"box\", min: 0 } } },\n      { name: \"dark_mode\", selector: { boolean: {} } },\n      { name: \"hours_to_show\", selector: { number: { mode: \"box\", min: 1 } } },\n    ],\n  },\n] as const;\n\n@customElement(\"hui-map-card-editor\")\nexport class HuiMapCardEditor extends LitElement implements LovelaceCardEditor {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: MapCardConfig;\n\n  @state() private _configEntities?: EntityConfig[];\n\n  public setConfig(config: MapCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = config.entities\n      ? processEditorEntities(config.entities)\n      : [];\n  }\n\n  get _geo_location_sources(): string[] {\n    return this._config!.geo_location_sources || [];\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${this._config}\n        .schema=${SCHEMA}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n      <div class=\"card-config\">\n        <hui-entity-editor\n          .hass=${this.hass}\n          .entities=${this._configEntities}\n          @entities-changed=${this._entitiesValueChanged}\n        ></hui-entity-editor>\n        <h3>\n          ${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.map.geo_location_sources\"\n          )}\n        </h3>\n        <div class=\"geo_location_sources\">\n          <hui-input-list-editor\n            .inputLabel=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.map.source\"\n            )}\n            .hass=${this.hass}\n            .value=${this._geo_location_sources}\n            @value-changed=${this._geoSourcesChanged}\n          ></hui-input-list-editor>\n        </div>\n      </div>\n    `;\n  }\n\n  private _entitiesValueChanged(ev: EntitiesEditorEvent): void {\n    if (ev.detail && ev.detail.entities) {\n      this._config = { ...this._config!, entities: ev.detail.entities };\n\n      this._configEntities = processEditorEntities(this._config.entities);\n      fireEvent(this, \"config-changed\", { config: this._config! });\n    }\n  }\n\n  private _geoSourcesChanged(ev: PolymerChangedEvent<any>): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const value = ev.detail.value;\n\n    if (this._geo_location_sources === value) {\n      return;\n    }\n\n    if (value === \"\") {\n      this._config = { ...this._config };\n      delete this._config.geo_location_sources;\n    } else {\n      this._config = {\n        ...this._config,\n        geo_location_sources: value,\n      };\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", { config: ev.detail.value });\n  }\n\n  private _computeLabelCallback = (schema: SchemaUnion<typeof SCHEMA>) => {\n    switch (schema.name) {\n      case \"dark_mode\":\n      case \"default_zoom\":\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.map.${schema.name}`\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        .geo_location_sources {\n          padding-left: 20px;\n          padding-inline-start: 20px;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-map-card-editor\": HuiMapCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"34bb5395.js","mappings":";;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC2BA;;AAKA;AACA;;;;;;;;;AASA;AACA;;;;;;;;;;AAUA;AAGA;AACA;;;;;AAKA;AAGA;AACA;;;;AAIA;AAIA;;;;;;;;AASA;;;;;;;;AAUA","sources":["webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-night.ts"],"sourcesContent":["import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"../../../components/ha-time-input\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\n\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\n\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"../../../components/ha-base-time-input\";\nimport \"../../../components/ha-switch\";\nimport { css, html, CSSResultGroup, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { HomeAssistant } from \"../../../types\";\n/*\n *\n */\n\n@customElement(\"ha-config-ais-dom-config-night\")\nclass HaConfigAisDomConfigNight extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide = true;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Boolean }) public quietMode = false;\n\n  @property({ type: String }) public quietModeInfo;\n\n  protected async firstUpdated() {\n    this.quietMode = this._computeQuietMode(this.hass);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .content {\n        padding-bottom: 32px;\n      }\n\n      .border {\n        margin: 32px auto 0;\n        border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n        max-width: 1040px;\n      }\n      .narrow .border {\n        max-width: 640px;\n      }\n      .card-actions {\n        display: flex;\n      }\n      ha-card > div#ha-switch-id {\n        margin: -4px 0;\n        position: absolute;\n        top: 32px;\n        right: 8px;\n      }\n      .center-container {\n        @apply --layout-vertical;\n        @apply --layout-center-center;\n        height: 70px;\n      }\n      div.person {\n        display: inline-block;\n        margin: 10px;\n      }\n      img {\n        border-radius: 50%;\n        width: 100px;\n        height: 100px;\n        border: 20px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <div .narrow=${this.narrow}>\n          <ha-config-section .isWide=${this.isWide}>\n            <span slot=\"header\">Ustawienia trybu nocnego</span>\n            <span slot=\"introduction\"\n              >Możesz ustalić, w jakich godzinach asystent ma ściszać audio oraz\n              zmieniać wygląd aplikacji na \"nocny\"</span\n            >\n            <ha-card header=\"Uruchamiaj tryb nocny*\">\n              <div id=\"ha-switch-id\">\n                <ha-switch\n                  .checked=${this.quietMode}\n                  @change=${this.changeQuietMode}\n                ></ha-switch>\n              </div>\n              <div\n                class=\"card-content\"\n                style=\"display: flex; align-items: center;\"\n              >\n                Rozpocznij o godzinie\n                <ha-time-input\n                  id=\"ais_quiet_mode_start\"\n                  .value=${this.hass.states[\n                    \"input_datetime.ais_quiet_mode_start\"\n                  ].state || \"22:00\"}\n                  .locale=${this.hass.locale}\n                  @value-changed=${this._selectedValueChanged}\n                ></ha-time-input>\n                zakończ o godzinie\n                <ha-time-input\n                  id=\"ais_quiet_mode_stop\"\n                  .value=${this.hass.states[\n                    \"input_datetime.ais_quiet_mode_stop\"\n                  ].state || \"6:00\"}\n                  .locale=${this.hass.locale}\n                  @value-changed=${this._selectedValueChanged}\n                ></ha-time-input>\n              </div>\n              <div class=\"card-content\">\n                ${this.hass.states[\"input_boolean.ais_quiet_mode\"].state ===\n                \"on\"\n                  ? html`o godzinie`\n                  : html`Jeśli włączysz tryb nocny, to o godzinie`}\n                ${this.hass.states[\"input_datetime.ais_quiet_mode_start\"]\n                  .state || \"22:00\"}\n                asystent:\n                <ul>\n                  <li>zredukuje głośność czytanych powiadomień do 20%</li>\n                  <li>zredukuje głośność odtwarzacza audio do 20%</li>\n                  <li>zmieni motyw wyglądu aplikacji na nocny</li>\n                </ul>\n                Po zakończeniu ciszy nocnej, o godzinie\n                ${this.hass.states[\"input_datetime.ais_quiet_mode_stop\"]\n                  .state || \"6:00\"},\n                głośność i wygląd zostaną automatycznie przywrócone do wartości\n                przed ciszą nocną.\n              </div>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  computeClasses(isWide) {\n    return isWide ? \"content\" : \"content narrow\";\n  }\n\n  _computeQuietMode(hass) {\n    if (hass.states[\"input_boolean.ais_quiet_mode\"].state === \"off\") {\n      this.quietModeInfo = \"Jeśli włączysz tryb nocny, to \";\n      return false;\n    }\n    this.quietModeInfo = \"\";\n    return true;\n  }\n\n  _selectedValueChanged(ev) {\n    const el = ev.target;\n    // call service\n    this.hass.callService(\"input_datetime\", \"set_datetime\", {\n      entity_id: \"input_datetime.\" + el.id,\n      time: el.value,\n    });\n  }\n\n  changeQuietMode() {\n    this.hass.callService(\"input_boolean\", \"toggle\", {\n      entity_id: \"input_boolean.ais_quiet_mode\",\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-night\": HaConfigAisDomConfigNight;\n  }\n}\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"a5790fb4.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAkCA;;ACpBA;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;ACpBA;;;AAOA;AAIA;;;;;AAKA;AACA;AACA;AACA;;;;;;;;AASA;AACA;;AAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA","sources":["webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-entity-editor.ts"],"sourcesContent":["import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { mdiDrag } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport type { SortableEvent } from \"sortablejs\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/entity/ha-entity-picker\";\nimport type { HaEntityPicker } from \"../../../components/entity/ha-entity-picker\";\nimport \"../../../components/ha-icon-button\";\nimport { sortableStyles } from \"../../../resources/ha-sortable-style\";\nimport {\n  loadSortable,\n  SortableInstance,\n} from \"../../../resources/sortable.ondemand\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EntityConfig } from \"../entity-rows/types\";\n\n@customElement(\"hui-entity-editor\")\nexport class HuiEntityEditor extends LitElement {\n  @property({ attribute: false }) protected hass?: HomeAssistant;\n\n  @property({ attribute: false }) protected entities?: EntityConfig[];\n\n  @property() protected label?: string;\n\n  private _entityKeys = new WeakMap<EntityConfig, string>();\n\n  private _sortable?: SortableInstance;\n\n  public disconnectedCallback() {\n    this._destroySortable();\n  }\n\n  private _getKey(action: EntityConfig) {\n    if (!this._entityKeys.has(action)) {\n      this._entityKeys.set(action, Math.random().toString());\n    }\n\n    return this._entityKeys.get(action)!;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entities) {\n      return html``;\n    }\n\n    return html`\n      <h3>\n        ${this.label ||\n        this.hass!.localize(\"ui.panel.lovelace.editor.card.generic.entities\") +\n          \" (\" +\n          this.hass!.localize(\"ui.panel.lovelace.editor.card.config.required\") +\n          \")\"}\n      </h3>\n      <div class=\"entities\">\n        ${repeat(\n          this.entities,\n          (entityConf) => this._getKey(entityConf),\n          (entityConf, index) => html`\n            <div class=\"entity\" data-entity-id=${entityConf.entity}>\n              <div class=\"handle\">\n                <ha-svg-icon .path=${mdiDrag}></ha-svg-icon>\n              </div>\n              <ha-entity-picker\n                .hass=${this.hass}\n                .value=${entityConf.entity}\n                .index=${index}\n                @value-changed=${this._valueChanged}\n                allow-custom-entity\n              ></ha-entity-picker>\n            </div>\n          `\n        )}\n      </div>\n      <ha-entity-picker\n        class=\"add-entity\"\n        .hass=${this.hass}\n        @value-changed=${this._addEntity}\n      ></ha-entity-picker>\n    `;\n  }\n\n  protected firstUpdated(): void {\n    this._createSortable();\n  }\n\n  private async _createSortable() {\n    const Sortable = await loadSortable();\n    this._sortable = new Sortable(\n      this.shadowRoot!.querySelector(\".entities\")!,\n      {\n        animation: 150,\n        fallbackClass: \"sortable-fallback\",\n        handle: \".handle\",\n        dataIdAttr: \"data-entity-id\",\n        onChoose: (evt: SortableEvent) => {\n          (evt.item as any).placeholder =\n            document.createComment(\"sort-placeholder\");\n          evt.item.after((evt.item as any).placeholder);\n        },\n        onEnd: (evt: SortableEvent) => {\n          // put back in original location\n          if ((evt.item as any).placeholder) {\n            (evt.item as any).placeholder.replaceWith(evt.item);\n            delete (evt.item as any).placeholder;\n          }\n          this._entityMoved(evt);\n        },\n      }\n    );\n  }\n\n  private _destroySortable() {\n    this._sortable?.destroy();\n    this._sortable = undefined;\n  }\n\n  private async _addEntity(ev: CustomEvent): Promise<void> {\n    const value = ev.detail.value;\n    if (value === \"\") {\n      return;\n    }\n    const newConfigEntities = this.entities!.concat({\n      entity: value as string,\n    });\n    (ev.target as HaEntityPicker).value = \"\";\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _entityMoved(ev: SortableEvent): void {\n    if (ev.oldIndex === ev.newIndex) {\n      return;\n    }\n\n    const newEntities = this.entities!.concat();\n\n    newEntities.splice(ev.newIndex!, 0, newEntities.splice(ev.oldIndex!, 1)[0]);\n\n    fireEvent(this, \"entities-changed\", { entities: newEntities });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const value = ev.detail.value;\n    const index = (ev.target as any).index;\n    const newConfigEntities = this.entities!.concat();\n\n    if (value === \"\" || value === undefined) {\n      newConfigEntities.splice(index, 1);\n    } else {\n      newConfigEntities[index] = {\n        ...newConfigEntities[index],\n        entity: value!,\n      };\n    }\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      sortableStyles,\n      css`\n        ha-entity-picker {\n          margin-top: 8px;\n        }\n        .add-entity {\n          display: block;\n          margin-left: 31px;\n          margin-inline-start: 31px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n        .entity {\n          display: flex;\n          align-items: center;\n        }\n        .entity .handle {\n          padding-right: 8px;\n          cursor: move;\n          padding-inline-end: 8px;\n          padding-inline-start: initial;\n          direction: var(--direction);\n        }\n        .entity .handle > * {\n          pointer-events: none;\n        }\n        .entity ha-entity-picker {\n          flex-grow: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-editor\": HuiEntityEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}
"""
    decentro-in-kyc

    KYC & Onboarding  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""


import re  # noqa: F401
import sys  # noqa: F401

from decentro_in_kyc_client.api_client import ApiClient, Endpoint as _Endpoint
from decentro_in_kyc_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from decentro_in_kyc_client.model.check_image_quality_response import CheckImageQualityResponse
from decentro_in_kyc_client.model.check_photocopy_response import CheckPhotocopyResponse
from decentro_in_kyc_client.model.check_video_liveness_response import CheckVideoLivenessResponse
from decentro_in_kyc_client.model.classify_document_response import ClassifyDocumentResponse
from decentro_in_kyc_client.model.extract_text_response import ExtractTextResponse
from decentro_in_kyc_client.model.mask_aadhaar_response import MaskAadhaarResponse
from decentro_in_kyc_client.model.match_face_response import MatchFaceResponse
from decentro_in_kyc_client.model.validate_response import ValidateResponse


class KYCApi(object):
    """NOTE: This class is auto generated by Konfig
    Ref: https://konfigthis.com

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.check_image_quality_endpoint = _Endpoint(
            settings={
                'response_type': (CheckImageQualityResponse,),
                'auth': [
                    'client_id',
                    'client_secret',
                    'module_secret'
                ],
                'endpoint_path': '/v2/kyc/forensics/image_quality',
                'operation_id': 'check_image_quality',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reference_id',
                    'consent',
                    'consent_purpose',
                    'image',
                    'quality_parameter',
                    'image_url',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reference_id':
                        (str,),
                    'consent':
                        (bool,),
                    'consent_purpose':
                        (str,),
                    'image':
                        (file_type,),
                    'quality_parameter':
                        (str,),
                    'image_url':
                        (str,),
                },
                'attribute_map': {
                    'reference_id': 'reference_id',
                    'consent': 'consent',
                    'consent_purpose': 'consent_purpose',
                    'image': 'image',
                    'quality_parameter': 'quality_parameter',
                    'image_url': 'image_url',
                },
                'location_map': {
                    'reference_id': 'form',
                    'consent': 'form',
                    'consent_purpose': 'form',
                    'image': 'form',
                    'quality_parameter': 'form',
                    'image_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.check_photocopy_endpoint = _Endpoint(
            settings={
                'response_type': (CheckPhotocopyResponse,),
                'auth': [
                    'client_id',
                    'client_secret',
                    'module_secret'
                ],
                'endpoint_path': '/v2/kyc/forensics/photocopy_check',
                'operation_id': 'check_photocopy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reference_id',
                    'consent',
                    'consent_purpose',
                    'image',
                    'image_url',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reference_id':
                        (str,),
                    'consent':
                        (bool,),
                    'consent_purpose':
                        (str,),
                    'image':
                        (file_type,),
                    'image_url':
                        (str,),
                },
                'attribute_map': {
                    'reference_id': 'reference_id',
                    'consent': 'consent',
                    'consent_purpose': 'consent_purpose',
                    'image': 'image',
                    'image_url': 'image_url',
                },
                'location_map': {
                    'reference_id': 'form',
                    'consent': 'form',
                    'consent_purpose': 'form',
                    'image': 'form',
                    'image_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.check_video_liveness_endpoint = _Endpoint(
            settings={
                'response_type': (CheckVideoLivenessResponse,),
                'auth': [
                    'client_id',
                    'client_secret',
                    'module_secret'
                ],
                'endpoint_path': '/v2/kyc/forensics/video_liveness',
                'operation_id': 'check_video_liveness',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reference_id',
                    'consent',
                    'consent_purpose',
                    'video',
                    'video_url',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reference_id':
                        (str,),
                    'consent':
                        (str,),
                    'consent_purpose':
                        (str,),
                    'video':
                        (file_type,),
                    'video_url':
                        (str,),
                },
                'attribute_map': {
                    'reference_id': 'reference_id',
                    'consent': 'consent',
                    'consent_purpose': 'consent_purpose',
                    'video': 'video',
                    'video_url': 'video_url',
                },
                'location_map': {
                    'reference_id': 'form',
                    'consent': 'form',
                    'consent_purpose': 'form',
                    'video': 'form',
                    'video_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.classify_document_endpoint = _Endpoint(
            settings={
                'response_type': (ClassifyDocumentResponse,),
                'auth': [
                    'client_id',
                    'client_secret',
                    'module_secret'
                ],
                'endpoint_path': '/v2/kyc/document_classification',
                'operation_id': 'classify_document',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reference_id',
                    'document_type',
                    'consent',
                    'consent_purpose',
                    'document',
                    'document_url',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reference_id':
                        (str,),
                    'document_type':
                        (str,),
                    'consent':
                        (bool,),
                    'consent_purpose':
                        (str,),
                    'document':
                        (file_type,),
                    'document_url':
                        (str,),
                },
                'attribute_map': {
                    'reference_id': 'reference_id',
                    'document_type': 'document_type',
                    'consent': 'consent',
                    'consent_purpose': 'consent_purpose',
                    'document': 'document',
                    'document_url': 'document_url',
                },
                'location_map': {
                    'reference_id': 'form',
                    'document_type': 'form',
                    'consent': 'form',
                    'consent_purpose': 'form',
                    'document': 'form',
                    'document_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.extract_text_endpoint = _Endpoint(
            settings={
                'response_type': (ExtractTextResponse,),
                'auth': [
                    'client_id',
                    'client_secret',
                    'module_secret'
                ],
                'endpoint_path': '/kyc/scan_extract/ocr',
                'operation_id': 'extract_text',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reference_id',
                    'document_type',
                    'consent',
                    'consent_purpose',
                    'kyc_validate',
                    'document',
                    'document_url',
                    'document_back',
                    'document_back_url',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reference_id':
                        (str,),
                    'document_type':
                        (str,),
                    'consent':
                        (str,),
                    'consent_purpose':
                        (str,),
                    'kyc_validate':
                        (int,),
                    'document':
                        (file_type,),
                    'document_url':
                        (str,),
                    'document_back':
                        (file_type,),
                    'document_back_url':
                        (str,),
                },
                'attribute_map': {
                    'reference_id': 'reference_id',
                    'document_type': 'document_type',
                    'consent': 'consent',
                    'consent_purpose': 'consent_purpose',
                    'kyc_validate': 'kyc_validate',
                    'document': 'document',
                    'document_url': 'document_url',
                    'document_back': 'document_back',
                    'document_back_url': 'document_back_url',
                },
                'location_map': {
                    'reference_id': 'form',
                    'document_type': 'form',
                    'consent': 'form',
                    'consent_purpose': 'form',
                    'kyc_validate': 'form',
                    'document': 'form',
                    'document_url': 'form',
                    'document_back': 'form',
                    'document_back_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.mask_aadhaar_uid_endpoint = _Endpoint(
            settings={
                'response_type': (MaskAadhaarResponse,),
                'auth': [
                    'client_id',
                    'client_secret',
                    'module_secret'
                ],
                'endpoint_path': '/v2/kyc/identities/mask_aadhaar_uid',
                'operation_id': 'mask_aadhaar_uid',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reference_id',
                    'consent',
                    'consent_purpose',
                    'image',
                    'image_url',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reference_id':
                        (str,),
                    'consent':
                        (str,),
                    'consent_purpose':
                        (str,),
                    'image':
                        (file_type,),
                    'image_url':
                        (str,),
                },
                'attribute_map': {
                    'reference_id': 'reference_id',
                    'consent': 'consent',
                    'consent_purpose': 'consent_purpose',
                    'image': 'image',
                    'image_url': 'image_url',
                },
                'location_map': {
                    'reference_id': 'form',
                    'consent': 'form',
                    'consent_purpose': 'form',
                    'image': 'form',
                    'image_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.match_face_endpoint = _Endpoint(
            settings={
                'response_type': (MatchFaceResponse,),
                'auth': [
                    'client_id',
                    'client_secret',
                    'module_secret'
                ],
                'endpoint_path': '/v2/kyc/forensics/face_match',
                'operation_id': 'match_face',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reference_id',
                    'consent',
                    'consent_purpose',
                    'image1',
                    'image2',
                    'threshold',
                    'image1_url',
                    'image2_url',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reference_id':
                        (str,),
                    'consent':
                        (str,),
                    'consent_purpose':
                        (str,),
                    'image1':
                        (file_type,),
                    'image2':
                        (file_type,),
                    'threshold':
                        (int,),
                    'image1_url':
                        (str,),
                    'image2_url':
                        (str,),
                },
                'attribute_map': {
                    'reference_id': 'reference_id',
                    'consent': 'consent',
                    'consent_purpose': 'consent_purpose',
                    'image1': 'image1',
                    'image2': 'image2',
                    'threshold': 'threshold',
                    'image1_url': 'image1_url',
                    'image2_url': 'image2_url',
                },
                'location_map': {
                    'reference_id': 'form',
                    'consent': 'form',
                    'consent_purpose': 'form',
                    'image1': 'form',
                    'image2': 'form',
                    'threshold': 'form',
                    'image1_url': 'form',
                    'image2_url': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.validate_endpoint = _Endpoint(
            settings={
                'response_type': (ValidateResponse,),
                'auth': [
                    'client_id',
                    'client_secret',
                    'module_secret'
                ],
                'endpoint_path': '/kyc/public_registry/validate',
                'operation_id': 'validate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        ({str: (bool, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def check_image_quality(
        self,
        **kwargs
    ):
        """Image Quality Check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_image_quality(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            reference_id (str): [optional]
            consent (bool): [optional]
            consent_purpose (str): [optional]
            image (file_type): [optional]
            quality_parameter (str): [optional]
            image_url (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CheckImageQualityResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.check_image_quality_endpoint.call_with_http_info(**kwargs)

    def check_photocopy(
        self,
        **kwargs
    ):
        """Photocopy Check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_photocopy(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            reference_id (str): [optional]
            consent (bool): [optional]
            consent_purpose (str): [optional]
            image (file_type): [optional]
            image_url (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CheckPhotocopyResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.check_photocopy_endpoint.call_with_http_info(**kwargs)

    def check_video_liveness(
        self,
        **kwargs
    ):
        """Liveness Check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_video_liveness(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            reference_id (str): [optional]
            consent (str): [optional]
            consent_purpose (str): [optional]
            video (file_type): [optional]
            video_url (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CheckVideoLivenessResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.check_video_liveness_endpoint.call_with_http_info(**kwargs)

    def classify_document(
        self,
        **kwargs
    ):
        """ID Classification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.classify_document(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            reference_id (str): [optional]
            document_type (str): [optional]
            consent (bool): [optional]
            consent_purpose (str): [optional]
            document (file_type): [optional]
            document_url (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClassifyDocumentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.classify_document_endpoint.call_with_http_info(**kwargs)

    def extract_text(
        self,
        **kwargs
    ):
        """Scan & Extract  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.extract_text(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            reference_id (str): [optional]
            document_type (str): [optional]
            consent (str): [optional]
            consent_purpose (str): [optional]
            kyc_validate (int): [optional]
            document (file_type): [optional]
            document_url (str): [optional]
            document_back (file_type): [optional]
            document_back_url (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ExtractTextResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.extract_text_endpoint.call_with_http_info(**kwargs)

    def mask_aadhaar_uid(
        self,
        **kwargs
    ):
        """Aadhaar Masking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mask_aadhaar_uid(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            reference_id (str): [optional]
            consent (str): [optional]
            consent_purpose (str): [optional]
            image (file_type): [optional]
            image_url (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MaskAadhaarResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.mask_aadhaar_uid_endpoint.call_with_http_info(**kwargs)

    def match_face(
        self,
        **kwargs
    ):
        """Face Match  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.match_face(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            reference_id (str): [optional]
            consent (str): [optional]
            consent_purpose (str): [optional]
            image1 (file_type): [optional]
            image2 (file_type): [optional]
            threshold (int): [optional]
            image1_url (str): [optional]
            image2_url (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MatchFaceResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.match_face_endpoint.call_with_http_info(**kwargs)

    def validate(
        self,
        **kwargs
    ):
        """Validate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            body ({str: (bool, dict, float, int, list, str, none_type)}): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ValidateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.validate_endpoint.call_with_http_info(**kwargs)


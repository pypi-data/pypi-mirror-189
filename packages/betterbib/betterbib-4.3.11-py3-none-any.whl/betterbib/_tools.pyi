from ._helpers import safeget as safeget
from ._tree import BraceGroup as BraceGroup, NodeTransformer as NodeTransformer, merge_strings as merge_strings, parse_into_latex_tree as parse_into_latex_tree, tree_to_string as tree_to_string, unicode_to_latex_tree as unicode_to_latex_tree
from .errors import UniqueError as UniqueError
from _typeshed import Incomplete
from pybtex.database import Entry as Entry

def create_capit_set(): ...
def bibtex_to_unicode(entry: Entry) -> None: ...
def pybtex_to_dict(entry): ...
def translate_month(key: str): ...

class BraceMultiword(NodeTransformer):
    mwc: Incomplete
    def __init__(self) -> None: ...
    def visit_str(self, node): ...

class WordAfterColon(NodeTransformer):
    def visit_str(self, node): ...

class OtherWordProtection(NodeTransformer):
    def visit_BraceGroup(self, node): ...
    def visit_str(self, node): ...

def preserve_title_capitalization(d: dict[str, Entry]) -> None: ...
def set_page_range_separator(d: dict[str, Entry], string: str) -> None: ...
def remove_multiple_spaces(d: dict[str, Entry]) -> None: ...
def pybtex_to_bibtex_string(entry: Entry, bibtex_key: str, delimiters: tuple[str, str] = ..., indent: str = ..., sort: bool = ...) -> str: ...
def doi_from_url(url): ...
def get_short_doi(doi): ...
def prettyprint_result(res): ...
def heuristic_unique_result(results, d, minimum_score: float): ...
def convert_to_latex(od: dict[str, Entry]) -> None: ...
def dict_to_string(od: dict[str, Entry], delimiter_type: str, tab_indent: bool, preamble: Union[list, None] = ...) -> str: ...
def merge(entry1, entry2): ...
def filter_fields(data, excludes: Incomplete | None = ...): ...
def bibtex_parser(infile): ...
def write(string: str, outfile: Incomplete | None = ...): ...

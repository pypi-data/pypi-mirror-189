{"version":3,"file":"142.373e86ac25b46c25.bundle.js","mappings":"mIAEAA,OAAOC,OAAS,CAAC,EAGjB,MAAMC,UAAgB,IAElBC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,sBAAuB,EAC5BD,KAAKE,iBAAkB,EACvBF,KAAKG,MAAQL,EAAKM,KAAKC,GACvBL,KAAKM,QAAU,KACfN,KAAKO,UAAW,EAChBP,KAAKQ,WAAa,GAClBR,KAAKS,YAAc,GACnBT,KAAKU,SAAW,KAChBV,KAAKW,QAAU,UACfX,KAAKY,aAAed,EAAKM,KAEN,iBAAfJ,KAAKG,OACLH,KAAKa,YAAY,WAAW,EAEpC,CAEAC,eAAeC,GAGNA,EAAKC,SACND,EAAKC,OAAS,IAGlBhB,KAAKiB,QAAUF,EAAKC,MACxB,CAEAE,oBAKI,IAAIlB,KAAKmB,aAAT,CAGUC,aAAaC,OAAvB,IACIC,EAAKF,aAAaG,QAAQvB,KAAKwB,mBAEnC,GAAW,OAAPF,EACA,IACiBG,KAAKC,MAAMJ,GACHN,OAAOW,MAAM,IAMtC,CALE,MAAOC,GAIL,OAFAC,QAAQC,IAAIF,EAAIG,cAChBX,aAAaY,WAAWhC,KAAKwB,kBAEjC,CAbJ,CAeJ,CAEAS,gBAAgBlB,GACZ,IAAImB,EAAY,IAAIC,KAChBC,EAAa,CACbpB,OAAQD,EAAKC,OACbqB,UAAWH,EACX5B,QAASS,EAAKT,SAElBc,aAAakB,QACTtC,KAAKwB,kBACLC,KAAKc,UAAUH,GAEvB,CAEAI,sBAAsBzB,GAClB,IAAI0B,EAAe,EACfC,EAAS,EACTC,EAAY,SAChB3C,KAAK4C,UAAY,CAAC,EAClB5C,KAAK6C,cAAgB9B,EAErB,IAAK,IAAI+B,KAAKC,OAAOC,KAAKjC,EAAKkC,UAAUhC,SACrCyB,GAAU,EAC6B,GAAnC3B,EAAKkC,UAAUhC,QAAQ6B,GAAGI,QAC1BT,GAAgB,GAEpBzC,KAAK4C,UAAUE,GAAK,GAAG/B,EAAKkC,UAAUhC,QAAQ6B,GAAGK,uBACjDR,GAAa,UAAU5B,EAAKkC,UAAUhC,QAAQ6B,GAAGK,iCAAiCpC,EAAKkC,UAAUhC,QAAQ6B,GAAGM,iBAEhH,IAAIC,EAAMZ,EAAeC,EAGzB1C,KAAKsD,QAAUD,EACfrD,KAAK2C,UAAYA,EAAY,WAAWF,WAAsBC,SAAcW,IAExErD,KAAKM,QADE,GAAP+C,CAMR,CAEAE,uBAAuBC,GACnBxD,KAAKyD,aAAa,CACdC,MAAO,UACPC,OAAQ3D,KAAKG,MACbyD,IAAK5D,KAAK2C,UACVrC,QAASN,KAAKM,QACdU,OAAQS,KAAKc,UAAUvC,KAAK4C,YAGpC,CAEAiB,qBAEA,EAQJ,SAASC,EAAWC,EAAGhD,GACnB,IAAIiD,EAAQrE,OAAOoB,EAAKkD,WAAWC,YAAYC,QAAQ,SAAS,KAChEH,EAAMxB,sBAAsBzB,GAC5BiD,EAAMI,kBACV,CAEA,SAASC,EAAeN,EAAGhD,GACXpB,OAAOoB,EAAKkD,WAAWC,YAAYC,QAAQ,SAAS,KAC1DV,aAAa,CACfC,MAAO,UACPC,OAAQ5C,EAAKkD,WAAWC,YACxBN,IAAK,QAEb,MAMwC,IAA7BlE,OAAO4E,oBACd5E,OAAO4E,kBAAoB,CAAC,GAGhC5E,OAAO4E,kBAAkBC,QAAU,SAASzE,GACxC,OAAO,IAAIF,CACf,EAEA4E,GAAE,WACEA,EAAE,QAAQC,GAAG,qBAAsBX,GACnCU,EAAE,QAAQC,GAAG,yBAA0BJ,EAC3C,IAGAG,EAAEE,UAAUD,GAAG,4BAA4B,WACvCD,EAAE,4BAA4BG,MAAK,SAAUC,GAEzC,IAAI9E,EAAO,CACPM,KAAMJ,KACNC,qBAAsB4E,YAAY5E,sBAE4B,GAA9DuE,EAAExE,MAAM8E,QAAQ,oCAAoCzD,SAEpD3B,OAAOC,OAAOK,KAAKK,IAAM,IAAIT,EAAQE,GAE7C,GACJ,G","sources":["webpack://WebComponents/./runestone/webwork/js/webwork.js"],"sourcesContent":["import RunestoneBase from \"../../common/js/runestonebase\";\n\nwindow.wwList = {}; // Multiple Choice dictionary\n\n\nclass WebWork extends RunestoneBase {\n\n    constructor(opts) {\n        super(opts);\n        this.useRunestoneServices = true;\n        this.multipleanswers = false;\n        this.divid = opts.orig.id;\n        this.correct = null;\n        this.optional = false;\n        this.answerList = [];\n        this.correctList = [];\n        this.question = null;\n        this.caption = \"WebWork\";\n        this.containerDiv = opts.orig\n        //this.addCaption(\"runestone\");\n        if (this.divid !== \"fakeww-ww-rs\") {\n            this.checkServer(\"webwork\", true);\n        }\n    }\n\n    restoreAnswers(data) {\n        // Restore answers from storage retrieval done in RunestoneBase\n        // sometimes data.answer can be null\n        if (!data.answer) {\n            data.answer = \"\";\n        }\n        // data.answers comes from postgresql as a JSON column type so no need to parse it.\n        this.answers = data.answer;\n    }\n\n    checkLocalStorage() {\n        // Repopulates MCMA questions with a user's previous answers,\n        // which were stored into local storage.\n        var storedData;\n        var answers;\n        if (this.graderactive) {\n            return;\n        }\n        var len = localStorage.length;\n        var ex = localStorage.getItem(this.localStorageKey());\n\n        if (ex !== null) {\n            try {\n                storedData = JSON.parse(ex);\n                answers = storedData.answer.split(\":\");\n            } catch (err) {\n                // error while parsing; likely due to bad value stored in storage\n                console.log(err.message);\n                localStorage.removeItem(this.localStorageKey());\n                return;\n            }\n        }\n    }\n\n    setLocalStorage(data) {\n        var timeStamp = new Date();\n        var storageObj = {\n            answer: data.answer,\n            timestamp: timeStamp,\n            correct: data.correct,\n        };\n        localStorage.setItem(\n            this.localStorageKey(),\n            JSON.stringify(storageObj)\n        );\n    }\n\n    processCurrentAnswers(data) {\n        let correctCount = 0;\n        let qCount = 0;\n        let actString = \"check:\";\n        this.answerObj = {}\n        this.lastAnswerRaw = data;\n\n        for (let k of Object.keys(data.rh_result.answers)) {\n            qCount += 1;\n            if (data.rh_result.answers[k].score == 1) {\n                correctCount += 1;\n            }\n            this.answerObj[k] = `${data.rh_result.answers[k].original_student_ans}`\n            actString += `actual:${data.rh_result.answers[k].original_student_ans}:expected:${data.rh_result.answers[k].correct_value}:`;\n        }\n        let pct = correctCount / qCount;\n        // If this.percent is set, then runestonebase will transmit it as part of\n        // the logBookEvent API.\n        this.percent = pct;\n        this.actString = actString + `correct:${correctCount}:count:${qCount}:pct:${pct}`;\n        if (pct == 1.0) {\n            this.correct = true;\n        } else {\n            this.correct = false;\n        }\n\n    }\n\n    async logCurrentAnswer(sid) {\n        this.logBookEvent({\n            event: \"webwork\",\n            div_id: this.divid, //todo unmangle problemid\n            act: this.actString,\n            correct: this.correct,\n            answer: JSON.stringify(this.answerObj),\n        });\n\n    }\n\n    checkCurrentAnswer() {\n\n    }\n\n}\n\n\n//\n// These are functions that get called in response to webwork generated events.\n// submitting the work, or showing an answer.\nfunction logWebWork(e, data) {\n    let wwObj = wwList[data.inputs_ref.problemUUID.replace(\"-ww-rs\",\"\")]\n    wwObj.processCurrentAnswers(data);\n    wwObj.logCurrentAnswer();\n}\n\nfunction logShowCorrect(e, data) {\n    let wwObj = wwList[data.inputs_ref.problemUUID.replace(\"-ww-rs\",\"\")]\n    wwObj.logBookEvent({\n        event: \"webwork\",\n        div_id: data.inputs_ref.problemUUID,\n        act: \"show\",\n    });\n}\n\nasync function getScores(sid, wwId) {\n\n}\n\nif (typeof window.component_factory === \"undefined\") {\n    window.component_factory = {};\n}\n\nwindow.component_factory.webwork = function(opts) {\n    return new WebWork();\n};\n\n$(function() {\n    $(\"body\").on(\"runestone_ww_check\", logWebWork);\n    $(\"body\").on(\"runestone_show_correct\", logShowCorrect);\n});\n\n\n$(document).on(\"runestone:login-complete\", function () {\n    $(\"[data-component=webwork]\").each(function (index) {\n        // MC\n        var opts = {\n            orig: this,\n            useRunestoneServices: eBookConfig.useRunestoneServices,\n        };\n        if ($(this).closest(\"[data-component=timedAssessment]\").length == 0) {\n            // If this element exists within a timed component, don't render it here\n            window.wwList[this.id] = new WebWork(opts);\n        }\n    });\n});\n"],"names":["window","wwList","WebWork","constructor","opts","super","this","useRunestoneServices","multipleanswers","divid","orig","id","correct","optional","answerList","correctList","question","caption","containerDiv","checkServer","restoreAnswers","data","answer","answers","checkLocalStorage","graderactive","localStorage","length","ex","getItem","localStorageKey","JSON","parse","split","err","console","log","message","removeItem","setLocalStorage","timeStamp","Date","storageObj","timestamp","setItem","stringify","processCurrentAnswers","correctCount","qCount","actString","answerObj","lastAnswerRaw","k","Object","keys","rh_result","score","original_student_ans","correct_value","pct","percent","async","sid","logBookEvent","event","div_id","act","checkCurrentAnswer","logWebWork","e","wwObj","inputs_ref","problemUUID","replace","logCurrentAnswer","logShowCorrect","component_factory","webwork","$","on","document","each","index","eBookConfig","closest"],"sourceRoot":""}
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: dreamy-benz-99c001
spec:
    name: st
    retentionRules:
        - everySeconds: 3600
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: thirsty-einstein-59c001
spec:
    name: lt
    retentionRules:
        - everySeconds: 3.1536e+07
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: epic-tharp-d9c001
spec:
    every: 5m0s
    name: aggregate_ina226
    query: |-
        import "influxdata/influxdb/tasks"






        from(bucket: "st")
            |> range(start: tasks.lastSuccess(orTime: -1h))
            |> filter(fn: (r) => r["_measurement"] =~ /ina226_*/)
            |> filter(
                fn: (r) =>
                    r["_field"] == "P" or r["_field"] == "I" or r["_field"] == "V" or r["_field"] == "P",
            )
            |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)
            |> to(bucket: "lt")
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: objective-mendel-99c003
spec:
    every: 5m0s
    name: aggregate_vmppt
    query: |-
        import "influxdata/influxdb/tasks"






        rawwindow =
            from(bucket: "st")
                |> range(start: tasks.lastSuccess(orTime: -1h))
                |> filter(fn: (r) => r["_measurement"] =~ /vmppt_*/)

        aggmean =
            rawwindow
                |> filter(fn: (r) => r["_field"] == "batteryVoltage" or r["_field"] == "batteryCurrent")
                |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)

        agglast =
            rawwindow
                |> filter(
                    fn: (r) =>
                        r["_field"] == "yieldToday" or r["_field"] == "yieldYesterday" or r["_field"]
                            ==
                            "maximumPowerToday" or r["_field"] == "maximumPowerYesterday" or r["_field"]
                            ==
                            "mode" or r["_field"] == "trackerMode",
                )
                |> aggregateWindow(every: 5m, fn: last, createEmpty: false)

        union(tables: [aggmean, agglast])
            |> to(bucket: "lt")
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: objective-sutherland-d9c003
spec:
    every: 30s
    name: sync
    query: |-
        import "influxdata/influxdb/tasks"
        import "influxdata/influxdb/secrets"






        cloud_host = secrets.get(key: "cloud_host")
        cloud_org = secrets.get(key: "cloud_org")
        cloud_token = secrets.get(key: "cloud_token")
        site = secrets.get(key: "site")

        from(bucket: "lt")
            |> range(start: tasks.lastSuccess(orTime: -1h))
            |> to(host: cloud_host, org: cloud_org, token: cloud_token, bucket: site)
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: bettering-goldberg-19c001
spec:
    language: flux
    name: bucket
    query: |-
        buckets()
          |> filter(fn: (r) => r.name !~ /^_/)
          |> rename(columns: {name: "_value"})
          |> keep(columns: ["_value"])
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: earnest-cori-d9c001
spec:
    charts:
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 3
          height: 1
          kind: Single_Stat
          name: Camper Battery
          prefix: 'I = '
          queries:
            - query: |-
                from(bucket: "st")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "ina226")
                  |> filter(fn: (r) => r["_field"] == "I")
                  |> filter(fn: (r) => r["id"] == "0001")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> yield(name: "mean")
          staticLegend: {}
          suffix: ' A'
          width: 2
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 3
          height: 1
          kind: Single_Stat
          name: PV Battery
          prefix: 'I = '
          queries:
            - query: |-
                from(bucket: "st")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "vmppt")
                  |> filter(fn: (r) => r["_field"] == "batteryCurrent")
                  |> filter(fn: (r) => r["id"] == "0001")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1000.0}))
                  |> yield(name: "mean")
          staticLegend: {}
          suffix: ' A'
          width: 2
          yPos: 1
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              label: Current [A], Voltage [V], Power [W]
              name: "y"
              scale: linear
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: JT7ngoUTdOMI-GSFDLJDZ
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: uivbEShCB-6oXXXrYYXkF
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: zILm1OxD2koArt9fc25B2
              name: Nineteen Eighty Four
              type: scale
          geom: line
          height: 3
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: INA226
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                from(bucket: "st")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "ina226")
                  |> filter(fn: (r) => r["id"] == "0001")
                  |> yield(name: "mean")
          staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 6
          widthRatio: 1
          yPos: 2
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              label: Current [A], Voltage [V], Mode
              name: "y"
              scale: linear
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: 07gg8nBKqmyvg3Q0wQJar
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: 4had-jYY8hkLS2FHzjbfI
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: WmCsfiZkbPo-fF9teAUrB
              name: Nineteen Eighty Four
              type: scale
          geom: step
          height: 3
          heightRatio: 0.2853881278538813
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: VMPPT
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                mpptwindow =
                    from(bucket: "st")
                        |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                        |> filter(fn: (r) => r["_measurement"] == "vmppt")
                        |> filter(fn: (r) => r["id"] == "0001")

                mpptwindow
                    |> filter(fn: (r) => r["_field"] == "batteryVoltage" or r["_field"] == "batteryCurrent")
                    |> map(fn: (r) => ({r with _value: float(v: r._value) / 1000.0}))
                    |> yield(name: "voltageandcurrent")

                mpptwindow
                    |> filter(fn: (r) => r["_field"]== "mode" or r["_field"] == "trackerMode")
                    |> yield(name: "modes")
          staticLegend:
            colorizeRows: true
            heightRatio: 0.2853881278538813
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 6
          widthRatio: 1
          yPos: 5
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 3
          height: 1
          kind: Single_Stat
          name: Camper Battery
          prefix: 'V = '
          queries:
            - query: "from(bucket: \"st\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ina226\")\n  |> filter(fn: (r) => r[\"_field\"] == \"V\")\n  |> filter(fn: (r) => r[\"id\"] == \"0001\")  \n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
          staticLegend: {}
          suffix: ' V'
          width: 2
          xPos: 2
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 3
          height: 1
          kind: Single_Stat
          name: PV Battery
          prefix: 'V = '
          queries:
            - query: |-
                from(bucket: "st")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "vmppt")
                  |> filter(fn: (r) => r["_field"] == "batteryVoltage")
                  |> filter(fn: (r) => r["id"] == "0001")
                  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1000.0}))
                  |> yield(name: "mean")
          staticLegend: {}
          suffix: ' V'
          width: 2
          xPos: 2
          yPos: 1
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 3
          height: 1
          kind: Single_Stat
          name: Camper Battery
          prefix: 'P = '
          queries:
            - query: |-
                from(bucket: "st")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "ina226")
                  |> filter(fn: (r) => r["_field"] == "P")
                  |> filter(fn: (r) => r["id"] == "0001")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> yield(name: "mean")
          staticLegend: {}
          suffix: ' W'
          width: 2
          xPos: 4
    name: BigBird Raw
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: sleepy-wilbur-59c001
spec:
    charts:
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              label: Current [A], Voltage [V], Power [W]
              name: "y"
              scale: linear
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: JT7ngoUTdOMI-GSFDLJDZ
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: uivbEShCB-6oXXXrYYXkF
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: zILm1OxD2koArt9fc25B2
              name: Nineteen Eighty Four
              type: scale
          geom: line
          height: 3
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: INA226
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                from(bucket: "lt")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "ina226")
                  |> filter(fn: (r) => r["id"] == "0001")
                  |> yield(name: "mean")
          staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 6
          widthRatio: 1
          xCol: _time
          yCol: _value
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              label: Current [A], Voltage [V], Mode
              name: "y"
              scale: linear
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: 07gg8nBKqmyvg3Q0wQJar
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: 4had-jYY8hkLS2FHzjbfI
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: WmCsfiZkbPo-fF9teAUrB
              name: Nineteen Eighty Four
              type: scale
          geom: step
          height: 3
          heightRatio: 0.2853881278538813
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: VMPPT
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                aggwindow =
                    from(bucket: "lt")
                        |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                        |> filter(fn: (r) => r["_measurement"] == "vmppt")
                        |> filter(fn: (r) => r["id"] == "0001")

                aggwindow
                    |> filter(fn: (r) => r["_field"] == "batteryVoltage" or r["_field"] == "batteryCurrent")
                    |> map(fn: (r) => ({r with _value: float(v: r._value) / 1000.0}))
                    |> yield(name: "voltageandcurrent")

                aggwindow
                    |> filter(fn: (r) => r["_field"]== "mode" or r["_field"] == "trackerMode")
                    |> yield(name: "modes")
          staticLegend:
            colorizeRows: true
            heightRatio: 0.2853881278538813
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 6
          widthRatio: 1
          yPos: 3
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 0
          height: 1
          kind: Single_Stat
          name: Yield Today
          prefix: 'Yield Today:  '
          queries:
            - query: |-
                from(bucket: "st")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "vmppt")
                  |> filter(fn: (r) => r["id"] == "0001")
                  |> filter(fn: (r) => r["_field"] == "yieldToday")
                  |> last()
                  |> map(fn: (r) => ({r with _value: float(v: r._value) * 10.0}))
          staticLegend: {}
          suffix: ' Wh'
          width: 2
          yPos: 6
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 0
          height: 1
          kind: Single_Stat
          name: Yield Yesterday
          prefix: 'Yield Yesterday:  '
          queries:
            - query: |-
                from(bucket: "st")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "vmppt")
                  |> filter(fn: (r) => r["id"] == "0001")
                  |> filter(fn: (r) => r["_field"] == "yieldYesterday")
                  |> last()
                  |> map(fn: (r) => ({r with _value: float(v: r._value) * 10.0}))
          staticLegend: {}
          suffix: ' Wh'
          width: 2
          yPos: 7
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 0
          height: 1
          kind: Single_Stat
          name: Max Power Today
          prefix: '  Max Power Today: '
          queries:
            - query: |-
                from(bucket: "st")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "vmppt")
                  |> filter(fn: (r) => r["id"] == "0001")
                  |> filter(fn: (r) => r["_field"] == "maximumPowerToday")
                  |> last()
          staticLegend: {}
          suffix: ' W'
          width: 2
          yPos: 8
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 0
          height: 1
          kind: Single_Stat
          name: Max Power Yesterday
          prefix: '  Max Power Yesterday: '
          queries:
            - query: |-
                from(bucket: "st")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "vmppt")
                  |> filter(fn: (r) => r["id"] == "0001")
                  |> filter(fn: (r) => r["_field"] == "maximumPowerYesterday")
                  |> last()
          staticLegend: {}
          suffix: ' W'
          width: 2
          yPos: 9
    name: BigBird
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: spectacular-dijkstra-59c001
spec:
    charts:
        - height: 1
          kind: Markdown
          name: Name this Cell
          note: '#### This Dashboard gives you an overview of some of the metrics that are available from the Local Metrics endpoint located at `/metrics`. Check out our [documentation page for configuring Scrapers](https://v2.docs.influxdata.com/v2.0/collect-data/scrape-data/manage-scrapers/create-a-scraper/) if you don''t see any data below.'
          staticLegend: {}
          width: 12
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 2
          height: 2
          kind: Single_Stat
          name: Uptime
          note: This shows the amount of time your current InfluxDB 2 instance has been running, in hours. Keep it up!
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_uptime_seconds")
                  |> filter(fn: (r) => r._field == "gauge")
                  |> last()
                  |> map(fn: (r) => ({r with _value: float(v: r._value) / 60.0 / 60.0}))
          staticLegend: {}
          suffix: ' hrs'
          width: 3
          yPos: 1
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 2
          height: 1
          kind: Single_Stat
          name: ""
          note: An Organization is a workspace where you and your team can organize your data, Dashboards, Tasks, and anything else you create. You can quickly switch between or create a new one from the first icon in the navigation bar. You can read more about Organizations in our [documentation](https://v2.docs.influxdata.com/v2.0/organizations/).
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_organizations_total")
                  |> filter(fn: (r) => r._field == "counter")
                  |> last()
          staticLegend: {}
          suffix: ' Orgs'
          width: 3
          yPos: 3
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 2
          height: 1
          kind: Single_Stat
          name: ""
          note: InfluxDB 2 can create and store your Telegraf agent configs. Telegraf is the world's best data collection agent and is one of the easiest ways to send data into InfluxDB. You can create new configurations in the Settings menu. You can learn more about Telegraf in our [documentation](https://v2.docs.influxdata.com/v2.0/collect-data/use-telegraf/).
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_telegrafs_total")
                  |> filter(fn: (r) => r._field == "counter")
                  |> last()
                  |> yield(name: "last")
          staticLegend: {}
          suffix: ' Telegrafs'
          width: 3
          yPos: 4
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              name: "y"
              scale: linear
          geom: line
          height: 4
          kind: Xy
          name: Local Object Store IO
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "boltdb_reads_total" or r._measurement == "boltdb_writes_total")
                  |> filter(fn: (r) => r._field == "counter")
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> drop(columns: ["_field"])
                  |> yield(name: "derivative")
          staticLegend: {}
          width: 12
          yPos: 5
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              name: "y"
              scale: linear
          geom: line
          height: 4
          kind: Xy
          name: Query Requests
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "http_api_requests_total")
                  |> filter(fn: (r) => r.path == "/api/v2/query")
                  |> filter(fn: (r) => r._field == "counter")
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> yield(name: "derivative")
          staticLegend: {}
          width: 12
          yPos: 9
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              name: "y"
              scale: linear
          geom: line
          height: 3
          kind: Xy
          name: Memory Allocations (Bytes)
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "go_memstats_alloc_bytes_total")
                  |> filter(fn: (r) => r._field == "counter")
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> yield(name: "derivative")
          staticLegend: {}
          width: 4
          yPos: 13
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          fieldOptions:
            - visible: true
            - displayName: result
              fieldName: result
              visible: true
            - displayName: table
              fieldName: table
              visible: true
            - displayName: Architecture
              fieldName: Architecture
              visible: true
            - displayName: Build Date
              fieldName: Build Date
              visible: true
            - displayName: Github Commit
              fieldName: Github Commit
              visible: true
            - displayName: CPUs
              fieldName: CPUs
              visible: true
            - displayName: OS
              fieldName: OS
              visible: true
            - displayName: Version
              fieldName: Version
              visible: true
          height: 2
          kind: Table
          name: Instance Info
          note: This cell gives you information about your running instance of InfluxDB 2, but you probably already knew that.
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_info")
                  |> last()
                  |> drop(columns: ["_start", "_stop","_time","_field","_value","_measurement"])
                  |> rename(columns: {arch: "Architecture", build_date: "Build Date", commit: "Github Commit", cpus: "CPUs", os: "OS", version: "Version"})
                  |> yield(name: "last")
          staticLegend: {}
          tableOptions:
            verticalTimeAxis: true
          timeFormat: YYYY-MM-DD HH:mm:ss
          width: 9
          xPos: 3
          yPos: 1
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 2
          height: 1
          kind: Single_Stat
          name: ""
          note: This lets you know how many users have access to your InfluxDB 2 instance. You can add new users from the Settings menu. You can learn more about Users in our [documentation](https://v2.docs.influxdata.com/v2.0/users/).
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_users_total")
                  |> filter(fn: (r) => r._field == "counter")
                  |> last()
                  |> yield(name: "last")
          staticLegend: {}
          suffix: ' Users'
          width: 3
          xPos: 3
          yPos: 3
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 2
          height: 1
          kind: Single_Stat
          name: ""
          note: Dashboards are a great way to group together and view data in InfluxDB 2. You can create new ones from the Dashboards page in the navigation menu. For more information on managing Dashboards, check out our [documentation](https://v2.docs.influxdata.com/v2.0/visualize-data/dashboards/).
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_dashboards_total")
                  |> filter(fn: (r) => r._field == "counter")
                  |> last()
                  |> yield(name: "last")
          staticLegend: {}
          suffix: ' Dashboards'
          width: 3
          xPos: 3
          yPos: 4
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              name: "y"
              scale: linear
              suffix: '%'
          geom: line
          height: 3
          kind: Xy
          name: Memory Usage (%)
          queries:
            - query: "bytes_used = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"go_memstats_alloc_bytes\")\n  |> filter(fn: (r) => r._field == \"gauge\")\n  |> drop(columns: [\"_start\", \"_stop\"])\n  \ntotal_bytes = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"go_memstats_sys_bytes\")\n  |> filter(fn: (r) => r._field == \"gauge\")\n  |> drop(columns: [\"_start\", \"_stop\"])\n\njoin(tables: {key1: bytes_used, key2: total_bytes}, on: [\"_time\", \"_field\"], method: \"inner\")\n  |> map(fn: (r) => ({\n    _time: r._time,\n    _value: (float(v: r._value_key1) / float(v: r._value_key2)) * 100.0,\n    _field: \"Memory Usage Percent\"\n  }))\n  |> yield(name: \"percentage\")"
          staticLegend: {}
          width: 4
          xPos: 4
          yPos: 13
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 2
          height: 1
          kind: Single_Stat
          name: ""
          note: A Bucket is where you store your time series data and each one has a set retention policy. You created one when you first set your instance up, but you can create new ones from the Settings menu. You can learn more about Buckets in our [documentation](https://v2.docs.influxdata.com/v2.0/organizations/buckets/). Why not create a new one right now?
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_buckets_total")
                  |> filter(fn: (r) => r._field == "counter")
                  |> last()
          staticLegend: {}
          suffix: ' Buckets'
          width: 3
          xPos: 6
          yPos: 3
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 2
          height: 1
          kind: Single_Stat
          name: ""
          note: InfluxDB 2 can natively scrape data from Prometheus endpoints, including its own metrics. For more information on setting them up, check out our [documentation](https://v2.docs.influxdata.com/v2.0/collect-data/scrape-data/).
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_scrapers_total")
                  |> filter(fn: (r) => r._field == "counter")
                  |> last()
                  |> yield(name: "last")
          staticLegend: {}
          suffix: ' Scrapers'
          width: 3
          xPos: 6
          yPos: 4
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              name: "y"
              scale: linear
          geom: line
          height: 3
          kind: Xy
          name: Memory Allocs & Frees (Bytes)
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "go_memstats_mallocs_total" or r._measurement == "go_memstats_frees_total")
                  |> filter(fn: (r) => r._field == "counter")
                  |> derivative(unit: v.windowPeriod, nonNegative: false)
                  |> yield(name: "derivative")
          staticLegend: {}
          width: 4
          xPos: 8
          yPos: 13
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 2
          height: 1
          kind: Single_Stat
          name: ""
          note: A Token allows you to access your instance from an external client such as a command line or a client library. They are also used to limit the scope of automated actions like Tasks. You can manage them in the Setting menu. You can learn more about Tokens in our [documentation](https://v2.docs.influxdata.com/v2.0/security/tokens/). Keep your Tokens safe!
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_tokens_total")
                  |> filter(fn: (r) => r._field == "counter")
                  |> last()
                  |> yield(name: "last")
          staticLegend: {}
          suffix: ' Tokens'
          width: 3
          xPos: 9
          yPos: 3
        - colors:
            - hex: '#00C9FF'
              id: base
              name: laser
              type: text
          decimalPlaces: 2
          height: 1
          kind: Single_Stat
          name: ""
          note: Tasks allow you to automate Flux queries for things like data rollups and enrichment. You can create a new one from the Tasks button in the navigation menu. For more information about Tasks, check out our [documentation](https://v2.docs.influxdata.com/v2.0/process-data/).
          queries:
            - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "task_scheduler_total_runs_active")
                  |> filter(fn: (r) => r._field == "gauge")
                  |> last()
                  |> yield(name: "last")
          staticLegend: {}
          suffix: ' Tasks'
          width: 3
          xPos: 9
          yPos: 4
    description: A collection of useful visualizations for monitoring your local InfluxDB 2.0 OSS instance.
    name: InfluxDB 2.0 OSS Metrics
